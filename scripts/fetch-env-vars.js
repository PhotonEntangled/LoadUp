/**
 * fetch-env-vars.js
 * 
 * Script to fetch environment variables from GitHub secrets and set them in the local environment.
 * This script uses the GitHub CLI to fetch secrets and set them as environment variables.
 * 
 * Usage:
 *   node scripts/fetch-env-vars.js
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get current file directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

console.log('Fetching environment variables from GitHub...');

// Function to run a command and return its output
function runCommand(command) {
  try {
    return execSync(command, { encoding: 'utf8', cwd: projectRoot }).trim();
  } catch (error) {
    console.error(`Error running command: ${command}`);
    console.error(error.message);
    return null;
  }
}

// Check if GitHub CLI is installed
try {
  const ghVersion = runCommand('gh --version');
  console.log(`GitHub CLI detected: ${ghVersion.split('\n')[0]}`);
} catch (error) {
  console.error('GitHub CLI not found. Please install it from https://cli.github.com/');
  process.exit(1);
}

// Check if user is logged in to GitHub
try {
  const ghAuth = runCommand('gh auth status');
  console.log('GitHub authentication status:');
  console.log(ghAuth);
} catch (error) {
  console.error('Not logged in to GitHub. Please login:');
  execSync('gh auth login', { stdio: 'inherit', cwd: projectRoot });
}

// Get repository information
let repoOwner, repoName;
try {
  const repoUrl = runCommand('gh repo view --json url -q .url');
  const repoMatch = repoUrl.match(/github\.com\/([^\/]+)\/([^\/]+)/);
  if (repoMatch) {
    repoOwner = repoMatch[1];
    repoName = repoMatch[2];
    console.log(`Repository: ${repoOwner}/${repoName}`);
  } else {
    throw new Error('Could not determine repository owner and name');
  }
} catch (error) {
  console.error('Error getting repository information:', error.message);
  process.exit(1);
}

// List of environment variables to fetch
const envVars = [
  'DATABASE_URL',
  'NEXTAUTH_SECRET',
  'NEXTAUTH_URL',
  'GOOGLE_CLOUD_VISION_API_KEY',
  'MAPBOX_ACCESS_TOKEN',
  'STRIPE_SECRET_KEY',
  'STRIPE_WEBHOOK_SECRET',
  'SUPABASE_URL',
  'SUPABASE_KEY'
];

// Create .env file
const envFilePath = path.join(projectRoot, '.env');
let envFileContent = '# Environment variables for LoadUp project\n# Generated by fetch-env-vars.js\n\n';

// Fetch environment variables from GitHub secrets
console.log('Fetching secrets...');
for (const envVar of envVars) {
  try {
    console.log(`Fetching ${envVar}...`);
    // This command will fail if the secret doesn't exist
    const secretValue = runCommand(`gh secret get ${envVar} -R ${repoOwner}/${repoName}`);
    
    if (secretValue) {
      // Add to .env file
      envFileContent += `${envVar}=${secretValue}\n`;
      console.log(`✅ ${envVar} fetched successfully`);
    } else {
      console.log(`⚠️ ${envVar} not found or empty`);
      // Add placeholder for missing variables
      envFileContent += `${envVar}=your_${envVar.toLowerCase()}_here\n`;
    }
  } catch (error) {
    console.log(`⚠️ ${envVar} not found or access denied`);
    // Add placeholder for missing variables
    envFileContent += `${envVar}=your_${envVar.toLowerCase()}_here\n`;
  }
}

// Write .env file
fs.writeFileSync(envFilePath, envFileContent);
console.log(`\nEnvironment variables written to ${envFilePath}`);

// Create a PowerShell script to upload variables to Vercel
const psScriptPath = path.join(projectRoot, 'scripts', 'upload-env-to-vercel.ps1');
console.log(`\nPowerShell script for uploading to Vercel is available at: ${psScriptPath}`);
console.log('You can run this script to upload environment variables to Vercel:');
console.log('  powershell -ExecutionPolicy Bypass -File scripts\\upload-env-to-vercel.ps1');

console.log('\nEnvironment variables fetching completed successfully!'); 