/**
 * setup-vercel-env.js
 * 
 * Script to set up Vercel environment variables for deployment.
 * This script creates a .env file for Vercel deployment and sets up the environment variables.
 * 
 * Usage:
 *   node scripts/setup-vercel-env.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';
import readline from 'readline';

// Get current file directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Function to prompt for user input
function prompt(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// Function to run a command and return its output
function runCommand(command) {
  try {
    return execSync(command, { encoding: 'utf8', cwd: projectRoot }).trim();
  } catch (error) {
    console.error(`Error running command: ${command}`);
    console.error(error.message);
    return null;
  }
}

// Main function
async function main() {
  console.log('Setting up Vercel environment variables...');

  // Check if Vercel CLI is installed
  try {
    const vercelVersion = runCommand('npx vercel --version');
    console.log(`Vercel CLI detected: ${vercelVersion}`);
  } catch (error) {
    console.error('Vercel CLI not found. Installing...');
    runCommand('npm install -g vercel');
  }

  // Check if user is logged in to Vercel
  try {
    const whoami = runCommand('npx vercel whoami');
    console.log(`Logged in to Vercel as: ${whoami}`);
  } catch (error) {
    console.log('Not logged in to Vercel. Please login:');
    runCommand('npx vercel login');
  }

  // List of environment variables to set
  const envVars = [
    'DATABASE_URL',
    'NEXTAUTH_SECRET',
    'NEXTAUTH_URL',
    'SENTRY_DSN',
    'SENTRY_ORG',
    'SENTRY_PROJECT',
    'SENTRY_AUTH_TOKEN',
    'GOOGLE_CLOUD_VISION_API_KEY',
    'MAPBOX_ACCESS_TOKEN',
    'STRIPE_SECRET_KEY',
    'STRIPE_WEBHOOK_SECRET',
    'STRIPE_PUBLISHABLE_KEY'
  ];

  // Create .env file for Vercel
  const envFilePath = path.join(projectRoot, '.env.vercel');
  let envFileContent = '# Environment variables for Vercel deployment\n# Generated by setup-vercel-env.js\n\n';

  // Prompt for environment variables
  console.log('\nPlease enter values for the following environment variables:');
  for (const envVar of envVars) {
    const value = await prompt(`Enter value for ${envVar} (leave empty to skip): `);
    if (value) {
      envFileContent += `${envVar}=${value}\n`;
      console.log(`✅ ${envVar} set`);
    } else {
      console.log(`⚠️ Skipping ${envVar}`);
    }
  }

  // Write .env file
  fs.writeFileSync(envFilePath, envFileContent);
  console.log(`\nEnvironment variables written to ${envFilePath}`);

  // Link the project to Vercel if not already linked
  if (!fs.existsSync(path.join(projectRoot, '.vercel'))) {
    console.log('Linking project to Vercel...');
    runCommand('npx vercel link');
  }

  // Import environment variables to Vercel
  console.log('Importing environment variables to Vercel...');
  runCommand(`npx vercel env import ${envFilePath}`);

  // Deploy to Vercel
  const deployNow = await prompt('\nDo you want to deploy to Vercel now? (y/n): ');
  if (deployNow.toLowerCase() === 'y') {
    console.log('Deploying to Vercel...');
    runCommand('npx vercel --prod');
  } else {
    console.log('\nYou can deploy to Vercel later with the following command:');
    console.log('  npx vercel --prod');
  }

  console.log('\nVercel environment setup completed successfully!');
  rl.close();
}

// Run the main function
main().catch(error => {
  console.error('Error:', error);
  process.exit(1);
}); 