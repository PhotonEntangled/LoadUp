name: API CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/api/**'
      - 'packages/**'
      - '.github/workflows/api.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/api/**'
      - 'packages/**'
  workflow_dispatch:

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for Sentry release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint API
        run: cd apps/api && npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Set up test database
        run: |
          cd apps/api
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Verify database connection
        run: |
          cd apps/api
          node -e "
            const { Pool } = require('pg');
            const pool = new Pool({
              connectionString: 'postgresql://postgres:postgres@localhost:5432/test_db'
            });
            pool.query('SELECT NOW()', (err, res) => {
              if (err) {
                console.error('Database connection error:', err);
                process.exit(1);
              }
              console.log('Database connected successfully');
              pool.end();
            });
          "

      - name: Run API tests
        run: cd apps/api && npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          JWT_SECRET: test_secret
          NODE_ENV: test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for Sentry release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Set default environment variables
        run: |
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN || '' }}" >> $GITHUB_ENV
          # These environment variables will only be used if Sentry is configured
          if [ -n "${{ secrets.SENTRY_DSN }}" ]; then
            echo "SENTRY_ORG=${{ secrets.SENTRY_ORG }}" >> $GITHUB_ENV
            echo "SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}" >> $GITHUB_ENV
            echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV
          fi

      - name: Create Sentry release
        if: env.SENTRY_DSN != ''
        run: |
          npm install @sentry/cli
          VERSION=$(node -e "console.log(require('./apps/api/package.json').version)")
          RELEASE="${{ github.repository }}-api@$VERSION"
          echo "SENTRY_RELEASE=$RELEASE" >> $GITHUB_ENV
          npx sentry-cli releases new "$RELEASE"
          npx sentry-cli releases set-commits "$RELEASE" --auto
          
      - name: Build API
        run: cd apps/api && npm run build
        env:
          NODE_ENV: production
          SENTRY_RELEASE: ${{ env.SENTRY_RELEASE || '' }}

      - name: Finalize Sentry release
        if: env.SENTRY_DSN != ''
        run: |
          npx sentry-cli releases finalize "$SENTRY_RELEASE"

      - name: Upload API build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: apps/api/dist
          retention-days: 7

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api/dist

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        run: |
          cd apps/api
          railway up --service api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Create Sentry deploy
        if: env.SENTRY_DSN != ''
        run: |
          VERSION=$(node -e "console.log(require('./apps/api/package.json').version)")
          RELEASE="${{ github.repository }}-api@$VERSION"
          npx sentry-cli releases deploys "$RELEASE" new -e "production"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api/dist

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway (Staging)
        run: |
          cd apps/api
          railway up --service api-staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Create Sentry deploy
        if: env.SENTRY_DSN != ''
        run: |
          VERSION=$(node -e "console.log(require('./apps/api/package.json').version)")
          RELEASE="${{ github.repository }}-api@$VERSION"
          npx sentry-cli releases deploys "$RELEASE" new -e "staging" 