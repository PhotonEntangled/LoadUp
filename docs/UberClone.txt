# tactiq.io free youtube transcript
# Build a Full Stack React Native App with Payments | PostgreSQL, TypeScript, Stripe, Tailwind
# https://www.youtube.com/watch/kmy_YNhl0mw

00:00:00.040 do you want to create feature full Stack
00:00:02.720 mobile applications that push the
00:00:04.359 boundaries of what's possible leave a
00:00:06.560 lasting impression and set you aart if
00:00:08.960 so you're in the right place hi there
00:00:11.320 and welcome to a highly anticipated
00:00:13.240 course where you'll build a full stack
00:00:15.759 Uber clone and no this won't be your
00:00:18.520 average app showing a map on a screen
00:00:20.880 I'm talking about a 15 screen
00:00:23.000 state-of-the-art application that uses
00:00:25.080 expo's latest features such as Expo
00:00:27.560 router API routes Expo location
00:00:30.519 Lightning Fast EDG ready postgress
00:00:32.880 database Global State Management with
00:00:35.079 zest stand and many others after taking
00:00:37.680 this course you can build any mobile app
00:00:39.719 you can imagine why because I didn't cut
00:00:42.160 any Corners when making it I decided to
00:00:44.120 include screens that appear on all of
00:00:46.280 the most popular apps in the world
00:00:48.280 you'll learn how to make splash screens
00:00:50.160 and onboarding flows add authentication
00:00:52.760 access device sensors integrate Maps
00:00:55.239 build custom tabs navigation models
00:00:57.879 bottom sheets success screens and even
00:01:00.160 integrate payments using stripe there
00:01:02.280 are also some Uber specific features
00:01:04.159 you'll Implement such as live Google
00:01:06.119 location with Google maps showing nearby
00:01:08.240 rides search relocations using Google
00:01:10.840 Places choose a destination driver and
00:01:13.799 book a ride get directions and estimated
00:01:16.479 time see all booked rides and your
00:01:19.080 profile details alongside this video in
00:01:21.479 the description below I've also prepared
00:01:23.600 the ultimate react native guide that
00:01:25.560 covers everything you need to know to
00:01:27.200 become a fantastic developer the guide
00:01:29.920 covers the complete react native road
00:01:31.560 map prerequisites and essential react
00:01:34.200 native Concepts and project ideas you
00:01:36.320 can build and deploy to get a job you
00:01:38.600 can download the guide and use it as a
00:01:40.280 reference whenever you're unsure what to
00:01:42.159 do next of course the guide is
00:01:44.159 completely free and once again the link
00:01:46.280 is in the description alongside that in
00:01:48.640 this video I'll teach you react native
00:01:50.799 fundamentals Expo router for file-based
00:01:53.159 navigation zustand for Global State
00:01:55.799 Management native wind for styling Expo
00:01:58.799 API routes stripe payments data fetching
00:02:01.479 with custom hooks reusable Advanced
00:02:03.759 components with best practices
00:02:05.600 typescript for writing types safe code
00:02:07.880 es length and preder for organizing the
00:02:09.878 code authentication with email
00:02:12.160 verification using Clerk and even
00:02:14.480 postgress using neon a serverless fully
00:02:17.200 managed postgress database that
00:02:18.920 automatically scales resources and lets
00:02:21.000 you write native SQL queries it is so
00:02:24.080 good that even versell uses it behind
00:02:26.239 the scenes for their versell postgress
00:02:28.120 service now with even better teaching
00:02:30.400 methods you'll get an open source
00:02:32.000 codebase a custom figma design and a
00:02:34.480 Discord server with a dedicated Uber
00:02:36.599 channel to resolve bugs if you get stuck
00:02:39.159 all those things are free so grab those
00:02:41.239 from the links below while I continue
00:02:42.959 telling you more about the project a
00:02:45.440 basic to medium understanding of react
00:02:47.440 native is needed so if you're not quite
00:02:49.840 there yet check out the react native
00:02:51.519 crash course and come right back and
00:02:53.720 we're also working on the ultimate react
00:02:55.480 native course to learn more about it
00:02:57.400 check out the first page in the guide
00:02:59.080 that I mentioned before in this course
00:03:01.040 though I'll also teach you how to set up
00:03:03.040 an IDE you didn't know you needed
00:03:05.360 webstorm is a professional JavaScript
00:03:07.480 and typescript IDE that will make you so
00:03:09.680 efficient you'll wonder what you were
00:03:11.480 doing all this time Jed brains reached
00:03:13.480 out to sponsor this video and initially
00:03:15.879 I was skeptical about switching from the
00:03:17.720 code editor I've been so used to so I
00:03:20.000 used it for over 3 months to test it for
00:03:21.840 myself and oh boy is it powerful I can't
00:03:25.000 wait to share everything it can do I'll
00:03:26.879 do it later on while we're developing
00:03:28.480 the application but just to say it
00:03:30.200 quickly it has smart terminal with auto
00:03:32.400 suggestions typescript type suggestions
00:03:34.879 code completion automatic bug fixes
00:03:37.400 oneclick refactoring speed search and an
00:03:40.319 integrated git and GitHub system and
00:03:42.200 here's the best part clicking the link
00:03:43.560 in the description will give you a free
00:03:45.760 90-day access plus if you're a student
00:03:48.360 it'll remain free download it while I
00:03:50.200 continue telling you more about the app
00:03:51.840 will build today when you first launch
00:03:53.920 the app a custom splash screen will
00:03:55.959 appear for a few seconds you'll then go
00:03:58.200 through a smooth onboarding process
00:03:59.799 process highlighting the app's main
00:04:01.720 features after that you'll see a sign up
00:04:04.480 off screen where you can create a new
00:04:06.239 account or log in if we go to create a
00:04:08.879 new account it'll ask you for your email
00:04:11.079 and password but this time I decided to
00:04:13.519 teach you how to implement email
00:04:15.000 verification too after you enter your
00:04:17.040 details the app will request a code sent
00:04:19.600 to your email hold on okay here it is if
00:04:23.360 you try to enter anything else of course
00:04:25.400 it won't work enter the right code and
00:04:27.880 voila your account is successfully
00:04:29.840 verified you can also choose to
00:04:31.320 authenticate using Google which works
00:04:33.080 smoothly and logs you in within seconds
00:04:35.800 now we are redirected to the homepage
00:04:37.880 you'll first notice a popup asking for
00:04:39.919 location access once you grant
00:04:41.639 permission your location will
00:04:43.280 immediately appear on the map you'll
00:04:45.160 also see the nearby drivers if you click
00:04:47.240 on them their names will be displayed
00:04:49.560 below is a list of all rides I've booked
00:04:51.759 so far and at the top a Google
00:04:53.800 autocomplete search bar will suggest
00:04:55.680 locations as you type pretty cool right
00:04:57.840 once we select a location we're taking
00:04:59.720 to the ride finding screen where you can
00:05:01.720 enter your destination and see the
00:05:03.360 location on the map through this smooth
00:05:05.360 bottom sheet which we can expand or
00:05:07.520 collaps you can also change your
00:05:09.479 location and choose where you want to
00:05:11.000 start by selecting places in
00:05:12.960 autocompletion next we move to choose a
00:05:15.680 writer screen where you can pick your
00:05:17.440 preferred writer at a fair price then
00:05:19.759 you'll be directed to the confirmation
00:05:21.360 screen where you can review the details
00:05:23.039 one last time before giving any money
00:05:25.840 thanks to stripe we can select from
00:05:27.720 various payment methods I'll enter some
00:05:29.840 dummy details hit pay and watch it go
00:05:32.440 through successfully you'll see this
00:05:33.919 cool model with a smooth animation popup
00:05:36.440 specifying that the booking is
00:05:37.759 successful we click back home to return
00:05:40.039 to the home screen to see the new ride
00:05:41.759 we just booked you can also see the
00:05:43.319 complete list of rides in the history
00:05:44.919 screen plus there's also a well-designed
00:05:47.479 profile screen with all of your details
00:05:49.960 it is fully responsive and provides
00:05:52.080 consistent results across all types of
00:05:54.280 devices it is such a large feature
00:05:57.080 application isn't it and you'll learn
00:05:58.840 how to build it to today so what are you
00:06:01.280 waiting for let's Dive Right In before
00:06:04.400 we begin developing our app I want to
00:06:06.479 show you how you can set up a new IDE
00:06:09.080 that I tried and loved so much that I
00:06:11.720 decided to use it to replace my vs code
00:06:14.599 I know making a switch is not easy but
00:06:17.199 just try it and you won't be
00:06:19.240 disappointed Jed brain's tools are
00:06:21.560 trusted by Google Tesla Visa Shopify
00:06:25.000 City Bank and even NASA so they'll suit
00:06:28.240 us just fine the link in the description
00:06:30.440 will give you a free 90-day webstorm
00:06:33.039 license so you have nothing to lose open
00:06:35.520 it fill in your information click redeem
00:06:38.319 and follow the instructions in the email
00:06:40.599 once you click the link you got in your
00:06:42.000 email you'll be redirected to your
00:06:43.720 account dashboard and just click
00:06:45.720 download then select your operating
00:06:48.039 system and click download keep in mind
00:06:50.720 this is a full IDE and not just a code
00:06:53.199 editor so it's going to take some time
00:06:55.080 to download let's leave it B and I'll be
00:06:57.680 right back and if you're not ready to
00:06:59.759 choose webstorm yet that's totally okay
00:07:02.319 you can still follow along with the
00:07:03.840 entire video without any problems I just
00:07:06.599 want to say that I've been trying it on
00:07:08.319 our internal projects for the last
00:07:10.199 couple of months and found it to be the
00:07:12.479 perfect IDE for web and mobile
00:07:15.440 applications I'm still discovering new
00:07:17.479 features as I go but I'm already so
00:07:19.680 impressed that I won't be going back to
00:07:21.360 vs code anytime soon once you install it
00:07:23.960 it's going to ask you whether you want
00:07:25.199 to import your settings from vs code so
00:07:27.560 you can do that or start completely from
00:07:29.280 SC scratch in this case I will import
00:07:31.560 the settings you can choose the theme
00:07:33.639 the key maps plugins and even the recent
00:07:35.919 projects this was super quick and now we
00:07:39.120 can create a new project it can be just
00:07:41.240 an empty project which we can create on
00:07:43.280 our
00:07:44.479 desktop under SL Uber dclone and click
00:07:50.680 create once you're in there it'll look
00:07:53.000 something like this but of course we can
00:07:54.960 fully customize it and what's the one
00:07:57.159 thing that developers first change when
00:07:59.120 they download a new IDE it's got to be
00:08:02.039 the theme so press control or command
00:08:05.319 shift p and it'll open up this search
00:08:08.560 context where you can search for theme
00:08:11.520 press enter and then select one of the
00:08:13.520 predefined themes but of course you can
00:08:15.879 press get more themes and very easily
00:08:18.599 install any theme you want in this case
00:08:21.240 I'll proceed with one dark theme and
00:08:23.919 press
00:08:24.759 accept and immediately it got applied
00:08:28.159 another thing I'll do just so you can
00:08:29.520 follow along more easily is increase the
00:08:31.759 font size so I'll use the command shift
00:08:34.559 p to go to settings select font and I
00:08:39.120 will increase it to about 18 and enable
00:08:43.159 ligatures this should allow you to see
00:08:45.680 much better what I'm working on I think
00:08:48.000 this is more than enough to get us going
00:08:50.160 as we develop the application we can
00:08:51.920 continue customizing the IDE to make it
00:08:54.120 more your own and I'll be pointing out
00:08:56.440 to all the cool details that webstorm
00:08:58.560 does for us so with that said let's get
00:09:00.959 started with a project setup to develop
00:09:03.320 our mobile application of course we'll
00:09:05.399 be using react native a platform that
00:09:08.440 allows us to learn a technology such as
00:09:10.760 react once and then write code anywhere
00:09:14.360 be that Android iOS or web so as we
00:09:17.720 click get started we'll be redirected to
00:09:20.120 the getting started guide and I want to
00:09:22.320 point your attention to
00:09:23.800 something they say right here that you
00:09:26.399 can use react native without a framework
00:09:29.120 however they've found that most
00:09:31.000 developers benefit from using a react
00:09:33.160 framework like Expo providing you with
00:09:35.760 features such as file based routing
00:09:37.920 highquality Universal libraries and the
00:09:40.200 ability to write plugins that modify
00:09:42.279 native code without having to manage
00:09:44.360 native files so we'll use the
00:09:46.640 recommended approach and we'll start a
00:09:48.519 new react native project with Expo we
00:09:51.839 can do that by quickly navigating over
00:09:53.680 to their page and going to the docs to
00:09:56.279 get started with it there's only one
00:09:58.160 command we need to run MPX create xfo
00:10:00.920 app at latest so if we copy it and go
00:10:04.079 back to our code editor you can open up
00:10:06.120 the terminal by holding the control and
00:10:08.279 then the key left of the one key on your
00:10:10.240 keyboard and yeah terminal is a whole
00:10:12.720 other beast in webstorm as we write
00:10:15.000 commands I'll point out some cool
00:10:16.600 features that it has so right here we
00:10:19.480 can run MPX create Expo app at latest
00:10:22.440 and then add the dot slash at the end to
00:10:24.880 create it in the current Uber clone
00:10:26.880 repository let's press enter and and
00:10:29.600 press y to install the following
00:10:31.720 packages let's give it a moment until it
00:10:33.760 does its thing and while the packages
00:10:35.920 are getting installed let's set up the
00:10:37.800 database which we'll use to make our
00:10:39.680 entire Uber application possible we need
00:10:42.079 to have a place to store user accounts
00:10:44.440 the writers the drivers and the rides
00:10:47.200 themselves so click the neon link down
00:10:49.440 in the description to be able to follow
00:10:51.320 along and see exactly what I'm seeing
00:10:54.040 next click get started and sign up I'll
00:10:57.360 continue with Google for this project
00:10:59.480 we're not using any thirdparty libraries
00:11:02.079 for our database management you'll be
00:11:04.240 working with a native postgress database
00:11:06.760 and will write real SQL queries here you
00:11:10.160 can enter your project name started with
00:11:12.399 JSM uncore and then you can enter your
00:11:14.720 project name you can do ride or Uber or
00:11:17.399 whatever you prefer and same thing for
00:11:19.760 the database name I'll do JSM ride you
00:11:22.880 can choose the region that is closest to
00:11:24.600 you and click create project and there
00:11:27.720 we go we are redirected to this
00:11:29.760 beautiful dashboard which will put to
00:11:31.800 full use soon enough there we go it took
00:11:34.680 some time but it finally worked your
00:11:36.920 project is ready and now we can either
00:11:39.160 run Android iOS or web before we do that
00:11:42.360 you can press these three dots here and
00:11:44.320 enable the new terminal which is in
00:11:46.839 better right now and soon you'll see
00:11:48.800 some of the new functionalities that it
00:11:50.600 brings to the table for now let's just
00:11:53.040 type mpm start and press enter you will
00:11:56.279 see some warnings right here but that's
00:11:58.399 not a big deal because below that you
00:12:01.000 will see a QR code that you can scan
00:12:03.839 with your phone and this QR code is very
00:12:06.880 important for the whole Expo react
00:12:09.480 native environment if you don't want to
00:12:11.519 use it there's some different
00:12:13.040 alternative options that we can use such
00:12:15.040 as pressing a to open up Android Studio
00:12:17.720 or the letter i to open up the iOS
00:12:20.320 simulator but for all of these things
00:12:22.839 you have to have heavy software we all
00:12:26.160 know those stories where you open up
00:12:27.800 Android studio and your device starts
00:12:30.199 heating up and explodes and for the iOS
00:12:33.279 it doesn't explode but you have to have
00:12:35.320 very expensive devices what Expo allows
00:12:38.279 us to do is to use the Expo go
00:12:40.680 application to run our application on
00:12:43.040 our phone in real time and see exactly
00:12:46.279 what we're developing and we can even
00:12:48.560 play with it and touch the app in real
00:12:50.519 time that is super cool so let's go back
00:12:53.880 to this QR code and if you're an iOS
00:12:56.560 you'll have to scan it with your camera
00:12:58.600 and before to scan it you'll have to go
00:13:00.399 to your app store or Google Play store
00:13:02.920 and just download the Expo go
00:13:05.440 Application it should look something
00:13:06.959 like this on your phone so I think this
00:13:08.519 is the perfect time that I brought my
00:13:10.320 phone preview on the right side of the
00:13:12.120 screen so at all times while watching
00:13:14.480 this video you'll be able to see exactly
00:13:17.120 what I'm seeing on my phone screen so
00:13:19.760 once you download it simply click open
00:13:22.560 and you'll also have to create your Expo
00:13:25.079 account by logging in if you're an
00:13:27.320 Android you can open up the Expo Go app
00:13:29.839 and scan the code from there and if
00:13:31.839 you're an iOS you can scan it directly
00:13:34.120 from your native camera app and on both
00:13:36.600 systems make sure that you're connected
00:13:38.600 to the same Wi-Fi network where you're
00:13:41.160 running the code so both the phone and
00:13:43.480 the device have to be on the same
00:13:44.920 network and on iOS you'll also have to
00:13:47.720 go to your phone settings expoo app and
00:13:50.680 turn on the local network and also turn
00:13:53.800 the VPN status off to not connect it
00:13:57.199 this is necessary for Expo to connect
00:13:59.600 properly then open up your phone camera
00:14:02.720 point it at your QR code and click open
00:14:05.399 in expoo but it seems like there's an
00:14:08.199 error here it says too many open files
00:14:11.240 error node Watcher broke and then it
00:14:14.440 exited so we of course cannot test our
00:14:16.480 application if we're no longer running
00:14:18.480 the Expo server since it points to the
00:14:20.880 node Watcher instance I think our node
00:14:23.600 version might have something to do with
00:14:25.279 this so let's just go to the node.js
00:14:27.519 website and click download node.js
00:14:30.639 LTS this is the long-term support
00:14:33.399 version once it gets downloaded simply
00:14:35.720 follow the steps to install it to check
00:14:38.199 whether our newly installed version of
00:14:39.959 node applied we can type node DV and
00:14:43.839 unfortunately it's still using a newer
00:14:46.199 experimental node version for me and for
00:14:48.160 you it might be something else but maybe
00:14:50.240 not the one that we just installed for
00:14:52.279 that reason we can use a package called
00:14:54.639 NVM that is a version manager for
00:14:57.240 node.js there's a handy the GitHub repo
00:15:00.040 that allows us to install it and update
00:15:02.079 it with one script command you can use
00:15:04.800 Curl on Mac OS or W get on windows so
00:15:09.320 let's copy the command for your own
00:15:10.959 operating system and paste it in the
00:15:13.120 terminal it'll quickly install NVM and
00:15:15.920 you need to close and reopen your
00:15:17.360 terminal so let's close this one and
00:15:19.560 reopen it to verify the installation you
00:15:21.920 can run
00:15:23.560 command-v MVM which should output MVM if
00:15:27.120 the installation was successful and now
00:15:29.040 you can install a specific version of
00:15:30.600 node I believe the active version at the
00:15:32.959 time of the recording of this video is
00:15:35.040 version 2016 so we can say NVM install
00:15:39.759 206 0 and press enter there we go and
00:15:43.920 now we can type node DV to check your
00:15:46.040 current node version now let's rerun mpm
00:15:49.959 start to see whether now node Watcher
00:15:53.079 will properly watch over our Expo
00:15:55.399 application I'll scan the code one more
00:15:57.600 time with my device
00:16:00.000 and open in Expo go it seems like the
00:16:02.319 application is building you can see that
00:16:04.880 right here iOS has been bundled and we
00:16:07.800 can see the welcome screen success so
00:16:10.720 now we know that we might want to use
00:16:12.160 these stable versions of node when
00:16:13.959 running your Expo applications great but
00:16:16.800 with that said I mean just just look at
00:16:18.759 this we have successfully set up a react
00:16:20.639 native application and right now I have
00:16:23.639 my phone in my hand and I can swipe
00:16:26.120 around move through different screens
00:16:28.560 and even open up some toggles that tell
00:16:30.519 me a bit more about the Expos
00:16:32.839 functionalities we already have a
00:16:35.040 working Expo application but of course
00:16:37.480 today you will turn what you see on the
00:16:39.720 screen right now and what you're holding
00:16:41.680 in your hand into what I believe is one
00:16:44.480 of the most popular mobile apps of all
00:16:47.600 time Uber so let's continue with doing
00:16:51.160 just that and since this will be a
00:16:53.920 pretty big application you know that
00:16:55.880 every big app needs to have a proper
00:16:58.480 setup
00:16:59.399 we need to ensure that the app is
00:17:01.319 scalable and the code is readable so for
00:17:04.400 that reason let's go ahead and set up a
00:17:06.480 couple of things that will make our
00:17:08.039 development experience so much better
00:17:10.520 first we'll install native wind native
00:17:13.439 wind is a react native version of
00:17:15.799 Tailwind CSS that allows us to very
00:17:18.559 quickly write Styles within our mobile
00:17:21.359 applications so let's just head over to
00:17:23.599 the Expo quick start and install native
00:17:26.640 Wind by running mpm install native wind
00:17:29.160 and then installing Tailwind CSS as well
00:17:32.080 we can copy this command go back to
00:17:34.160 webstorm and run this command now we can
00:17:37.080 see that our terminal is currently
00:17:38.640 running the expoo application so we can
00:17:41.080 just open up a new one right here and
00:17:44.039 paste these commands we can quickly head
00:17:46.520 over to our package.json I used a
00:17:49.840 command P shortcut to quickly open up my
00:17:53.000 file manager and we can scroll down to
00:17:55.080 dependencies and search for Tailwind CSS
00:17:57.760 as a Dev dependency as well as a native
00:18:00.400 wind installed right here as a regular
00:18:03.520 dependency next we need to set up
00:18:05.280 Tailwind CSS by running MPX tailin CSS
00:18:08.360 in nit so let's open up the terminal and
00:18:10.919 paste this command here by the way I
00:18:12.919 want to point your attention to how
00:18:14.880 webstorm terminal dynamically separates
00:18:18.120 each command from each other so you know
00:18:20.360 exactly what you're working on here we
00:18:22.360 have the one that we just ran and Below
00:18:24.520 we can run a new one there we go this
00:18:27.120 just created a new file and it's asking
00:18:29.440 us whether we want to automatically add
00:18:31.000 it to G sure we can add it and now we
00:18:35.000 can check out our new tailwind config.js
00:18:38.039 and we can copy this code from the
00:18:40.120 Native width installation and paste it
00:18:42.600 right here but of course we'll have to
00:18:44.400 modify it to make sure the content is
00:18:47.080 all right there we go step three is to
00:18:50.159 add the native wind Babble plugin under
00:18:52.919 Babel config JS so let's navigate over
00:18:55.520 to Babel config JS one more time I am
00:18:58.840 using the command or control P to open
00:19:01.480 up the file explorer which is the
00:19:03.360 quickest way to move over the files but
00:19:05.600 of course you can just open up the
00:19:06.919 project by pressing the command shift
00:19:09.520 and e or clicking right here and then
00:19:12.480 finding the babble config now I will add
00:19:15.159 the plugins native wind
00:19:18.080 Babble and that's it we can start
00:19:20.280 writing code before we test it out we
00:19:22.919 need to do one more thing and that is
00:19:24.679 make typescript work with our native
00:19:27.159 wind so the only thing we have to do do
00:19:29.039 is create a new native wind- env. D.S
00:19:33.640 file in the root of our directory so we
00:19:36.679 can do that right here by creating a new
00:19:39.600 file and pasting this
00:19:41.799 name and then we can add this reference
00:19:44.559 right within it and now typescript will
00:19:46.440 know exactly what we're doing with the
00:19:48.280 styles to test it out we can copy this
00:19:50.919 view right here from the example code
00:19:53.400 and go to our app tabs and then index.
00:19:56.760 TSX as you can see here right now it
00:19:59.360 says welcome and all of this other text
00:20:01.840 we don't necessarily need that we just
00:20:04.000 need one single view to start
00:20:06.440 understanding how we can modify the code
00:20:08.400 that has been provided to us so I'll
00:20:10.799 just use one single view by the way a
00:20:13.320 view in react native is similar to a div
00:20:17.200 in web development so let's import this
00:20:19.760 view from react native at the top by
00:20:21.960 saying import
00:20:24.520 view as well as a text and a status bar
00:20:28.400 for from react native and we don't need
00:20:31.159 any of the other Imports we can also
00:20:33.200 remove all the other styles that we had
00:20:35.440 in there now to test whether it works we
00:20:38.360 have to position our text to appear in
00:20:40.280 the middle of the screen and in react
00:20:43.039 native we do that with something called
00:20:45.200 a safe area View and there's an
00:20:47.960 additional package that we can install
00:20:49.840 that provides that component right out
00:20:51.640 of the box so we can run mpm
00:20:55.080 install
00:20:56.840 react-native DS safe - area- context and
00:21:01.559 press
00:21:02.520 enter as soon as it installs and it'll
00:21:05.159 do so quickly because it's a very small
00:21:07.039 package we can now import something
00:21:09.200 known as a safe area view coming from
00:21:13.559 react safe area context and instead of
00:21:16.840 using the regular view we can wrap her
00:21:19.039 app with a safe area view now you can
00:21:22.159 see that the text fits nicely at the top
00:21:24.279 of the screen now even though the text
00:21:26.159 is in view the styles are still not
00:21:28.600 getting applied and we can see that
00:21:30.480 because the text should be centered but
00:21:32.440 it's still appearing at the top so we
00:21:34.840 can go over our Tailwind that config.js
00:21:37.360 and we can quickly modify the content we
00:21:40.080 need to tell it where what will be
00:21:41.799 writing styles so that it starts
00:21:44.120 understanding them so instead of a
00:21:46.080 capital A for app we can say
00:21:49.120 slapp slash asterisk asterisk meaning
00:21:52.760 everything in those folders within the
00:21:54.400 app SL asterisk do and then we have
00:21:58.000 those files extensions and here instead
00:22:00.559 of a custom directory we have to modify
00:22:02.919 this to
00:22:04.480 say/
00:22:07.080 components SL asterisk asterisk SL
00:22:10.720 asterisk and now if we go back you'll
00:22:13.400 see that the text is centered we can
00:22:15.600 also give it a class name equal to
00:22:18.559 something like text- r-500 to see that
00:22:22.120 it changes color now it is highly likely
00:22:25.159 that this will not be working for you
00:22:27.279 immediately there's just just one a bit
00:22:29.240 of an annoying thing that we sometimes
00:22:31.200 have to do with Expo applications
00:22:33.480 whenever we make any big changes such as
00:22:36.080 install native wind or any other major
00:22:38.840 packages and that is clear the cach okay
00:22:42.880 remember this clear cash if something
00:22:45.799 doesn't work so for you what you can do
00:22:49.000 is stop the serve from running clear it
00:22:51.919 and then run MPX
00:22:54.799 Expo
00:22:56.320 start- C this run it with a cleared
00:23:00.159 cache so if you rerun the project you
00:23:02.559 can see it right here it says bundler
00:23:05.240 cache is empty rebuilding and then you
00:23:07.960 can press R while in terminal to reload
00:23:10.960 your application after you do this I'm
00:23:13.880 pretty positive that it should work and
00:23:16.480 there we go our text is in the middle
00:23:19.200 and we can say something like uber clone
00:23:22.640 we're getting ready to start building it
00:23:24.919 now Uber is a big application and as
00:23:27.480 I've told you already when you're
00:23:29.120 starting to develop big applications
00:23:31.039 there is a bit of a setup work that you
00:23:32.960 have to do to make sure that the rest of
00:23:35.039 the building process flows smoothly and
00:23:38.320 one of the things that is very important
00:23:39.840 to set up in big projects is a linter in
00:23:43.440 our case we'll use expo's recommended es
00:23:46.200 length and preder configuration so let's
00:23:48.919 just follow the steps we can run MPX
00:23:51.720 Expo lint I'll do it in our second
00:23:54.200 terminal not to disturb our application
00:23:56.360 it's going to ask us a couple of
00:23:57.559 questions such as says do you want to
00:23:59.000 install eslint in this project and I'm
00:24:01.000 going to say why for yes let's give it
00:24:03.279 some time and I'll be right back there
00:24:05.559 we go eslint has been configured we also
00:24:08.559 need to install prettier so let's scroll
00:24:11.200 down and I think somewhere here we can
00:24:12.880 see the installation command so let's
00:24:15.320 copy it and paste it in the terminal
00:24:18.960 that was simple and now we have to
00:24:20.640 update our eslint RC file with the
00:24:23.200 following code so let's head over to
00:24:26.200 eslint rc. Js and paste this code right
00:24:30.320 in now eslint and prier will be watching
00:24:33.960 over our changes and make sure that we
00:24:35.880 write quality code in webstorm there's
00:24:38.240 one additional thing that we have to do
00:24:39.880 to properly set up eslint so press
00:24:42.480 command shift b or control shift B and
00:24:45.919 type eslint open up its preferences and
00:24:49.840 head over to manual es lint
00:24:51.600 configuration click on this Arrow right
00:24:54.039 here and then choose the es lint for our
00:24:56.799 specific Uber project and select run es
00:24:59.760 lint fix on Save click apply and also
00:25:03.600 head to tools actions on Save and make
00:25:06.559 sure that it is turned on we can repeat
00:25:09.039 the same thing with prier by going to
00:25:11.039 settings manual preder configuration and
00:25:13.880 then choosing our own config right here
00:25:16.159 and run on Save apply and okay that's it
00:25:20.720 you can see how immediately pretty a
00:25:22.840 changes our configuration to be easier
00:25:25.039 on the eyes and it works so seamlessly
00:25:27.919 with storm and if you're using some
00:25:29.720 other code editor here's the settings
00:25:31.760 that Json file which you can put in
00:25:33.399 there to also make it work there the
00:25:35.440 code available to copy is in the GitHub
00:25:37.520 readme linked below and now that we have
00:25:39.640 linting set up let's customize webstorm
00:25:42.200 even further to make it truly our own
00:25:45.320 I'm going to press command shift b or
00:25:47.399 control shift B on Windows and I'll go
00:25:50.039 ahead and change the theme you can
00:25:51.760 scroll down and go to get more themes
00:25:54.279 and many of you have been asking me what
00:25:56.440 theme do I use and now I can finally
00:25:59.240 tell you it's going to be a cat pin
00:26:02.919 theme you can type it like this and you
00:26:05.480 can just go to search in the marketplace
00:26:07.679 it's spelled with a double p and Double
00:26:09.600 C you can install it and once you do you
00:26:12.640 can go to theme and change it to kuchin
00:26:16.399 and then choose the flavor you prefer
00:26:18.320 macchiato or
00:26:20.440 mocha once you have that I'm going to
00:26:22.919 also do another thing and that is change
00:26:24.919 the font family so you can search for
00:26:27.520 font
00:26:28.880 go to preferences and then go to General
00:26:31.840 editor settings font and here I chose F
00:26:35.559 code this is the font that I've been
00:26:37.000 using for a long time you can also
00:26:39.320 choose that one and you can install it
00:26:41.399 by simply downloading the font to your
00:26:43.559 device another thing I want to focus on
00:26:45.919 is to turn on something called Soft wrap
00:26:49.720 so go to configure soft wraps make sure
00:26:52.520 to add the asterisk.svg
00:26:58.240 so that it wraps for those files and
00:27:00.559 turn off the used the original line
00:27:02.720 indent for wrap fragments that's going
00:27:05.480 to allow us to WRA specific files it
00:27:08.720 should look something like this so that
00:27:10.760 once the text goes beyond the line you
00:27:13.000 can still see it on the screen right
00:27:14.520 here to make it easier for you to follow
00:27:16.480 what I'm doing and another thing we can
00:27:18.200 do is install a material theme for our
00:27:21.960 icons and folders to make them look just
00:27:24.120 a bit better so once again command shift
00:27:26.640 p search for
00:27:29.679 plugins go to Marketplace and search for
00:27:32.960 icons you can choose the atom material
00:27:35.480 icons or anything else that you prefer
00:27:38.000 in this case I'll go with adom click
00:27:40.559 install apply and okay and we do need to
00:27:44.320 restart our IDE for the changes to be
00:27:46.240 applied once you're restarted you can
00:27:48.399 notice that now all of the folders have
00:27:50.559 their corresponding icons which makes it
00:27:53.159 look so much better also you can see
00:27:55.519 that the colors change for some of the
00:27:57.080 icons on the side for now what I want to
00:27:59.399 do is clean up this environment a bit so
00:28:02.399 we can just hide some of the things
00:28:04.480 right here that we don't need to create
00:28:06.279 a bit more space for us we can customize
00:28:08.720 the toolbar remove the part from the
00:28:10.919 center and also remove some of the parts
00:28:13.000 from the right as we don't necessarily
00:28:14.679 need to play with a toolbar play with a
00:28:17.120 code with me we don't need anything on
00:28:19.279 the right so I will remove that as well
00:28:21.600 and this will clean it up just a bit you
00:28:23.480 can do the same thing for the things at
00:28:24.799 the bottom that you don't necessarily
00:28:26.320 need and there we go I went went ahead
00:28:28.799 and I hided some of the things from the
00:28:30.880 screen now we have a cleaner working
00:28:33.000 environment with that said we can now
00:28:35.039 proceed with cleaning up our file and
00:28:37.240 folder structure now that we can see it
00:28:39.120 a bit clearer when we initially set up
00:28:41.240 our react native export application it
00:28:43.799 came with a lot of different things the
00:28:46.600 file and folder structure already set up
00:28:48.919 two different pages there's a lot of
00:28:50.960 stuff that we don't necessarily need and
00:28:53.240 that will just complicate your
00:28:55.039 understanding of our react native
00:28:56.559 application so I want to make sure to
00:28:58.480 take a second to delete all of the
00:29:00.240 things that we don't need to focus on
00:29:02.840 creating everything from
00:29:05.200 scratch right now our application is not
00:29:07.960 running and maybe for the better that's
00:29:10.600 because we are going to do a whole
00:29:12.039 cleanup and then we're going to run it
00:29:13.760 together later on so first things first
00:29:16.200 let's delete the things that we don't
00:29:17.600 need I'll begin with deleting the tabs
00:29:20.679 route Group by simply clicking delete or
00:29:23.640 pressing the backspace key and pressing
00:29:26.000 delete next I'll delete the hooks folder
00:29:28.440 as we don't need it I'll also delete the
00:29:30.640 constants folder and the components
00:29:32.919 folder as well as the assets folder so
00:29:35.679 we're going to clean our entire
00:29:37.600 application up we only have our HTML
00:29:40.240 index DSX and you might be wondering
00:29:42.399 what is this HTML file well Expo allows
00:29:45.760 you to run your applications in the
00:29:47.440 browser as well but that's not what we
00:29:49.279 need to be concerned with at this point
00:29:50.919 in time there's also a 404 page that can
00:29:54.600 show up if we are on a not found screen
00:29:57.760 but again not something that is super
00:29:59.440 important right now what we do want to
00:30:01.840 focus on instead is the layout. TSX file
00:30:06.000 we want to update it a bit to suit our
00:30:08.279 very minimalistic app right now that
00:30:10.039 doesn't have any additional files inside
00:30:12.600 of here you'll notice we have a theme
00:30:14.640 provider for now I will go ahead and
00:30:16.799 delete it and the only thing we'll have
00:30:18.799 is the stack a stack of different
00:30:21.840 screens the name of her first screen
00:30:24.399 will be just index it's her home and
00:30:27.200 under options will run Heather shown as
00:30:29.840 false we also have a screen for the not
00:30:33.039 found and this is the only thing we want
00:30:34.679 to have for now just an empty screen
00:30:37.480 next we can create that index screen
00:30:40.279 right here in the root of our directory
00:30:42.600 so let's go to app and let's create a
00:30:45.039 new file called index. TSX within it we
00:30:49.120 can create a new homepage by saying
00:30:51.480 const home is equal to and we're going
00:30:54.159 to create a new Arrow function component
00:30:57.039 and let's not forget to to export
00:30:59.000 default that home component at the
00:31:01.200 bottom within it we can return something
00:31:04.559 within it we can import a view which is
00:31:07.360 going to come from react
00:31:10.360 native and we can show a text also
00:31:14.120 coming from react native and it can say
00:31:17.320 something like home for now you can
00:31:19.480 notice that webstorm sometimes adds
00:31:21.399 these additional inlay hints that allow
00:31:24.240 us to see where we're using specific
00:31:26.559 instances of our code
00:31:28.559 um they're going to be super useful
00:31:30.559 later on when they tell you more
00:31:32.200 information about different parameters
00:31:34.000 within the functions but in this case I
00:31:36.279 don't need them to show the usages I can
00:31:38.639 hide code Vision usages in line hence
00:31:41.200 not all and this is just going to
00:31:42.799 provide us with a bit of a cleaner
00:31:44.480 working environment now is the time that
00:31:47.000 we reopen our terminal and rerun mpm
00:31:51.320 start just to see if our application
00:31:53.760 still works after making all of those
00:31:55.840 changes we can press R to reload our
00:31:59.559 application and you'll see that we have
00:32:01.519 an issue in our not found. TSX which
00:32:04.760 makes sense because we change so many
00:32:06.840 things I pressed command P or control P
00:32:09.720 to open up the file search and if I
00:32:12.159 start typing you can very quickly just
00:32:14.360 press enter and navigate to that
00:32:16.399 different file here you can see that we
00:32:18.880 used two different components which we
00:32:21.039 no longer have so we can just remove
00:32:23.279 their Imports and we can also just
00:32:26.039 instead of a themed view just say view
00:32:28.799 coming from react native and instead of
00:32:31.360 theme text we can just say text coming
00:32:33.679 from react native as
00:32:36.000 well there we go if we save it we should
00:32:39.600 have no more issues with the code but
00:32:43.039 our app still doesn't seem to be there
00:32:45.240 well that's because this view doesn't
00:32:47.000 have any Styles and most likely the text
00:32:49.360 is being pushed above our application so
00:32:52.159 we can use a safe area
00:32:55.120 view coming from react native or in this
00:32:58.679 case we have a special package react
00:33:00.679 native safe area context as well but
00:33:03.600 it's still not showing so if I open up
00:33:06.039 my terminal we can see that the iOS
00:33:07.840 bundling failed and it's still
00:33:09.840 complaining about the components themed
00:33:11.480 text even though we deleted it from the
00:33:13.480 not found screen so what we can do is
00:33:16.159 press R once again to reload our
00:33:18.240 application once
00:33:19.919 more now it's complaining about hooks
00:33:22.559 use color scheme from App layout so we
00:33:25.519 can go within it we can remove
00:33:27.240 everything that we're no longer using
00:33:28.639 just to simplify it alongside the used
00:33:31.320 color context and we can also remove
00:33:33.799 this color scheme from here and if we
00:33:36.080 scroll down we can see that the stack
00:33:38.440 screen is okay and we're not using
00:33:40.240 anything regarding what we just deleted
00:33:42.760 so I think we're good now I'll just
00:33:44.760 reload one more time and now it's
00:33:47.000 complaining about a splash screen okay
00:33:50.320 in the app that config.js because we
00:33:52.799 removed our assets this is completely
00:33:54.960 normal we removed a lot of code so we
00:33:56.799 have to make sure that it all
00:33:58.960 works so in this case I'll provide you
00:34:02.039 with the full assets for this entire
00:34:04.159 project in the description down below
00:34:06.440 you can find an Uber repository with the
00:34:09.480 entire codebase for this project but
00:34:12.199 what's even more important is that right
00:34:14.159 there you can find the entire readme for
00:34:17.159 this project and one of the things in
00:34:19.280 the readme are the Snippets and the
00:34:21.800 Assets in this case you can download the
00:34:24.560 assets for this project this includes
00:34:26.679 the illustrations the the icons and all
00:34:29.199 the little images that we'll be showing
00:34:30.719 on the app to make the development of
00:34:32.560 our app easier so let's click here and
00:34:36.040 you can just press the download button
00:34:38.159 once you download them simply unzip them
00:34:40.560 and then drag and drop them to the
00:34:42.000 folder where you have your app for us
00:34:44.639 it's on desktop and it's within the Uber
00:34:46.960 clone so now if we go here you can see
00:34:49.520 the full assets of our application
00:34:51.440 webstorm also ask me whether I want to
00:34:53.280 add it to G so we can say sure and here
00:34:56.719 we have all of the IM
00:34:58.320 so that means that now we can go to the
00:35:00.640 app. Json and we can modify some
00:35:04.040 important information about our app for
00:35:06.000 example we can choose the name as Uber
00:35:09.640 with a capital u and a slug of uber here
00:35:13.119 it's taking the icon directly from the
00:35:15.240 assets images icon.png and it's taking a
00:35:18.960 splash screen directly from our assets
00:35:21.480 as well we can leave the rest as it is
00:35:24.200 now if we try to reload our application
00:35:26.520 once more you you can see that a new
00:35:28.760 splash screen that says ride appears
00:35:31.240 right here so if we reload it once more
00:35:33.480 you can see how nice it looks like a
00:35:35.480 splash screen on mobile devices is a
00:35:37.400 screen that appears before your
00:35:39.079 application loads it gives the user
00:35:41.119 something to look at while it's loading
00:35:43.880 now we have issues with the fonts
00:35:45.440 because we won't be using the regular
00:35:47.240 space mono font rather we'll be using a
00:35:50.599 different one we'll be using plus
00:35:52.720 Jakarta Sans so we can head over to our
00:35:56.440 app and then head over over to layout.
00:35:58.640 TSX to modify the fonts we're
00:36:01.400 using these fonts just need to be copied
00:36:04.160 and you can find them under the Snippets
00:36:06.160 in this GitHub repo you can find root
00:36:08.760 layout fonts copy this block of code go
00:36:12.240 back here and then simply paste them
00:36:14.680 I'll Zoom this out a bit so you can see
00:36:16.280 it better make sure that it is formatted
00:36:19.200 well I believe it already should be for
00:36:21.119 you if you still see some issues in your
00:36:23.960 terminal you might want to press contrl
00:36:26.319 C to exit and then you can run mpm start
00:36:29.800 once again and then it should build it
00:36:31.760 properly after pressing the r key on
00:36:34.079 your keyboard you can see the splash
00:36:35.920 screen while it's loading and then after
00:36:37.880 that you can just see the home and that
00:36:40.400 home is exactly what we have crafted in
00:36:42.680 our index. TSX so this is perfect now we
00:36:47.200 have a structure that we're starting to
00:36:50.280 understand we have an app where we have
00:36:52.319 a not found found page we have a layout
00:36:54.440 and an index and we have also learned
00:36:57.040 how to add a splash screen to our react
00:36:59.680 application through app. Json it is as
00:37:03.440 simple as pointing to an image that you
00:37:05.680 want to show so let me show you it's
00:37:07.560 assets images Splash if we go to assets
00:37:10.920 images and then splash this image is
00:37:14.280 right here perfect with that in mind we
00:37:17.599 are ready to set up the styling for our
00:37:19.800 application that we'll use throughout
00:37:21.960 this project we can start by navigating
00:37:24.560 over to Tailwind doc config.js
00:37:28.000 in that same GitHub repo you can find
00:37:30.079 the modified Tailwind config JS that
00:37:32.760 extends all of these fonts and ensures
00:37:35.119 we can very easily use them so just
00:37:37.599 override the existing tailin config
00:37:40.560 you'll notice that here we also import
00:37:43.319 some of the different variants of colors
00:37:45.800 such as primary secondary success danger
00:37:48.800 and warning so that we can use them
00:37:50.960 within our application nothing more
00:37:53.200 nothing less so what do you say with all
00:37:55.960 of that setup out of the way our you're
00:37:57.720 ready to start creating the onboarding
00:37:59.560 screens of our application finally some
00:38:02.079 real code right we already have this
00:38:04.520 splash screen and now we're starting
00:38:06.280 with the first out of three onboarding
00:38:08.240 screens and I would highly recommend
00:38:10.119 that you replicate this figma design as
00:38:12.160 well the link is going to be down in the
00:38:13.880 description you can easily get it and
00:38:16.040 that way at every point in time you will
00:38:18.040 know exactly what we're building so get
00:38:21.040 that figma design and let's start by
00:38:22.960 creating our first onboarding screen
00:38:25.839 within the app folder we'll create a new
00:38:28.560 route Group by creating a new directory
00:38:32.160 and I'll call it rout within parentheses
00:38:36.000 like this within the root we'll create a
00:38:39.359 new underscore layout yes each route
00:38:43.240 group will have its own layout depending
00:38:45.520 on what is it showing on the screen
00:38:48.040 because our onboarding screens won't
00:38:49.920 have the Bottom bar which means that we
00:38:51.800 have to have a separate layout from the
00:38:53.839 rest of the screens then within the root
00:38:56.480 we can create another another directory
00:38:58.920 which will be called tabs so these are
00:39:01.520 the tabs that we can switch between and
00:39:03.880 here we're going to have some of the
00:39:05.319 primary pages of our application it'll
00:39:08.359 also have its own uncore layout. DSX and
00:39:12.800 it'll have a few other files such as the
00:39:15.359 homepage the profile and more so what do
00:39:18.119 you say that we create them right away
00:39:19.960 by creating like a home. TSX file and
00:39:23.880 within it we can just create a simple
00:39:26.640 react a function component const home is
00:39:30.800 equal to basically an aror function
00:39:33.160 component that returns a view with a
00:39:35.160 text we already have that right it is
00:39:37.400 currently within the primary index. TSX
00:39:40.640 so let's copy it and paste it into home
00:39:43.560 we can now copy this and create a few
00:39:45.839 other files as well within the tabs
00:39:48.319 folder it'll be a new profile. TSX where
00:39:52.839 we can paste everything we have here and
00:39:55.240 rename home to profile we can do the
00:39:58.040 same thing for chat.
00:40:01.520 TSX and rename it to chat and we can do
00:40:05.440 the same thing for history so this is
00:40:07.520 going to be a history of a r that we
00:40:10.760 have history. DSX we can paste it and
00:40:15.440 call it history I think we can rename it
00:40:18.240 to something like rides it would make a
00:40:20.520 bit more sense so let's just do rides.
00:40:24.520 TSX and there we go it automatically
00:40:28.359 renamed it here as well perfect so now
00:40:31.560 we can start seeing how our application
00:40:33.440 will look like and it's very important
00:40:35.880 to mention here that what you're seeing
00:40:37.839 right now is Expo router it is a file
00:40:41.480 based router for react native
00:40:43.359 applications allowing you to manage the
00:40:45.599 navigation between the screens in your
00:40:47.359 application so you can move seamlessly
00:40:49.720 between different parts of your apps UI
00:40:52.119 using the same components on multiple
00:40:53.920 platforms what I love about it is that
00:40:56.359 it's using the same file based routing
00:40:58.440 concept from web specifically nextjs so
00:41:02.480 if you've done some nextjs apps it's
00:41:04.160 going to feel like home so how exactly
00:41:06.680 does it work well Expo router uses links
00:41:09.720 to move between pages in the app it's
00:41:12.079 similar to an anchor tag or href
00:41:14.040 attribute or you have an app you have an
00:41:16.240 index page about page and you can have
00:41:18.119 subpages or even Dynamic pages and then
00:41:21.119 you can use links to move to different
00:41:23.160 pages or use buttons we can also use the
00:41:26.200 navigate functionality which behaves
00:41:28.160 similarly to modifying the URL in the
00:41:30.400 browser and the primary way of
00:41:32.240 navigating in Expo applications is the
00:41:34.599 stack Navigator it is like a navigation
00:41:37.440 bar in the browser you first need to
00:41:39.720 create a file-based routing structure
00:41:42.640 like with an app a layout and then some
00:41:44.839 additional routes and then in the layout
00:41:47.440 you can create something known as a
00:41:49.359 stack a stack of screens each screen can
00:41:53.359 decide to show or hide the header Styles
00:41:56.319 can have different colors and more and
00:41:58.359 then you can configure how do you get to
00:42:00.599 each one of these screens by giving them
00:42:03.040 a name so let's create a stack of our
00:42:05.640 own we use the stack to modify how a
00:42:08.720 specific route behaves so if we go right
00:42:11.400 here to our root layout you can see that
00:42:13.359 we have this index route which is our
00:42:15.599 homepage and there we have added an
00:42:18.000 option of header shown to false if we
00:42:20.839 remove that option you'll be able to see
00:42:22.640 the name of the route which typically
00:42:24.599 you don't want to show so that's the
00:42:27.200 reason why we have to add all of these
00:42:28.920 stack screens only so we can add options
00:42:31.839 header shown is set to false and we're
00:42:34.800 going to repeat this process for all the
00:42:36.839 other routes and Route groups so we're
00:42:39.599 going to do the same for the root so
00:42:42.119 that's the root route group Heather
00:42:44.119 shown false and we're going to do the
00:42:46.079 same for o this is a second group of
00:42:49.200 routes which will'll show so let's go
00:42:51.599 here and next to root which is going to
00:42:54.280 be the primary part of our application
00:42:56.079 where we're going to have all the routes
00:42:57.920 we're going to have something that
00:42:58.960 happens before we enter the main
00:43:01.559 application which is the onboarding and
00:43:03.920 the off so let's create a new directory
00:43:06.720 called off in parenthesis there we can
00:43:09.520 also create a newor layout. TSX and
00:43:13.680 within it we can duplicate the main
00:43:15.960 layout we have right now but we'll
00:43:18.160 remove some of the things regarding the
00:43:19.720 fonts we're loading the fonts once we
00:43:22.319 don't need to load them anymore so it's
00:43:24.280 going to be much much simpler it's going
00:43:26.559 to look something like this import stack
00:43:29.640 from Expo router then we can declare a
00:43:32.359 layout and a simpler way to do it is
00:43:34.640 const
00:43:36.319 layout is equal to an arrow
00:43:39.280 function and then we can just export
00:43:41.440 default it at the bottom by saying
00:43:43.440 export default
00:43:45.520 layout and here we have different stacks
00:43:47.920 of screens for that route group so no
00:43:50.640 longer do we have to have the index or
00:43:52.599 the root or the KN found rather we're
00:43:55.319 just going to have the welcome which is
00:43:57.160 going to be the primary screen and then
00:43:59.640 we're going to have sign up and finally
00:44:02.480 we're going to have the sign in and we
00:44:04.599 want to hide the headers in all
00:44:06.880 places so that means that we have to
00:44:08.920 create these additional off Pages such
00:44:11.960 as welcome sign in and sign up let's
00:44:15.400 create all three I'll create a new file
00:44:18.599 called
00:44:19.960 sign-in. TSX and within it we can paste
00:44:23.240 just the basic component which we
00:44:24.880 created in our index. TSX so that's just
00:44:27.640 going to be a basic view safe area view
00:44:31.240 with a text that's going to say sign in
00:44:34.920 we can duplicate that once more by
00:44:36.920 creating a second file in the oth group
00:44:40.319 which is going to be called sign Dash
00:44:43.040 up. DSX and we can rename that to sign
00:44:47.880 up we can also rename the actual
00:44:50.160 component name sign up single word and
00:44:54.960 we can do the same thing for the sign in
00:44:56.640 since I forgot to do it there sign in
00:45:00.640 and finally we need to create one last
00:45:03.359 off page which is going to be the first
00:45:05.319 one we'll start to work on and that is
00:45:07.280 the welcome onboarding so welcome. TSX
00:45:10.880 where we can paste it and say
00:45:14.040 onboarding great so now the question is
00:45:17.240 how can we navigate to this page right
00:45:19.559 here right now our app is saying home
00:45:22.599 because we have this index. TSX that is
00:45:25.040 rendering the home well in here will do
00:45:27.800 a simple redirect in case we're logged
00:45:30.359 in so the return will do only one thing
00:45:33.760 and that's going to be call to a
00:45:36.119 redirect
00:45:37.720 component coming from Expo router with
00:45:40.640 an hre of forward slash route group of O
00:45:45.319 SL welcome now as soon as somebody opens
00:45:48.000 up the application we'll be redirected
00:45:50.280 to oops the screen doesn't exist okay we
00:45:53.559 know that at least the 404 is working as
00:45:57.319 well let me do a Reload by pressing R
00:45:59.880 right here and you can see that now it
00:46:01.760 worked sometimes while developing react
00:46:03.960 native applications you'll have to
00:46:06.160 reload your application often and now we
00:46:08.720 are on the onboarding screen we also
00:46:11.000 have a warning right here at the bottom
00:46:12.960 but you can just collapse it to close it
00:46:14.800 right now we can close all of the
00:46:16.599 currently open files and just head over
00:46:19.400 to our welcome screen which is really an
00:46:22.119 onboarding and the pages for the
00:46:24.160 onboarding are going to look like this
00:46:26.160 it's going to be a three page or
00:46:28.800 three-step onboarding process where
00:46:31.160 we'll have some nice illustration a
00:46:33.319 title description tabs that move as we
00:46:36.599 move to the second screen and then the
00:46:38.800 button that says next so let's get
00:46:41.160 started with creating our first real
00:46:43.640 piece of user interface in a large react
00:46:46.599 native application there's one small
00:46:48.720 thing that I can see here and that is
00:46:50.280 that we have one week warning pointed
00:46:52.280 out by our webstorm in this case this is
00:46:54.920 not a real warning because if you think
00:46:57.000 about it it says unused default export
00:47:00.040 but we're actually using a file based
00:47:02.160 routing system so we never actually have
00:47:04.520 to import the onboarding it is just
00:47:06.880 being used by default once we go to that
00:47:09.240 page so to hide this error you can press
00:47:12.599 command or control shift B and type
00:47:15.640 inspections and then search for unused
00:47:18.280 Global symbol and tick it off click okay
00:47:21.960 and then close and reopen your webstorm
00:47:24.119 if you do that you can run mpm start one
00:47:26.319 more time
00:47:27.359 and the error will be gone great another
00:47:30.280 thing you can do to clean up your
00:47:31.480 workspace is go to toolbar and then
00:47:34.160 toggle it off um I don't think I need
00:47:36.960 all that info at the top and this just
00:47:38.720 makes it so much easier for you to
00:47:40.200 follow along and with that in mind we
00:47:42.319 can now dive right into the onboarding
00:47:45.119 I'll press R to bundle our app one more
00:47:47.480 time so press this warning and we can
00:47:50.079 get started everything is already
00:47:52.240 wrapped in a safe area view coming from
00:47:54.680 react native safe area context which is
00:47:57.200 why we can see the onboarding text right
00:47:59.280 within our screen next we can give our
00:48:01.960 safier view some class names such as a
00:48:04.839 class name is equal to flex h- full to
00:48:08.960 give it a full height items D Center
00:48:11.960 justifi Das between and BG - white so
00:48:16.440 now this will Center the text
00:48:17.720 horizontally next instead of this text
00:48:20.280 right within the safe area view we'll
00:48:22.359 create our first touchable opacity and
00:48:26.240 we'll UT Ed from react native in the
00:48:29.280 react native or mobile World a touchable
00:48:32.119 opacity is basically just a button you
00:48:35.720 know how on web you have a button here
00:48:38.119 on mobile you have a touchable opacity
00:48:41.240 within which we will render a text
00:48:43.599 coming from react native and this text
00:48:46.440 will say something like skip so in case
00:48:48.920 we want to skip this on boarding we can
00:48:51.400 do that what's going to happen if we
00:48:53.440 decide to skip it well instead of
00:48:55.400 onclick here we have an onpress activity
00:48:59.440 and on press we can call a callback
00:49:02.200 function and say something like router.
00:49:05.839 replace and we want to go over to for SL
00:49:10.079 off SL
00:49:12.760 sign-up just like this and this router
00:49:16.040 will be coming from Expo router so we
00:49:18.160 can say import router coming from Expo
00:49:22.559 router great now we can also give a
00:49:26.160 class name to this touchable opacity and
00:49:28.760 that's going to be a w full so full
00:49:31.359 width Flex justify Dash and items Dash
00:49:36.200 end in the padding of five so we show it
00:49:40.040 a little button at the top right we can
00:49:42.680 also style this text element by giving
00:49:45.400 it a class name which is equal to let's
00:49:49.000 do um text- Black text- MD for medium
00:49:54.400 and font D Jakarta bold so this is one
00:49:57.960 of the fonts that we imported it didn't
00:50:00.000 seem to apply the Bold style so I think
00:50:02.240 we should use the capital J there we go
00:50:04.880 Jakarta bold this now works great now
00:50:08.559 let's go below this touchable opacity
00:50:10.680 and let's create a component that allows
00:50:12.599 us to swipe left and right like we're in
00:50:15.440 Tinder but we're not swiping different
00:50:17.440 dates we're swiping the onboarding cards
00:50:21.119 almost as exciting right so for that
00:50:23.799 we'll install a new component in the new
00:50:27.040 terminal mpm install
00:50:29.440 react-native D
00:50:31.559 swiper and we can use it right below the
00:50:34.160 touchable opacity by saying swiper and
00:50:37.640 we can import it at the top by saying
00:50:39.880 import swiper coming from
00:50:43.440 react-native D swiper currently this
00:50:46.319 will break our application because
00:50:47.920 swiper expects to have some things
00:50:49.799 within it so let's add it first of all
00:50:53.400 we have to create a new reference to
00:50:55.680 this swiper so so that we can control it
00:50:58.200 we can do that by saying con swiper ref
00:51:01.440 is equal to use ref of a type swiper and
00:51:06.599 at the start it can be set to null next
00:51:09.520 we can just say ref is equal to swiper
00:51:12.640 ref on this swiper we can also give it a
00:51:16.040 couple of other properties such as a
00:51:18.760 loop in this case we don't want to Loop
00:51:21.440 over the swiper we just want it to come
00:51:23.240 to the end after the three so we'll set
00:51:25.559 the loop property to false it also
00:51:28.240 allows us to change how the dots look
00:51:30.520 like uh so the dot for the first swipe
00:51:33.319 second and the third so we can say dot
00:51:35.680 is equal to a view which remember is a
00:51:39.160 div in a mobile world and we can make it
00:51:41.920 self closing and give it a class name
00:51:46.240 equal to w-32 pixels within square
00:51:49.559 brackets h-4 pixels margin X of one and
00:51:55.160 BG of a very light variant of a white
00:51:59.119 color so that's going to be E2 E8 F0 and
00:52:03.920 we of course have to import the view
00:52:06.200 from react native and we also have to
00:52:08.799 import use ref inside of square brackets
00:52:12.319 from react now this is a very cool thing
00:52:15.240 about webstorm as soon as we imported
00:52:17.200 this use ref we no longer have to hover
00:52:19.559 over it to see what it does you can see
00:52:22.119 that it understood that this n that we
00:52:24.280 passed is a property that that specifies
00:52:27.400 the initial value similar thing here it
00:52:30.119 recognized that the first prop or the
00:52:32.240 first parameter to this function that
00:52:33.880 we're passing is corresponding to an hre
00:52:37.040 property so now as you're typing you can
00:52:39.160 immediately know what you need to pass
00:52:41.000 in it sure you could hover over it and
00:52:43.359 see what it is but it is so convenient
00:52:45.720 to just start typing something and then
00:52:48.240 immediately know that that's
00:52:49.359 corresponding to an hre in that specific
00:52:52.359 method great so now we created this
00:52:54.599 swiper and explained how a do should
00:52:56.960 look like we can also duplicate this Dot
00:52:59.880 and change it to an active dot so
00:53:03.119 depending on which screen we're
00:53:04.520 currently on and here we're going to
00:53:06.319 change the BG color to something like
00:53:11.720 028 6 FF and we're going to make it
00:53:15.400 rounded by saying rounded Das full as a
00:53:18.640 matter of fact we can do that for the
00:53:20.200 dot regular dot as well great and
00:53:23.640 somehow we have to keep track of the
00:53:25.839 indexes that we're switching from and to
00:53:28.760 so we can create a new use State call it
00:53:32.119 active index set active index at the
00:53:35.880 start set to zero and then we can handle
00:53:38.760 that with the on index changed property
00:53:41.599 which will accept a callback function
00:53:43.400 with the new index and we can simply set
00:53:45.680 active index to be equal to the index
00:53:48.040 that we have right here finally we can
00:53:50.200 show something within that swiper and
00:53:52.760 sure what you could do is create an
00:53:54.839 array of things right here that's going
00:53:56.760 to have different objects where each
00:53:59.000 object will have something like a title
00:54:02.200 it'll have an image and description and
00:54:04.920 if you did this quickly your jsx file or
00:54:08.240 in this case TSX would grew and then you
00:54:10.680 would have to map over them but
00:54:12.799 typically you don't want to combine the
00:54:15.240 presentation which is the jsx or the TSX
00:54:17.760 in this case with the data so the data
00:54:20.799 of what we will be showing so for that
00:54:23.760 reason it's always good to separate some
00:54:25.720 of these pieces
00:54:26.960 in specialized files in this case I'll
00:54:29.960 create a new directory or folder called
00:54:33.920 constants and within it I'll create a
00:54:36.319 new file called
00:54:39.000 index.ts here we can create a new
00:54:41.480 onboarding array which will contain
00:54:44.280 three different objects for three
00:54:46.319 different screens that we have each one
00:54:48.680 will have an ID it'll also have a title
00:54:51.880 something like the perfect ride is just
00:54:55.680 a tab
00:54:57.040 away and we can also have a
00:55:00.400 description something like the
00:55:03.520 Journey Begins With
00:55:08.079 ride and we need an image to show so for
00:55:11.319 now I'll leave image to null and now we
00:55:13.760 can do the same thing for all of the
00:55:15.040 other onboarding fields and of course
00:55:17.000 let's just export this as well by saying
00:55:19.160 export con onboarding now within here we
00:55:22.079 can use this onboarding coming from the
00:55:24.079 index. DSX file and map over it by
00:55:27.440 saying map where we get each individual
00:55:30.319 item and for each one of those items we
00:55:32.880 want to render a new view for now let's
00:55:36.039 simply show the item. title and it's
00:55:39.319 pretty cool how it immediately knows how
00:55:41.440 these properties look like so we can
00:55:44.119 just say this and it's not showing on
00:55:46.920 the screen right now and that's because
00:55:49.559 we cannot just showed a text inside of a
00:55:51.640 view in react native in react native you
00:55:54.680 have to wrap it in a text prop prop y so
00:55:56.960 let's import text from react native and
00:55:59.520 also close it up with a text property if
00:56:02.760 we save this you can see the perfect
00:56:04.520 ride is just a tap away and soon enough
00:56:07.400 we'll be able to swipe that left and
00:56:09.079 right to move to the next screen and if
00:56:11.839 you accidentally go to sign up you can
00:56:13.680 just press R to reload and rebundle the
00:56:16.400 application great now alongside this we
00:56:19.559 want to show an image from figma and
00:56:21.760 sure you could go here and download it
00:56:24.200 but thankfully we already have it in the
00:56:26.079 app assets so the only thing you have to
00:56:27.760 do here in the constants is refer to
00:56:31.359 images. onboarding one but of course we
00:56:34.640 have to have the path to that image so
00:56:37.799 we'll have to do something like import
00:56:40.640 onboarding
00:56:41.920 one from add SL assets SL images SL
00:56:48.640 onboarding
00:56:49.920 one.png and now we'll have this
00:56:51.839 onboarding one image that we can show
00:56:54.760 but we'll have to do this for import
00:56:56.240 recoring every single image every single
00:56:58.880 icon and everything else so for that
00:57:01.400 reason just to simplify the procedure a
00:57:03.160 bit more I have added the entire
00:57:05.760 constants index.ts where I'm simply
00:57:08.760 importing all of those images and then
00:57:11.240 exporting them where we need them that
00:57:13.520 way it's going to be much simpler to
00:57:15.400 just continue with development when our
00:57:17.680 data is nicely structured and we can
00:57:19.680 easily import it so copy this file and
00:57:22.520 then override the entire index.ts of
00:57:25.640 constants
00:57:27.039 you'll notice that here we have the
00:57:28.319 entire on boarding we have some icons
00:57:31.520 and we have all of these assets it's
00:57:33.720 currently saying that it cannot find the
00:57:35.280 type declarations for these things so we
00:57:37.520 have to add the type declarations for
00:57:39.880 these images just so that it recognizes
00:57:42.039 it so copy this first file and create a
00:57:46.160 new types type D.S that's going to be in
00:57:49.359 the root of the
00:57:50.880 directory new folder called
00:57:54.799 types and then within it we can create a
00:57:57.480 new file called type.
00:58:02.000 D.S and we need another one which is
00:58:04.760 type image. D.S where we can paste this
00:58:09.280 so create a new file image. D.S and
00:58:13.599 paste the Declarations for the images
00:58:16.280 now if we go back it's no longer
00:58:18.280 complaining great and now if you just
00:58:20.760 reload one more time you can still see
00:58:22.839 the perfect ride is just a type away but
00:58:25.240 now you can move move between different
00:58:27.520 onboarding profiles that is perfect and
00:58:31.280 of course if you want to you can
00:58:32.760 completely change the titles for each
00:58:34.720 one for now just the images are changing
00:58:37.640 which is great so let's show that image
00:58:40.960 so we can actually see the difference
00:58:42.680 and swipe between these three different
00:58:44.880 screens to this view I'll provide a
00:58:48.039 class name equal to flex items D Center
00:58:52.839 justify Das Center and the padding of
00:58:55.559 five
00:58:56.720 since we're mapping over it I'll also
00:58:58.280 give it a key equal to item. ID and
00:59:01.760 right within the view above the text
00:59:03.880 we'll render an image coming from react
00:59:07.119 native it'll be a self-closing component
00:59:10.240 with a source equal to item. image so
00:59:14.000 it's coming from constants a class name
00:59:17.119 equal to
00:59:18.240 w-o and
00:59:20.079 h-300 pixels and we'll also give it a
00:59:22.960 resize mode equal to contain so now you
00:59:27.119 can see how we have this nice looking
00:59:28.720 image and we can swipe between these
00:59:30.880 three images this is super cool because
00:59:33.520 swiping is not something you can do on
00:59:35.760 desktop devices but in Mobile It Feels
00:59:38.760 So natural to move it with your finger
00:59:41.640 right below this image we can render a
00:59:44.920 view once again it's like a div in react
00:59:48.440 this view can have a class name equal to
00:59:50.760 flex Flex D row items D Center justify
00:59:55.799 Das Center w- full and a margin top of
00:59:59.760 10 so we're just centering everything
01:00:02.559 within it we can render a text element
01:00:05.280 that'll have a class name equal to text-
01:00:08.599 Black text- 3 Excel to make it very
01:00:11.599 large font Das bold margin X of 10 and
01:00:16.520 text- Center within it we can simply
01:00:19.039 render the item. title the perfect ride
01:00:22.680 is just a step away we can go below this
01:00:24.960 View and below the text and create
01:00:27.680 another text this text will render the
01:00:30.640 description so we can immediately say
01:00:32.760 item. description and we can give it a
01:00:35.039 class name equal to text- MD font
01:00:40.079 djakarta semi bold text- Center
01:00:45.039 text-
01:00:46.799 hash
01:00:48.319 8585 85 margin X of 10 to divide it from
01:00:52.240 the left and right side and a margin top
01:00:54.400 of three to divide it from the
01:00:56.839 and there we go your perfect ride is
01:00:58.920 just one step away in this case we can
01:01:01.200 make this text- LG just so it's a bit
01:01:04.520 larger there we go and we can finally
01:01:07.680 create a custom button that should go
01:01:09.720 below here that says next sure we can
01:01:12.079 swipe but if the user is not used to the
01:01:14.039 swiper we can also have just a button so
01:01:17.240 let's create our first custom component
01:01:19.559 of the day we're going to create a new
01:01:21.920 components folder right here in the Uber
01:01:24.359 clone called component components and
01:01:27.440 I'll create a new file called custom
01:01:31.119 button. TSX here we can create a const
01:01:35.599 custom button which is going to be a
01:01:38.200 react Arrow function component and it'll
01:01:41.440 have an immediate return so we can just
01:01:43.760 wrap it in parentheses and at the bottom
01:01:46.440 we can export default the custom button
01:01:50.039 so this custom button will of course
01:01:52.400 return the touchable opacity because the
01:01:55.920 touchable opacity is a button in react
01:01:58.440 native every touchable opacity needs to
01:02:00.760 have an on press functionality and in
01:02:03.400 this case since it's a custom button
01:02:05.720 what this button will be doing will be
01:02:07.640 coming through props so we can simply
01:02:10.160 pass the onpress from props and then
01:02:13.079 call it right here it'll also have many
01:02:15.240 other things in the props so let's
01:02:16.799 destructure them we'll have a dynamic
01:02:19.240 title we have a BG variant which by
01:02:22.000 default can be set to primary we'll also
01:02:24.760 have a text variant
01:02:26.400 of the button which by default can be
01:02:28.440 set to default we're going to have an
01:02:31.200 icon left with a capital I and then icon
01:02:34.359 right if we need to provide it to the
01:02:36.079 button we're also going to have some
01:02:38.200 custom class names and finally we can
01:02:40.839 spread all the other props in case we
01:02:42.839 need to share it with the button and you
01:02:44.839 can see how convenient this is right now
01:02:47.359 that prer and Es length automatically
01:02:49.480 reformed my application so we can better
01:02:51.960 see what's happening within this
01:02:53.400 touchable opacity I'll say if there is
01:02:55.880 is an icon left then we can render that
01:02:59.760 icon left component just like so I'll
01:03:03.359 repeat that at the bottom and say if
01:03:05.480 there is an icon right we'll render the
01:03:08.839 icon
01:03:09.720 right and make sure to say left right
01:03:12.200 here in the middle will show the actual
01:03:15.200 text of the button so this is a text
01:03:17.319 coming from react native and it'll
01:03:20.359 render the title that we're passing as a
01:03:22.279 prop to this button now let's import
01:03:25.000 this custom button
01:03:26.400 at the bottom of the swiper we can do
01:03:28.400 that by declaring a custom button it'll
01:03:31.160 be a self-closing component and we need
01:03:33.279 to pass some of these props such as a
01:03:36.160 title and the title will say something
01:03:38.880 like next we want to go to the next
01:03:41.400 screen immediately you can see the next
01:03:43.799 key appear right below the swiper we can
01:03:46.480 also give it some class names such as w
01:03:50.319 11 out of 12 and margin top of 10 and
01:03:53.720 now we can dive into the button and
01:03:55.359 style it further by giving this
01:03:57.200 touchable opacity a class name which
01:03:59.960 will be a dynamic template string of
01:04:03.319 w-o rounded Das full Flex Flex D row
01:04:09.880 justify Das center items Das Center
01:04:14.359 Shadow
01:04:15.559 DMD Shadow D neutral d400
01:04:20.319 over7 and we can then dynamically call
01:04:23.920 get BG VAR
01:04:26.559 style and to it we can pass the BG
01:04:29.240 variant just like
01:04:31.480 so and finally we can render the class
01:04:34.559 name dynamically right here as well but
01:04:37.799 what is this get BG variant style well
01:04:40.599 it's a utility function which we can
01:04:42.319 create right here above by saying const
01:04:45.200 get BG variant style is equal to it
01:04:50.720 obviously accepts a variant which is of
01:04:53.559 a type button props which we can import
01:04:56.279 from types of a BG variant so it can
01:04:59.920 either be primary or secondary and we'll
01:05:03.079 open up a switch
01:05:05.240 statement where we'll look into the
01:05:07.400 variant of that button and depending on
01:05:10.039 the variant if the case is for example
01:05:13.920 secondary will apply a specific color
01:05:17.839 such as return BG gray 500 and now we
01:05:23.599 can cover it for all other cases so I'll
01:05:26.359 duplicate this a couple more times and
01:05:28.520 say if Case is danger then the color
01:05:31.839 will obviously be red 500 if it's
01:05:35.440 success then it'll be green
01:05:39.440 500 and if it is
01:05:43.480 outline then we'll make it transparent
01:05:46.480 by saying BG
01:05:48.960 transparent border Das neutral D300 and
01:05:53.440 Border Das 0.5 5
01:05:57.960 pixels and we can close it finally if
01:06:01.960 the case is the default case so we can
01:06:04.079 say default then I'll return a BG of
01:06:07.880 hash
01:06:09.440 0286 FF which is some kind of a basic
01:06:13.119 button color great so now we can see
01:06:15.160 that this button is taking a b variant
01:06:17.680 of primary in this case and I believe
01:06:20.359 that is the default color here in this
01:06:23.160 case it looks like it's complaining a
01:06:25.119 bit
01:06:26.160 it says that the BG variant needs to be
01:06:28.119 of one of these types and what are we
01:06:30.640 passing it's BG variant
01:06:33.079 primary and here we're not passing
01:06:35.279 anything as the BG variant so I do
01:06:38.240 believe that we should be good but it
01:06:40.599 thinks that it is just a string and we
01:06:42.799 know that it's always going to be of one
01:06:44.359 of these types so we can say here that a
01:06:48.200 BG variant will be of a type button
01:06:51.240 props coming from the types declaration
01:06:54.119 this way we're importing this
01:06:55.599 declaration where we say that the B
01:06:57.240 variant will always be of one of these
01:06:59.720 types great so now we can also style the
01:07:03.920 text by giving it a class name equal to
01:07:08.559 text- LG font Das bold and we'll also do
01:07:12.559 a very similar thing that we have done
01:07:14.039 with the backgrounds so I will make this
01:07:16.240 a template
01:07:18.279 string and instead of saying get BG
01:07:21.160 variant I'll say Dynamic get text
01:07:26.480 variant style and then to it I'll pass
01:07:29.559 the text variant so now we have to
01:07:32.000 declare this function right above and
01:07:34.279 I'll do it by duplicating the get BG
01:07:37.520 variant and I'll say get text variant
01:07:43.559 style and it's going to be of text
01:07:47.559 variant right here we have the primary
01:07:50.559 which will just make the text black so
01:07:52.960 we can say text- black
01:07:55.559 next we can move this outline a bit
01:07:58.680 above below the primary and we'll call
01:08:01.760 that a secondary and this one we'll
01:08:04.839 simply say
01:08:06.960 text-
01:08:09.240 gr-100 next we have danger which is
01:08:11.599 going to be a
01:08:13.720 text-
01:08:16.439 r-100 and finally success is going to be
01:08:19.279 a text of green 100 and the default will
01:08:23.000 be a text of white so now we have those
01:08:26.479 two helper functions that are going to
01:08:28.198 help us determine what kind of variant
01:08:30.799 Styles we want for our button and of
01:08:33.120 course all of this in order to make it
01:08:35.600 easier to add new buttons in the future
01:08:39.120 we did some heavy lifting to make this
01:08:40.679 button fully customizable but now the
01:08:43.080 next time that we use it it's going to
01:08:44.759 be super simple now let's make that
01:08:47.759 button do something first we have to
01:08:50.520 figure out if we're on the last slide or
01:08:53.158 not if we're not on the last slide we
01:08:55.839 simply want to move to the next screen
01:08:57.719 once we click it so right at the top
01:09:00.399 let's use the active index to figure out
01:09:02.759 on which screen we're on we can create a
01:09:05.520 new variable called is last slide and
01:09:08.759 say if active index is triple equal to
01:09:12.600 onboarding length minus one so if we're
01:09:15.560 on the last screen that must mean that
01:09:17.920 we're on the last slide depending on
01:09:20.799 that we can change some different things
01:09:23.000 such as we can change the title we we
01:09:25.479 can say if is last slide say get started
01:09:30.040 else say next similarly we can change
01:09:33.479 the onpress button action by creating a
01:09:36.600 new callback function and checking if is
01:09:40.120 last slide is true then call the router
01:09:45.198 replace and point
01:09:47.920 two forward SL off sign up just like
01:09:53.198 this else if it's not the last step then
01:09:56.840 use the swiper ref. current question
01:10:01.400 mark. scroll by one so this is how you
01:10:05.120 scroll to the next screen so you can
01:10:07.360 swipe but you can also click next and
01:10:10.199 now it will navigate to the next screen
01:10:12.520 and if you get to the last one it'll
01:10:14.560 actually move you over to the sign up so
01:10:17.679 now let's reload the screen to go
01:10:19.920 back finally let's see why this button
01:10:23.159 is so slim we need to make it have a bit
01:10:25.719 more height so let's navigate over to
01:10:27.960 the custom button and let's give it a
01:10:30.320 padding of three there we go that's
01:10:32.920 better and to this touchable opacity we
01:10:35.360 also want to spread all of the other
01:10:37.239 props so we can do do do dot props that
01:10:41.120 means that whatever we pass right here
01:10:43.640 as a class name or as anything else
01:10:46.480 we're immediately also transferring to
01:10:48.440 this touchable opacity in this case it
01:10:50.880 is a custom width and a margin top and
01:10:53.719 this is making it look so nice ni and it
01:10:56.120 makes it super
01:10:58.159 customizable with that in mind our
01:11:00.679 welcome screens are now complete we can
01:11:03.560 nicely scroll between them you know how
01:11:05.679 you can change the title in the
01:11:06.880 description if you want to you can
01:11:08.600 navigate over with the buttons you can
01:11:10.400 press the skip at the top right or you
01:11:12.920 can just come to the end of the
01:11:14.000 onboarding and press get started an
01:11:16.920 onboarding sequence is something that
01:11:19.280 every single mobile application has so
01:11:22.400 now you know how to do it too and moving
01:11:24.640 forward we'll focus on the sign up and
01:11:28.360 signin screens so let's do that next by
01:11:31.600 heading over to sign Dash up our signup
01:11:35.480 page will have a bit more height than
01:11:38.120 what some of the devices can fit on one
01:11:40.440 screen so instead of a safe area view
01:11:43.840 we'll render a scroll view coming from
01:11:47.280 react native so let's imported scroll
01:11:50.280 View and text coming from react native
01:11:53.920 to that scroll View we can give a class
01:11:56.639 name equal to flex D1 as well as a
01:11:59.719 background of white within it we can
01:12:02.560 render a regular view which we also need
01:12:05.600 to import from react native so let's do
01:12:09.080 just that and let's give it a class name
01:12:13.199 equal to flex D1 and BG White Once Again
01:12:18.080 within that view we'll render one more
01:12:20.239 view within which we'll render an image
01:12:23.520 so let's render that image image right
01:12:25.880 here and that image once again will come
01:12:28.600 from react native it'll have a source
01:12:32.719 equal to images which we can import from
01:12:36.639 constants do signup car with a class
01:12:41.400 name equal to Z of0 w- full for full
01:12:45.760 width and
01:12:47.880 h-250 pixels for the full height and
01:12:50.760 take a look at this nice image at the
01:12:52.600 top let's also style this view by giving
01:12:56.199 it a class name equal to
01:12:58.920 relative w-o and
01:13:02.280 h-250 pixels as well below the image we
01:13:05.920 can render a text and that text will say
01:13:10.520 create your
01:13:13.159 account and we can style it a bit by
01:13:15.600 giving it a class name of text- 2XL
01:13:19.880 text- black font D Jakarta semi bold and
01:13:26.520 absolute with a bottom five and left
01:13:29.960 five so now we're absolutely positioning
01:13:32.639 it just at the bottom of this image but
01:13:35.679 it's going a bit within it since we have
01:13:37.840 a white gradient appearing right here we
01:13:41.159 can go below this view that's below the
01:13:43.760 text and we can create another view
01:13:46.920 right here this view will have a class
01:13:50.199 name equal to padding of five and within
01:13:54.880 it we can render a custom component of
01:13:57.920 input field so similar to what we have
01:14:01.360 done before with a custom button we want
01:14:03.679 to create a new custom component called
01:14:07.120 input field. TSX we can declare this new
01:14:12.000 component input field which is going to
01:14:14.480 be just an immediate return function
01:14:18.000 where we'll return something very soon
01:14:20.600 and then we can do export default input
01:14:23.440 field now let's immediately import it
01:14:26.600 right here so import input field coming
01:14:30.120 from components input field and this
01:14:32.480 input field will be within a special
01:14:35.400 view a view called keyboard avoiding
01:14:39.360 view pretty interesting once you have
01:14:41.800 this view your keyboard will not be able
01:14:43.719 to go into it because if it did how
01:14:45.960 would you type into it okay so that's
01:14:49.040 why we have this keyboard avoiding View
01:14:51.719 and within it we can also have a
01:14:53.840 touchable
01:14:56.080 without feedback so this is similar to a
01:14:59.040 button but this time we don't really
01:15:01.000 want to make it seem like we're clicking
01:15:03.679 it and we can import this from react
01:15:06.520 native within it we can render a view
01:15:09.600 with a class name equal to margin y of 2
01:15:14.639 and W of full and within it we can
01:15:17.639 render a piece of text that'll have a
01:15:20.320 class name it'll be template string of
01:15:23.360 text- LG font Das Jakarta semi bold and
01:15:28.360 margin bottom of three and we can also
01:15:30.639 render the label style which will pass
01:15:33.480 through props as well as a label itself
01:15:37.080 so now we already know that in the props
01:15:39.679 we have to get some things like the
01:15:41.320 label we have to get the label style and
01:15:45.560 later on much more so now let's pass
01:15:50.120 those props while we're calling the
01:15:52.080 input field from the signup component we
01:15:55.400 can pass things such as a label equal to
01:15:58.440 name we can pass a placeholder equal to
01:16:01.760 enter name or enter your name we can
01:16:06.000 pass an icon equal to icons which we can
01:16:10.000 import from icons.
01:16:12.679 person a value will be equal to a form
01:16:16.159 value so right at the top of this file
01:16:18.840 we can declare a form for the signup by
01:16:21.800 saying use state is equal to form
01:16:25.560 set form at the start equal to an object
01:16:28.920 that has a name equal to an empty string
01:16:31.920 it has an email equal to an empty string
01:16:34.520 as well and it has a password equal to
01:16:37.920 an empty string and now we can use that
01:16:40.440 value right within this first input
01:16:43.040 field by saying form. name and below it
01:16:47.480 we can call the on change Handler so on
01:16:50.719 change text will be equal to where we
01:16:53.560 get the value and then we need to set up
01:16:56.679 the form by saying set form and first we
01:17:00.239 have to spread the existing values of
01:17:02.400 the form by saying do do form and then
01:17:05.600 update this specific Field's value so
01:17:08.719 the value of this specific field is name
01:17:11.960 and we can set that over to be equal to
01:17:14.239 Value I think I can expand this in a few
01:17:16.320 lines just so you can quickly see what's
01:17:18.040 happening so we're setting the form by
01:17:20.400 first spreading all of the other fields
01:17:22.400 and then updating specifically the name
01:17:25.000 field with the name value if I zoom out
01:17:27.960 a bit we can see it in one line and that
01:17:30.440 now allows us to go into the input field
01:17:32.639 and accept all of these props so
01:17:35.600 alongside the label and the label style
01:17:38.639 we also have things like the icon the
01:17:41.639 secure text entry so if this is true
01:17:45.239 that means that we're typing in a
01:17:46.560 password and by default it will be set
01:17:48.560 to false we have the container style the
01:17:52.040 input style the icon sty style the class
01:17:56.960 name and finally we can spread all of
01:17:59.760 the other props that we have so now we
01:18:02.400 can continue with creating this field
01:18:04.520 because right now we're just showing the
01:18:06.719 label and nothing more so let's go below
01:18:10.159 this text and let's create a new view
01:18:12.679 inside of which we can create the icon
01:18:15.360 and the input this view will have a
01:18:18.080 class name equal to it'll be a dynamic
01:18:22.159 property of flex Flex D
01:18:26.440 row justify Das start items D Center
01:18:31.199 relative BG Das neutral off 100 rounded
01:18:35.880 Das full border border neutral off 100
01:18:41.320 and on Focus border Das primary of 500
01:18:45.600 and dynamic property of container style
01:18:51.320 if we decide to pass any additional
01:18:52.960 properties and now we're slowly starting
01:18:55.000 to create this specific input within it
01:18:58.719 we can check if we have the icon so if
01:19:01.199 icon exists then we can render an image
01:19:05.719 which we of course have to import from
01:19:07.920 react native we can do that right at the
01:19:10.920 top by getting the image from react
01:19:13.840 native this image will have of course a
01:19:16.520 source equal to Icon and a class name of
01:19:21.280 it will be dynamic w6h
01:19:25.040 six margin left of four and dynamic
01:19:29.280 property of Icon style so now we can see
01:19:32.159 this icon and what is soon going to
01:19:34.440 become an input field below the icon we
01:19:37.320 can render a text input which is a react
01:19:40.199 native component so we have to import it
01:19:42.760 from react native it will also have a
01:19:45.320 class name which will be dynamic it'll
01:19:48.960 be rounded Das
01:19:51.719 full padding of four F of Jakarta semi
01:19:56.320 bold text of 15 pixels Flex
01:20:00.880 one and it'll have Dynamic Property of
01:20:04.159 input style as well as text Dash left
01:20:07.679 it'll also have a property of secure
01:20:09.960 text entry equal to secure text entry
01:20:13.679 and we can spread all of the other props
01:20:15.840 that we decide to share with this input
01:20:17.639 so now you can slowly start seeing this
01:20:19.480 input appear on the screen enter your
01:20:21.920 name we can style this input a bit
01:20:23.880 further by modifying the keyboard
01:20:26.880 avoiding View and we can change the
01:20:28.840 behavior of this view depending on the
01:20:31.600 platform we're on so we can use the
01:20:33.639 special platform feature coming from
01:20:35.520 react native by saying platform which we
01:20:38.239 can import from react
01:20:40.239 native. and if the OS is equal to iOS
01:20:44.320 then we can do padding else we can do
01:20:47.239 height I learned that this makes it work
01:20:49.600 better on those specific devices to
01:20:52.480 touchable without feedback we can
01:20:54.159 provide an on press and here we can run
01:20:58.520 the keyboard coming from react native.
01:21:02.120 dismiss which means that if we click
01:21:04.520 outside or if we click within this
01:21:06.320 touchable opacity or touchable without
01:21:08.679 feedback we will close the keyboard
01:21:11.600 check this out I click it I click
01:21:14.400 outside it closes great and now we have
01:21:17.880 a single input field we can also specify
01:21:20.400 the types of those props which are equal
01:21:23.080 to input field props coming from types
01:21:26.880 and now that we have created this
01:21:28.040 structure for input Fields it is super
01:21:30.520 simple to just duplicate them below one
01:21:33.639 two
01:21:34.840 more the one below will have a label of
01:21:38.239 email it'll say enter email or enter
01:21:42.560 your email the icon will be icons. email
01:21:47.239 it'll say form. email and under form we
01:21:51.080 will set the email right here and for
01:21:54.679 the third one we can say password so
01:21:57.639 password enter your password icons will
01:22:00.719 be icons. loock and here we'll pass the
01:22:03.679 special secure text entry equal to True
01:22:08.000 Value is form. password and finally we
01:22:11.679 can set the password here as well and
01:22:15.800 now we can see three fields and how
01:22:17.960 simple it was to create them below those
01:22:20.920 three we can do something even simpler
01:22:23.480 and that is call our custom button we
01:22:27.280 can provide it a title of sign up we can
01:22:31.480 give it an on press which we'll call a
01:22:34.639 special function called on signup
01:22:38.840 press and we can give it a class name
01:22:41.639 equal to margin top of six so before we
01:22:46.320 save this we just have to create this on
01:22:48.719 signup press functionality so let me
01:22:51.360 just add it right here above const
01:22:55.000 on signup press is equal to an
01:22:58.120 async arrow
01:23:00.040 function which we'll create later on but
01:23:02.960 for now you can see how simple it was to
01:23:05.080 duplicate these three inputs and create
01:23:07.960 a custom button right below right below
01:23:11.199 this custom button soon enough we'll
01:23:13.840 create our oo meaning a special button
01:23:17.360 that will allow us to log in with Google
01:23:20.199 and Below oo will show just a regular
01:23:23.679 link coming coming from react
01:23:26.040 native that will point to for SL sign-
01:23:30.400 in and it'll have a text property of
01:23:33.719 something like already have an account
01:23:37.239 question mark and then we can render
01:23:39.080 another text right below and say
01:23:41.960 something like log in but this one will
01:23:45.040 have a class name equal to text- primary
01:23:49.920 d500 okay let's style this link just a
01:23:53.239 bit more by giving giving it a class
01:23:56.320 name equal to text-
01:23:59.520 LG text- Center text- general of 200 and
01:24:05.440 a margin top of 10 we can also create an
01:24:08.080 empty space right here after the
01:24:10.400 question mark like this and this is now
01:24:12.960 looking so much better below this link
01:24:15.719 and below the view later on we'll create
01:24:18.120 a model for the verification so I can
01:24:20.920 say verification model right here so now
01:24:24.000 let's add this oo button to which we can
01:24:26.679 add the functionality very soon I'll
01:24:28.840 create a new custom component called
01:24:32.400 oo which typically stands for social
01:24:35.560 authentication here we can create a new
01:24:37.960 component const oo is equal to a
01:24:41.360 functional component and we can just
01:24:43.800 export default ooth within there we can
01:24:46.880 automatically return a view within that
01:24:49.880 view we'll have another smaller view
01:24:52.960 that will have a class name equal to
01:24:55.719 flex Flex Das row justify Das center
01:25:01.800 items Das Center margin top of four and
01:25:06.440 a gap X of three within it we can render
01:25:10.360 one self-closing view that'll have a
01:25:13.480 class name equal to flex of
01:25:17.080 one h of one pixel so height of only one
01:25:20.760 pixel and a BG General of 100 below that
01:25:26.760 one dot we'll also have a text which we
01:25:29.320 need to import from react
01:25:32.280 native and this text will have a class
01:25:35.159 name equal to text- LG and it'll say or
01:25:40.360 and then right below that we can
01:25:42.040 duplicate this View and show it here so
01:25:45.960 this is going to look something like
01:25:48.440 this even though we cannot see it yet it
01:25:50.480 will be there soon once we call the O
01:25:53.960 off component which we just created so
01:25:57.280 all off and we can import it
01:25:59.760 automatically right here I'm going to
01:26:02.280 skip the on boarding and it should
01:26:04.360 appear just above the already have an
01:26:07.000 account thing but we cannot see it yet
01:26:09.760 so to make it a bit more visible we can
01:26:11.960 go below this inner View and create a
01:26:15.280 custom button it'll look something like
01:26:18.760 this and it'll have quite a few props a
01:26:21.760 title equal to log in
01:26:25.520 with Google there we go now we can see
01:26:28.159 it we can also give it a class name
01:26:31.920 equal to margin top w- full and Shadow
01:26:39.080 dnone we can also give it an icon left
01:26:42.960 which is going to be equal to a callback
01:26:45.760 function that automatically returns an
01:26:48.960 image and this image will have a source
01:26:52.679 equal to icons .
01:26:55.440 Google a resize mode equal to contain
01:27:00.719 and a class name equal to w-5
01:27:05.920 h-5 and margin X off two and of course
01:27:09.560 we need to import these icons at the top
01:27:12.080 by saying
01:27:13.440 import icons coming from add for slash
01:27:18.280 constants forward slash nothing because
01:27:21.880 the icons are exported from there now if
01:27:25.199 we head over to our sign up you can see
01:27:28.320 a button that says login with Google
01:27:31.920 let's also give it an additional
01:27:34.440 property of BG variant is equal to
01:27:39.239 outline because typically Google buttons
01:27:41.639 don't have a color typically they're
01:27:44.000 white and the text variant will be set
01:27:46.760 to
01:27:48.400 primary like this there we go that's a
01:27:51.400 Google button and finally we can say on
01:27:53.840 press
01:27:54.639 and that'll be equal to a function
01:27:56.080 called to handle Google sign in so this
01:28:00.360 is a function which we can declare right
01:28:02.480 here above it'll have to be within the
01:28:04.440 function so it cannot be an instant
01:28:06.520 return rather we have to say return
01:28:10.239 here close it properly indent it and now
01:28:14.320 we can declare the function const handle
01:28:17.000 Google signin which will be equal to an
01:28:19.159 async function to which we can add the
01:28:21.800 logic very soon so now we have the
01:28:24.199 Google sign-in button and the regular
01:28:26.159 sign up and we can click on the login to
01:28:29.320 navigate over to a log in screen so if
01:28:32.760 we click it right now it'll be empty and
01:28:35.679 how will our login screen look like well
01:28:38.199 if we check out our design you can see
01:28:39.960 that it is basically almost the same as
01:28:42.719 the signup it just doesn't have the name
01:28:44.719 field because we already have our name
01:28:47.360 so for that reason to create our sign in
01:28:50.040 I will duplicate the signup head over to
01:28:53.440 sign in
01:28:54.679 and just override everything we have
01:28:56.960 here while I rename it to sign in so
01:29:00.880 let's do that here and here and Skip and
01:29:06.119 head over to login and there we go we
01:29:08.440 can see the same signup screen here but
01:29:11.040 in this case we'll make some changes so
01:29:13.320 let's go down we'll keep the same sign
01:29:15.600 up image but instead create your account
01:29:18.239 we'll say something like welcome and we
01:29:21.000 can also do an emoji of wave right here
01:29:24.239 you can find it on Google and copy it in
01:29:26.360 this case as I told you we won't have
01:29:28.119 the input field off name rather we'll
01:29:30.920 just have input fields for email and
01:29:34.239 password the button will say sign in of
01:29:38.040 course and instead of on signup press
01:29:41.440 here we'll have on sign in press
01:29:44.400 functionality so that's going to be on
01:29:46.760 sign
01:29:48.199 in and we can use it here at the same
01:29:52.000 time the form will only have the email
01:29:54.040 Emil and password it won't have a name
01:29:56.520 so we can delete it from here the link
01:29:59.159 will also have a reverse logic right
01:30:01.440 here instead of saying already have an
01:30:03.920 account we'll say something like don't
01:30:07.000 have an account and then we can say sign
01:30:11.600 up there we go so now we have enabled
01:30:14.360 switching between the sign in and the
01:30:16.600 sign up after we modify the H right here
01:30:21.239 I click sign up it goes there sign in
01:30:24.199 goes here and now we can nicely move
01:30:26.719 between the different screens this is
01:30:29.679 great The Next Step will of course be to
01:30:32.400 implement the functionality of
01:30:34.480 registering our account we'll first
01:30:36.960 start by implementing the functionality
01:30:38.760 of registering through the email and the
01:30:41.360 password and then later on we'll make
01:30:43.679 the oo work as well for authentication
01:30:47.360 will of course be using clerk it is more
01:30:49.800 than just a sign up box it allows you to
01:30:52.040 very quickly implement
01:30:54.600 and super functional and secure
01:30:56.560 authentication flows and if you checked
01:30:58.639 out a couple of my other videos you know
01:31:00.920 that it's completely free for up to
01:31:03.440 10,000 not just users but monthly active
01:31:07.119 users it is super hard to ever cross
01:31:09.719 this number but if you do then you can
01:31:11.760 start paying or make a switch but if you
01:31:14.119 never reach that number it is completely
01:31:16.239 free and here's the best part clerk
01:31:19.000 created a phenomenal Expo quick start
01:31:22.239 making it work so seamlessly ly with
01:31:24.800 Mobile Expo applications the first step
01:31:27.920 we have already done we have installed
01:31:29.719 all the necessary things and created an
01:31:31.600 expo app but we just have to install the
01:31:35.320 Expo Metro runtime as well so let's just
01:31:38.239 copy the second part of this first
01:31:40.080 terminal command we can open up a new
01:31:42.600 terminal and paste it right here MPX XO
01:31:46.239 stall and then couple of these
01:31:48.400 dependencies we can continue following
01:31:50.520 the other steps such as installing the
01:31:52.840 clerk and the clerk Expo package by
01:31:56.080 pasting the command after that we'll
01:31:58.239 have to set up our environment variables
01:32:00.760 and in this case it looks like I'm
01:32:02.679 already logged in if you're not logged
01:32:04.960 in click the link in the description
01:32:07.320 which will allow you to follow along and
01:32:09.040 see exactly what I'm seeing and now I
01:32:11.119 can see that this is not the right key
01:32:12.679 for me either because I have to create a
01:32:14.800 new project so let's head over to the
01:32:17.119 dashboard and as you can see I already
01:32:19.520 created many clerk applications but now
01:32:22.320 we'll create a new one I'll call it
01:32:25.320 JSM Uber you can give it some other name
01:32:29.000 I think you can do something like ride
01:32:30.719 as well but make sure to start with
01:32:32.880 JSM we'll choose email signin option as
01:32:36.440 well as Google and click create
01:32:39.000 application you can see that they have
01:32:40.679 the Expo setup right here so we can
01:32:43.119 continue following right from
01:32:45.239 here here we have our environment test
01:32:48.239 variable so let's copy it and add it to
01:32:50.520 our envs I'll create a new file in the
01:32:53.159 root of our directory Dory called
01:32:56.199 EnV and just paste this environment
01:32:59.639 variable here webstorm asks me if I want
01:33:02.840 to install the EnV file support plugin
01:33:05.639 which I will install now we can continue
01:33:08.199 to the next step and that is adding the
01:33:10.600 clerk provider to our root layout so
01:33:13.840 let's copy this entire file head over to
01:33:17.000 layout and paste it right here at the
01:33:19.840 top you'll notice that we have some
01:33:22.119 imports we're getting that environment
01:33:24.400 key and we have a check if we don't have
01:33:27.159 a key after that we need to wrap our
01:33:29.440 entire application with the clerk
01:33:31.239 provider and the clerk loaded wrappers
01:33:34.480 so let's copy them delete this and wrap
01:33:38.920 our stack with the clerk provider and
01:33:41.400 clerk loaded and close one by
01:33:44.960 one I indented everything nicely and it
01:33:48.560 looks great we can add this if no
01:33:50.800 publishable key right within the root
01:33:53.360 layout
01:33:54.480 below the fonts loaded now let's go to
01:33:57.800 the next step and that is to configure
01:34:00.480 the token cache with Expo for that we
01:34:03.440 need to install the new package Expo
01:34:06.080 secure store so let's simply open up a
01:34:09.080 new terminal and copy and paste the
01:34:11.280 command the next step is to copy this
01:34:14.040 token cache so let's copy it and instead
01:34:17.159 of cluttering the layout file with all
01:34:19.880 of the authentication logic we can put
01:34:22.080 all authentication logic in another file
01:34:25.280 that can be within Uber clone and we can
01:34:27.800 create a new
01:34:29.080 folder called lib as in library and
01:34:32.800 within the library we can create a new
01:34:34.800 file called
01:34:36.800 O.S inside of which we can post this
01:34:40.000 token cache interface and here we can
01:34:42.520 also copy the token cache part of this
01:34:45.440 next code block we're not going to put
01:34:47.480 it within the layout which is going to
01:34:49.040 take the token cache so let's paste it
01:34:51.760 here and let's make sure to get the
01:34:54.320 secure store from Expo secure store and
01:34:58.719 all the other Imports that we need so
01:35:00.920 I'll paste it at the top of this file
01:35:03.520 right here we just need that and I don't
01:35:06.040 even believe we'll need the token cache
01:35:08.159 interface we can add it later on if it's
01:35:10.400 needed and since we'll use token cache
01:35:12.400 somewhere else for now I'll just say
01:35:14.520 export const token cache now let's go
01:35:17.960 down and the next thing is to create a
01:35:21.280 Home Route group layout I believe we
01:35:24.080 call this root and we already have it
01:35:26.840 the next step is to conditionally render
01:35:29.040 the content depending whether we're
01:35:30.960 signed in or not we don't have to do
01:35:33.239 this yet we're going to do it on the
01:35:34.880 homepage remember we haven't yet signed
01:35:37.199 in so we cannot even see the homepage
01:35:39.679 but maybe it will be good to see this
01:35:41.520 once we're actually logged in to see at
01:35:44.400 least something to see a successful
01:35:46.080 authentication state so let's actually
01:35:48.840 copy everything that is on here that is
01:35:51.719 indeed the index TSX of the home page so
01:35:54.440 we can override what we currently have
01:35:56.719 in our app Root tabs and then home and
01:36:01.679 here we can paste what we just copied if
01:36:04.159 we do authenticate successfully we
01:36:06.080 should be redirected to this page and we
01:36:08.360 should be able to see our email address
01:36:11.400 next we need to protect our o routes in
01:36:14.080 the layout by creating a new route group
01:36:16.960 O which we already have done with the
01:36:19.320 underscore layout file and now we can do
01:36:21.800 a redirect there so let's copy this if
01:36:25.000 statement and the use o and we can head
01:36:28.360 over to index. DSX which is our homepage
01:36:33.159 and here we can paste if signed in use o
01:36:37.199 and that's coming from clerk Expo we can
01:36:39.360 also imported so if we're signed in then
01:36:42.840 redirect to home else redirect to O
01:36:47.440 welcome in our case the home will be
01:36:50.320 under a bit of a different route it's
01:36:52.600 not going to be just for slash it'll be
01:36:57.560 slash
01:36:59.760 root slash
01:37:02.719 tabs
01:37:04.600 slome okay I hope that makes sense that
01:37:08.159 is the home page that we just added
01:37:10.080 these clerk functionalities too great so
01:37:13.400 far we're just following the steps the
01:37:15.840 next thing that it says is to add the
01:37:17.800 sign up page we already have the signup
01:37:20.600 page thankfully uh but we can copy this
01:37:23.920 on signup press function and on press
01:37:27.880 verify function so let's copy them head
01:37:31.600 over to sign up where we left off and
01:37:34.280 override the on signup press with these
01:37:37.320 new functions which we have just copied
01:37:39.840 with them we most likely also have to
01:37:41.840 get some of the states or we'll have to
01:37:43.920 make some of the modifications I think
01:37:45.880 we can add all of that on our own the
01:37:47.840 only thing we need is the call to the
01:37:49.760 use signup hook right here at the top
01:37:52.560 coming from Clerk Expo so let's call
01:37:55.639 this hook at the top use sign up and
01:37:59.920 this is coming from clerk Expo so we can
01:38:02.639 say import use sign up coming from clerk
01:38:08.159 at clerk clerk Expo we already have the
01:38:12.280 form that is good but we also need the
01:38:14.880 verification because for clerk to work
01:38:17.400 with react native applications via email
01:38:19.960 we need to verify our user login or sign
01:38:22.920 up by email and this will be just a
01:38:25.280 state so we can use the use State
01:38:27.560 snippet
01:38:29.400 verification set verification at the
01:38:32.360 start equal to an object containing the
01:38:34.800 state equal to
01:38:36.840 default the error code if there is one
01:38:40.520 at the start equal to an empty string
01:38:42.880 and the code the user is trying to enter
01:38:45.159 to verify their credentials that's also
01:38:48.239 going to be an empty string at the start
01:38:50.840 next our email address and password are
01:38:53.599 coming from a form so we have to say
01:38:56.480 email address and password are equal to
01:38:58.920 form. email and form that password next
01:39:03.480 we can leave this as it is and instead
01:39:05.679 of set pending verification to true we
01:39:07.920 can say set verification where we can
01:39:10.520 say dot do dot verification to spread
01:39:13.360 all the existing information about the
01:39:15.119 verification but we can set the state to
01:39:18.040 pending if we get an error we'll simply
01:39:20.639 conso log that error and that's it for
01:39:23.599 the signup but we have to figure out
01:39:25.880 what happens on the verification the
01:39:28.280 verification is the second part of the
01:39:30.360 authentication it's when we get the
01:39:31.960 email with the code that's asking us to
01:39:34.159 verify whether it's us who's trying to
01:39:36.280 sign up with our email account so we can
01:39:38.599 say if not loaded then return nothing
01:39:42.000 meaning exit out of the function else we
01:39:45.440 can try to complete the signup the code
01:39:48.400 in this case will be equal to
01:39:50.280 verification. code because that's where
01:39:52.480 we put it within that specific State
01:39:54.840 field if complete signup do status is
01:39:58.840 equal to complete then we want to set
01:40:01.560 active the session of the complete sign
01:40:04.000 up. created session ID and we also want
01:40:07.000 to modify the verification state to say
01:40:10.760 do do do verification where we spread
01:40:13.440 everything but then we also want to set
01:40:15.119 the state to be equal to success else if
01:40:18.239 it doesn't succeed we want to set the
01:40:20.239 verification to state is equal to failed
01:40:25.239 and then we can add the error message
01:40:27.800 equal to
01:40:29.800 verification failed and finally on the
01:40:32.760 big catch we can also set the
01:40:35.080 verification error right here but this
01:40:37.679 time the error can be equal to error.
01:40:40.520 errors
01:40:41.639 z. long message so this will tell us a
01:40:44.840 bit more information about why the error
01:40:47.280 happened finally there's something that
01:40:49.320 aite hasn't done here and that is create
01:40:52.320 a new user in our own database once a
01:40:55.440 clerk user gets created and that's what
01:40:58.199 we want to do right here so I'll say to
01:41:00.760 do create a
01:41:03.599 database
01:41:05.239 user so here later on we'll make a
01:41:07.560 database call to create a user in our
01:41:09.639 database Beyond just being a clerk user
01:41:13.040 but for the time being we've been
01:41:14.560 looking at this create your account
01:41:16.000 screen for far too long and I would just
01:41:18.719 want to see something change so let's
01:41:21.159 try to authenticate with Clerk first but
01:41:24.520 of course to be able to do that we have
01:41:27.000 to create a model that would allow us to
01:41:29.599 type in the code that we got via email
01:41:33.440 so let's create a new model right here
01:41:36.159 below everything that we have
01:41:38.480 verification model it is waiting for us
01:41:41.000 to create this model we'll install a new
01:41:43.360 package mpm install
01:41:46.679 react-native Das model it's a very handy
01:41:50.480 package that basically screams don't
01:41:53.520 reinvent the wheel somebody else needed
01:41:56.520 a model before they created it it is
01:41:58.960 used by tens of thousands of people if
01:42:01.360 not more and we're going to make use of
01:42:03.239 that model in here as well but of course
01:42:06.000 we'll style it to match our own
01:42:07.679 application so to start creating it we
01:42:10.280 can use it by importing it by saying
01:42:13.320 react native
01:42:15.119 model which Imports it from react-native
01:42:18.080 D model and it accepts an is visible
01:42:22.080 prop and it'll only be visible if the
01:42:26.639 verification. state is triple equal to
01:42:30.360 success next within it we can show a
01:42:33.440 view and that view will have a class
01:42:36.119 name equal to BG D white padding X of s
01:42:41.440 padding y of 9 rounded -2 XL and m-
01:42:47.840 h-300 pixels inside of square
01:42:50.800 brackets within it we can also render an
01:42:53.599 image with a source equal to images.
01:42:58.080 check and a class name equal to
01:43:02.239 w-10 pixels for the width
01:43:06.119 h-10 pixels for the height and margin X
01:43:10.360 of Auto and margin y of
01:43:13.360 five if we save it we cannot see
01:43:16.400 anything yet because we haven't yet
01:43:18.280 modified the verification status by
01:43:20.840 entering our details but thank
01:43:23.119 thankfully we can mock that verification
01:43:25.400 status by changing the default State
01:43:28.639 variable to success and let's reload our
01:43:32.920 application just to see the latest
01:43:34.560 changes I think sometimes it does get
01:43:37.000 stuck oh this time we have an error
01:43:39.639 saying module Expo local
01:43:42.320 authentication could not be found within
01:43:44.440 the project directory this error seems
01:43:47.239 pretty self-explanatory it's saying that
01:43:49.320 it's unable to resolve this package from
01:43:52.520 Clerk Expo so that might mean that we
01:43:55.560 just need to install it manually so
01:43:58.159 let's copy the name let's say mpm
01:44:01.000 install and then say Expo local
01:44:04.320 authentication make sure to spell it
01:44:06.280 properly I often misspell authentication
01:44:09.639 and press
01:44:11.320 enter once it gets installed we can try
01:44:14.119 to reload our application and see if
01:44:16.960 that fixes it indeed it got bundled we
01:44:20.719 are back on our onboarding which is
01:44:23.480 looking great and it looks like we're
01:44:25.239 still having this console warning from
01:44:27.360 the root but we're going to fix that
01:44:29.440 very soon for now I will dismiss it and
01:44:32.320 we can see our beautiful
01:44:34.679 model let's continue creating it below
01:44:37.800 the image I'll show a text element with
01:44:41.119 a class name equal to text- 3XL font D
01:44:46.360 Jakarta
01:44:48.679 bold and text Dash Center within it we
01:44:52.480 can say some something like verified
01:44:55.040 right below we can do another text that
01:44:57.960 will have a class name equal to
01:45:01.239 text-base text- gray- 400 font D Jakarta
01:45:07.920 text- Center and margin top of two and
01:45:11.040 we can say something like you have
01:45:13.080 successfully verified your account and
01:45:16.840 finally below the text we can have
01:45:19.000 another custom button with a title of
01:45:23.000 browse Home on press we can have a
01:45:26.880 callback function that calls the
01:45:28.960 router from Expo router and replaces our
01:45:33.400 URL to a string of SL root which is in
01:45:39.800 parentheses slash tabs in parentheses
01:45:44.560 slome and it's going to have a class
01:45:46.719 name of margin top of
01:45:50.080 five there we go verified browse home
01:45:54.080 now we won't click it just yet as it'll
01:45:56.679 most likely break our
01:45:58.360 application but what we can do is
01:46:01.560 actually test out the full
01:46:03.760 functionalities of our authentication we
01:46:06.719 have added a lot of code I'm not saying
01:46:08.880 everything will work right of the bad
01:46:11.040 but we can give it a shot I will bring
01:46:14.159 back the default state of the
01:46:16.520 verification to default so it'll get
01:46:19.599 hidden and now that I think about it
01:46:21.960 instead of changing it to default we're
01:46:23.800 going to change it to pending because
01:46:25.679 that's the state that has to happen
01:46:27.920 before success so that means that we can
01:46:30.920 go down where we have created our react
01:46:34.480 native model and now we'll have to
01:46:36.560 create yet another react native model
01:46:39.679 with a status of
01:46:42.239 pending so let's copy
01:46:45.119 it and I'll put it right here on
01:46:48.360 top react native model with a status of
01:46:51.679 pending another property we can add to
01:46:54.000 this react native model is on modal hide
01:46:58.119 and on modal hide in this case we can
01:47:01.320 create a callback
01:47:03.480 function and we can set
01:47:06.520 verification by spreading the
01:47:08.679 verification properties and then
01:47:11.080 changing the state to
01:47:13.520 success and now we can go inside of that
01:47:16.159 model and crafted by crafting a view
01:47:20.040 that view will have a class name equal
01:47:22.520 to BG - wi padding X of 7 padding y of 9
01:47:28.080 we already know the drill rounded -2
01:47:30.920 Excel and m-h of 300 pixels there we go
01:47:36.719 that's our model within it we can render
01:47:39.560 a piece of text that'll have a class
01:47:42.760 name of text- 2XL font
01:47:46.920 djakarta extra bold and margin bottom of
01:47:51.360 two that's going to say something like
01:47:53.960 verification below that text we can have
01:47:56.520 another piece of text with a class name
01:48:00.239 equal to font D
01:48:03.000 Jakarta and margin bottom of
01:48:06.080 five and it can say we've sent a
01:48:10.239 verification code to form. mail so this
01:48:14.400 is the email you entered during the form
01:48:17.599 below this text we can create an input
01:48:20.800 field again it is Super Con venient Now
01:48:23.400 to create it because we have already
01:48:25.000 created this input field component uh
01:48:28.000 that's going to have a label equal to
01:48:30.520 code icon equal to icons. loock
01:48:36.920 placeholder equal to 1 2 3 4
01:48:40.639 5 value equal to
01:48:43.679 verification. code keyboard type this is
01:48:48.080 something pretty interesting numeric in
01:48:51.000 web applications you cannot change your
01:48:53.280 physical keyboard but here you can um
01:48:56.920 next we can also have the onchange
01:49:00.920 text which will request a callback
01:49:03.840 function with the code you're typing in
01:49:06.840 and we can set verification to be equal
01:49:10.000 to where we spread verification and then
01:49:12.840 update the code that's going to look
01:49:15.119 something like
01:49:16.280 this finally if there is a verification
01:49:19.599 error we can show it so if verification
01:49:24.400 error then we can render another piece
01:49:27.239 of
01:49:28.119 text that's going to render the
01:49:30.719 verification. error of course that text
01:49:33.960 will be red in color so we can give it a
01:49:36.599 class name equal to text-
01:49:39.719 r-500 and text- smm as well as margin
01:49:43.360 top of one and below that we need to
01:49:46.239 have a custom
01:49:48.080 button of course that we'll use to
01:49:50.599 submit it so we can say VAR ify email
01:49:55.080 onpress here we're actually calling the
01:49:57.639 onpress verify which is the function
01:49:59.840 that we coded above with a class name of
01:50:03.119 margin top of five and BG success of 500
01:50:07.960 there we go that's looking good so what
01:50:11.000 do you say that we give it a shot I'll
01:50:14.800 change the default state to
01:50:18.040 default to CR form and now I'll start
01:50:22.199 typing my
01:50:24.199 name it's Adrien the email is contact at
01:50:30.239 JS mastery.
01:50:32.760 proo and we can choose a password Here
01:50:36.320 we have very strict clerk rules I
01:50:38.440 believe so if I enter
01:50:40.560 123123 and click sign up we have an
01:50:43.480 error it seems like we cannot expand it
01:50:45.719 right now but of course we want to show
01:50:47.719 that error in some kind of a better
01:50:50.239 place and that's where react native
01:50:53.159 alerts come in so we can scroll down to
01:50:56.320 this catch where we just consel log the
01:50:58.239 error and instead of a conso log we can
01:51:01.840 actually alert it by using the alert
01:51:05.159 functionality from react native. alert
01:51:09.119 of a type error and we can enter a
01:51:12.400 message of
01:51:13.920 er. Errors z. long
01:51:18.679 message now if we save this and try to
01:51:22.040 sign up with a basic password one more
01:51:24.599 time we got a nice error saying
01:51:27.719 passwords must be eight characters or
01:51:30.000 more even though you cannot see it on
01:51:32.000 the screen I think my phone recording
01:51:34.599 software is hiding it I do indeed see
01:51:37.400 six password dots on my screen now I
01:51:40.880 will change it to 123123123 to pass over
01:51:45.040 the8 character minimum limit and I'll
01:51:47.880 click sign
01:51:49.000 up now it says password has been found
01:51:52.079 in an online data breach for account
01:51:54.320 safety please use a different password
01:51:56.840 very interesting so it looks like we'll
01:51:59.520 have to choose a real password I'll
01:52:02.360 enter something specific I'll pause the
01:52:05.960 video and enter a strong password and
01:52:08.840 press sign
01:52:10.960 up this time a verification model
01:52:14.360 appeared which is a good sign and would
01:52:17.040 you look at that JSM ride verification
01:52:20.880 code just arrived in Mya email so let's
01:52:24.079 copy the code or should I say type it in
01:52:28.520 623
01:52:30.480 263 and click verify
01:52:34.280 email and nothing where is our success
01:52:38.760 screen why didn't we get renovated to
01:52:41.280 the home are we signed in or are we not
01:52:44.599 or should I say was the account created
01:52:47.040 or was it not the best way to find out
01:52:49.719 is to go to Clerk's dashboard under
01:52:52.560 users and here you can indeed see a new
01:52:55.639 user that got
01:52:57.520 created but for some reason the success
01:53:00.239 model didn't show that's totally okay
01:53:03.159 let's delete the user and let's give it
01:53:05.639 another shot in react native you can
01:53:08.159 never show two models at the same time
01:53:11.280 and if you scroll down you can see that
01:53:13.000 we're using the same state to go from
01:53:15.760 pending and then to success we have to
01:53:19.719 use two different states to make that
01:53:21.960 happen so let's scroll up and let's
01:53:24.599 create a new state use State
01:53:30.440 snippet called show success model set
01:53:35.119 show success model at the start set to
01:53:37.880 false now we can scroll down and on our
01:53:41.560 pending model instead of setting the
01:53:43.840 verification state to success we can do
01:53:46.800 something else we can say if
01:53:50.639 verification. state
01:53:53.040 is triple equal to success then we can
01:53:56.960 set show success model to True let's
01:54:02.280 just turn this into a function and
01:54:04.920 properly close it and now when we
01:54:07.599 activate this second model for success
01:54:10.159 we're not going to activate it by the
01:54:11.760 verification that state rather we'll
01:54:14.239 activate it by this new show success
01:54:16.719 modal state so let's give it another
01:54:19.880 shot let's create a new account I again
01:54:22.840 pause the video enter my details and
01:54:25.760 press sign up we get this new
01:54:28.040 verification model which is great send
01:54:30.400 to contact jm.pro indeed we get back a
01:54:34.840 new code which I can enter on my phone
01:54:37.760 this feels so good it feels like I'm
01:54:40.119 trying to install or sign up for a
01:54:42.840 completely new mobile application
01:54:47.560 5982 verify email and verified there we
01:54:51.880 go I love how nicely it's slided from
01:54:54.040 the bottom to the center of the screen
01:54:55.960 and now we can click browse home and it
01:54:59.520 broke my application let's try to reopen
01:55:02.079 it once again by the way we have to fix
01:55:04.320 the borders here of the splash screen so
01:55:07.119 let's fix that right away I think the
01:55:09.280 fixes in the app. Json where we have the
01:55:12.599 splash screen right here we have to
01:55:14.480 change the background color to match the
01:55:16.760 blue color of the application so that's
01:55:20.320 2f8 e
01:55:23.000 if we save it and reload our entire
01:55:26.119 splash screen you can see that now it
01:55:28.199 appears perfectly on the screen and the
01:55:30.280 blue covers the entire thing now we can
01:55:33.719 skip the onboarding and try to sign up
01:55:36.760 one more time but I think the issue was
01:55:39.960 with this router. replace thing right
01:55:42.599 here instead of router replace let's try
01:55:45.159 to use a router. push there are minor
01:55:48.320 differences between the two but this
01:55:50.679 might just do it so one more time you'll
01:55:53.400 have to reload your clerk dashboard and
01:55:56.000 delete this user in case you want to use
01:55:58.040 the same email address I'll pause the
01:56:00.719 video and type in my credentials I'll
01:56:03.440 click sign
01:56:05.440 up enter my code click verify and browse
01:56:10.679 Home there we go it almost worked we
01:56:13.840 just have to hide the actual model the
01:56:16.639 only thing we have to do to fix this is
01:56:19.040 expand this router. push and add
01:56:21.599 something to it and that something is
01:56:24.280 set show success model and reset it back
01:56:27.560 to false because then once we rigate it
01:56:30.280 will no longer be showing great so if I
01:56:34.000 click it as you can see it works great
01:56:38.360 so now we can see our homepage and we
01:56:41.119 can get rid of this ugly top bar we can
01:56:45.079 do that easily by finding the layout
01:56:47.840 that is close to our home which is this
01:56:50.960 layout right here and we need to copy
01:56:53.560 one of the previous layouts that we've
01:56:55.639 had maybe this one right here we had in
01:56:58.880 the O we can copy it and head over to
01:57:02.800 the layout next to the tabs not the one
01:57:05.960 inside it but rather next to the tabs
01:57:09.440 and paste it
01:57:11.159 here here we can just say name tabs in
01:57:15.280 parenthesis Heather shown is set to
01:57:18.199 false and for now we can remove these
01:57:20.800 other routes and just leave the tabs
01:57:22.760 route group I'll also open up the app
01:57:25.719 once again and actually now might be a
01:57:28.560 good idea to implement the
01:57:30.239 authentication session to check whether
01:57:32.679 our user has already authenticated so we
01:57:34.920 can automatically skip the onboarding
01:57:37.480 and skip the welcome screen and skip the
01:57:39.800 authentication screens and go straight
01:57:42.119 to the home I mean think about it that's
01:57:44.440 the typical app experience you're not
01:57:46.880 going to sign in for the app or go
01:57:48.280 through the onboarding every time you
01:57:49.719 open the app on your phone you're going
01:57:51.480 to go Direct ly to the homepage of that
01:57:53.520 app so let's do that next I think it's
01:57:56.280 going to be an easy fix and it's not
01:57:58.360 working right now because I accidentally
01:58:00.199 skipped one of the steps in the Expo
01:58:02.520 clerk setup and that is if you go to
01:58:05.400 this app layout remember when I told you
01:58:08.000 that we will take apart this o TS token
01:58:11.760 cache just to not clutter the layout
01:58:14.639 well I exported it but I forgot to use
01:58:17.719 it so we have to pass this clerk token
01:58:21.719 cache
01:58:22.800 equal to token cache coming from lib o
01:58:26.679 right here once you pass it it should
01:58:29.520 have access to the current user session
01:58:31.840 it is still not redirecting me back to
01:58:33.560 home though which is okay for now we can
01:58:36.119 retest it once again later once we
01:58:38.280 implement the login functionality
01:58:40.520 because right now we just have the
01:58:42.040 registration so even if we did want it
01:58:44.119 to log in again with the same account we
01:58:46.239 cannot do that right now so let's head
01:58:49.400 over to the sign in component or the
01:58:53.639 page and head over to this function
01:58:56.560 called on signin press if you head over
01:58:59.639 to the clerk Expo setup if you scroll
01:59:02.800 down there's going to be the sign in
01:59:04.840 page here as well just below the signup
01:59:08.239 there we go signin page and it includes
01:59:11.440 the on signin press you can get to this
01:59:14.599 documentation Page by googleing for Expo
01:59:18.119 clerk quick start now I will override
01:59:21.320 this function and we'll of course have
01:59:23.280 to do some additional fixes such as
01:59:25.480 importing this use signin functionality
01:59:28.480 alongside the router so we can paste
01:59:30.880 that right here at the top and we need
01:59:33.520 to import the use sign
01:59:36.679 in coming from at clerk SL clerk Expo
01:59:43.159 and we also need to import the used
01:59:44.679 router so let's do just that use router
01:59:49.079 from Expo router in here they're using
01:59:52.159 the Ed call back so that means that we
01:59:54.000 need to import the use call back from
01:59:57.239 react and as email address that's just
02:00:00.159 going to be form. email and password
02:00:03.800 will be equal to form. password other
02:00:06.760 than that I think we just need to fix it
02:00:09.480 in one more place form. email and form.
02:00:13.560 password right here in the dependency
02:00:16.000 array and we have no more errors now we
02:00:20.320 can try to sign in
02:00:22.480 let's skip the onboarding we've seen it
02:00:24.480 quite a few times let's head over to
02:00:26.800 login and enter the email and password
02:00:29.320 you signed up with I have stored it in
02:00:32.119 my Apple passwords and here's a cool
02:00:34.480 thing I can now just press password for
02:00:36.840 Expo Dev scan my face and it
02:00:39.800 automatically entered my email and
02:00:41.520 password and I can click sign in and
02:00:44.400 there we go I got redirected straight to
02:00:47.920 the tabs home this is amazing now we can
02:00:52.639 fix some of these routing issues that we
02:00:54.679 have with the warnings at the bottom for
02:00:57.239 example it is say that no route name
02:00:59.440 tabs exists in nested children tabs chat
02:01:02.880 tabs home and tabs profile so let's
02:01:05.920 first check our layout next to the tabs
02:01:10.599 and here we have added a name of tabs
02:01:12.960 Heather shown false but it looks like
02:01:15.440 we're missing the navigation to point to
02:01:17.599 the other screens on our main
02:01:19.320 application such as chat home profile
02:01:22.800 and rides and we'll create the knv bar
02:01:25.520 or should I say the Bottom bar for your
02:01:27.280 thumb right within tabs and then the
02:01:30.000 layout and then we'll be able to
02:01:32.000 navigate to all of these other screens
02:01:34.800 so let's do that next to get started
02:01:37.639 with creating our tabs let's first
02:01:40.159 declare the layout by saying const
02:01:43.400 layout is equal to just a regular
02:01:46.239 function and it can be an instant return
02:01:49.639 where we'll render the tabs coming from
02:01:52.679 Expo router and then we can export
02:01:55.480 default the layout so what are tabs well
02:01:59.520 tabs is like a navigation bar in web
02:02:01.960 applications it allows us to quickly
02:02:04.440 switch over to other screens this tab
02:02:07.360 will have an initial route name which
02:02:10.440 will be equal to index in this case and
02:02:13.480 we can also provide a couple of
02:02:15.199 different screen options to it the
02:02:18.040 screen options will be an object to
02:02:20.320 which we can provide things like tab bar
02:02:23.639 active tint color equal to White there's
02:02:27.960 many many other things that we can
02:02:29.320 provide to it for now I will just leave
02:02:31.760 this here within the tabs we also can
02:02:35.199 create different tabs do screens our
02:02:38.880 first Tab screen will be a self-closing
02:02:41.440 component with a name equal to home and
02:02:45.719 options where we can render the title
02:02:48.679 equal to home as well
02:02:52.400 header shown will be set to false and we
02:02:55.920 can even modify the tab bar icon which
02:02:58.920 is going to be a callback function that
02:03:01.480 returns a tab icon and this tab icon
02:03:05.360 will be a custom component which we can
02:03:07.800 declare right here const tab
02:03:11.760 icon is just an immediate return
02:03:14.960 function that for now just returns a
02:03:18.079 view within the view we can have another
02:03:21.119 smaller View coming from react native
02:03:23.920 and within it we can render an image
02:03:26.360 with this icon so we can import the
02:03:28.679 image and render it right here I just
02:03:31.360 noticed that my iPhone simulator is no
02:03:33.599 longer running so let me hook it up and
02:03:36.960 now we can get into our application and
02:03:39.920 now if we fix this typo right here we
02:03:43.239 should be able to get into our
02:03:44.639 application I'll just reloaded for good
02:03:46.840 measure and you can see that we're in it
02:03:49.639 says contact adjs master at the top
02:03:53.079 that's because we have said Heather
02:03:54.440 shown to false otherwise it would be
02:03:56.960 here so let's remove it and let's
02:03:59.440 continue working on the tabs you can
02:04:01.559 also start seeing the tabs appear on the
02:04:03.480 bottom and as we switch between them
02:04:05.960 we're actually going to different routes
02:04:08.599 pretty cool we have those routes as
02:04:10.960 they're dynamically taken from these
02:04:13.360 files we have created because each file
02:04:16.079 corresponds to a screen great so why are
02:04:20.119 we even adding these tab screens here
02:04:22.280 well to further modify how this Bottom
02:04:24.719 bar will look like and primarily to
02:04:27.280 change the icon so here we can take the
02:04:30.440 focused state of this icon and if it's
02:04:33.760 focused we can pass it as focused is
02:04:37.000 equal to focus and we can pass a source
02:04:39.920 equal to icons coming from index home
02:04:44.559 and now you'll be able to see that this
02:04:46.440 one the home should have an icon at
02:04:48.800 least it will have it once we add it
02:04:50.719 within this image we can also duplicate
02:04:52.960 this Tab screen three more times 1 2 3
02:04:57.440 the first time it'll be for home the
02:05:00.000 second time it will be for rides uh
02:05:02.920 rather the history of rides so we can
02:05:04.840 say rides and the title will be rides
02:05:08.840 and the icon will be
02:05:11.679 list the next one will be chat chat with
02:05:15.880 a Capital C and it's going to be icons.
02:05:19.679 chat and then the last one will be
02:05:22.920 profile title will be
02:05:25.480 profile and the icons will be profile as
02:05:30.079 well if we save it it's good they're
02:05:32.840 back but now we can further style how
02:05:35.559 each one of these looks like or at least
02:05:38.079 it's tab icon so let's give this first
02:05:41.840 view a class name equal to
02:05:45.760 flex Flex Das row justify Das Center I
02:05:51.639 items D
02:05:53.000 Center rounded D full and if it's
02:05:56.639 focused then we can give it a BG general
02:06:00.040 of 300 else we can give it nothing but
02:06:04.040 of course for this to work we have to
02:06:05.760 make it a template string so let's do
02:06:08.920 just that there we go that's good and
02:06:12.000 this Focus state is coming from props so
02:06:14.360 we can say source is for the image and
02:06:17.079 focus is for the focus State and we can
02:06:19.679 declare the types source is of a Type
02:06:22.520 image source prop type and focused will
02:06:27.639 simply be a Boolean the interview can be
02:06:31.079 styled in a similar manner it can have a
02:06:34.040 class name which will be a dynamic
02:06:35.920 template string of rounded D full W of
02:06:40.400 12 h of 12 items D Center justify Das
02:06:45.800 Center and if it is focused then we can
02:06:49.400 give it a BG of General
02:06:53.119 400 and otherwise it's going to be just
02:06:56.000 an empty string now you can see that we
02:06:58.159 have this green selector icon and for
02:07:01.280 the image itself let's give it a source
02:07:03.559 equal to
02:07:04.920 Source a tint color equal to White a
02:07:10.599 resize mode equal to
02:07:13.119 contain and finally a class name equal
02:07:17.000 to W of 7 and H of 7 as well and and now
02:07:21.800 we can see a nice looking home icon but
02:07:25.119 it still doesn't look that good and
02:07:26.920 that's because we haven't modified the
02:07:29.199 actual tabs options so we have many many
02:07:32.719 more options to choose how our tab will
02:07:36.000 look like tab bar active tint color is
02:07:39.199 just one of the options we can also say
02:07:41.559 tab bar inactive tint color and we can
02:07:45.920 also set that to White next we have tab
02:07:49.320 bar show label we're going to set that
02:07:51.880 to false that's because we have a nice
02:07:53.880 looking icon next we have a tab bar
02:07:57.800 style which will be equal to an object
02:08:01.040 that's going to have a background color
02:08:03.360 equal to Hash 333 333 and if we save
02:08:08.440 this you can now see this nice looking
02:08:10.520 background and finally this is starting
02:08:12.239 to look more like a real mobile app we
02:08:15.559 can give it a border radius of about
02:08:19.440 let's do 50 let's give it a a padding
02:08:22.440 bottom of zero an overflow of hidden a
02:08:27.119 margin horizontal equal to about 20 a
02:08:31.480 margin bottom equal to 20 as well height
02:08:35.920 of 78 display equal to flex justify
02:08:40.800 content equal to space between align
02:08:44.920 items equal to Center let's fix this
02:08:48.440 space between let's give it a flex
02:08:51.480 direction of
02:08:53.280 row and finally a position of absolute
02:08:57.320 so this way it will always appear on top
02:08:59.480 of other content and take a look at this
02:09:02.440 we have a beautiful bottom navigation
02:09:05.400 bar with nice looking icons and activity
02:09:08.280 status that allows us to switch between
02:09:11.159 all of our four apps screens and now we
02:09:14.320 can go back to our homepage so that's
02:09:16.679 going to be home and we can put this
02:09:18.920 within a safe area
02:09:22.280 view which is coming from react native
02:09:24.840 safe area context now we can actually
02:09:27.280 see Hello contact adjs Mastery Pro and
02:09:30.920 now if we reload our application by
02:09:33.400 shaking it a bit and pressing reload you
02:09:36.119 can notice that we are automatically
02:09:37.920 brought to our home screen which means
02:09:40.480 that we no longer have to go through
02:09:42.520 that entire welcome onboarding and off
02:09:45.239 process that's great we have a clean
02:09:48.040 slate to continue working on our
02:09:50.599 homepage so let's clean it up a bit and
02:09:53.320 sure we could start adding more UI but
02:09:56.520 what's UI good for if we don't have it
02:09:59.520 stored as real data that we're showing
02:10:01.840 in our app we want to make our apps
02:10:03.920 truly functional and use databases to
02:10:06.400 store users data and then present it to
02:10:08.679 them in a nice looking UI for that
02:10:11.000 reason now is the perfect time to
02:10:13.000 implement a database and in this video
02:10:15.719 we won't be using any backend as a
02:10:17.880 service tools we'll be using a native
02:10:21.320 postgress database and will even write
02:10:24.159 real SQL queries we'll do that with neon
02:10:27.960 the database platform which I think is
02:10:29.840 the best one so far and even versell
02:10:32.639 builds their postgress databases on top
02:10:35.000 of them so if you haven't already
02:10:36.639 created an account at the start of the
02:10:38.280 video click the link in the description
02:10:40.480 to follow along and see exactly what I'm
02:10:42.559 seeing and create an account right now
02:10:45.360 once you do that you'll be redirected to
02:10:47.719 your neon dashboard let me show it to
02:10:50.079 you how simple it is to set it up in
02:10:53.119 this case we'll be using the neon driver
02:10:55.880 so let's copy this block of code and add
02:10:58.440 it to our code just to keep our code
02:11:00.239 clean I'll put it in a new file and this
02:11:02.880 time it has to be added to a special
02:11:05.159 file in Expo we have the possibility to
02:11:08.360 create APA routes does it sound familiar
02:11:11.760 it's because it's coming from nextjs so
02:11:14.840 we can create in parentheses an API
02:11:17.840 folder and then within it we can create
02:11:20.280 a new route for for our users's API so
02:11:23.559 let's say new file user Plus api. Ts
02:11:29.040 it's not dashes it's not square brackets
02:11:32.079 Expo uses pluses in between so user plus
02:11:36.040 API and here we can paste what we just
02:11:39.000 copied you'll quickly notice that we
02:11:40.760 don't have this package installed so
02:11:42.800 just copy it open up the second terminal
02:11:45.760 and run mpm install and install the neon
02:11:48.880 database serverless once you do that we
02:11:51.480 can store this database URL within our
02:11:53.920 environment variables so let's copy it
02:11:57.440 head over to
02:11:59.079 ourv and add it as a database undor URL
02:12:04.280 is equal to to the key that you just
02:12:06.400 copied you don't have to keep the string
02:12:08.960 signs so make sure to remove them now we
02:12:11.880 can go back in here and just use the
02:12:14.520 process. EnV right here so neon process.
02:12:19.599 EnV do
02:12:22.040 database uncore
02:12:24.840 URL and we might need to wrap it in a
02:12:27.760 template string because this needs to be
02:12:30.559 a string great and this exposes the SQL
02:12:34.440 neon querying function allowing us to
02:12:36.920 query anything we want from our database
02:12:39.320 we won't be querying it just here rather
02:12:41.880 we'll be using expose API routes
02:12:44.480 functionality that we can call from I
02:12:47.119 wanted to say front end but it's really
02:12:49.239 from mobile screens so let me show you
02:12:51.520 how that works the only thing you have
02:12:53.239 to do is export a new async function
02:12:57.719 declare whether it's post or get or
02:12:59.760 something else you get a request as the
02:13:02.559 first and only parameter and you open it
02:13:05.639 up in here you have a try and catch
02:13:07.719 block and you can do all the server
02:13:10.079 logic right here but let me explain this
02:13:12.599 by referring to the documentation as
02:13:14.280 well what are API routes they are
02:13:17.840 functions that are executed when a route
02:13:20.599 is matched
02:13:22.119 they can be used to handle sensitive
02:13:23.880 data such as API keys or Implement
02:13:26.520 custom server logic they're created by
02:13:29.079 creating files in the app directory with
02:13:31.079 the Plus api. Ts extension for example
02:13:34.800 the following route Handler is executed
02:13:37.079 when for/ Hello is matched to create an
02:13:40.599 API route you just need to export a new
02:13:43.239 function either say get or post and then
02:13:46.280 return a response. Json that's it
02:13:49.239 similar to nextjs and when it comes to
02:13:52.159 how we can use the neon serverless
02:13:54.520 driver well it's pretty simple you can
02:13:57.239 use raw SQL queries or use tools like
02:14:00.679 drizzle or something else to fetch data
02:14:03.599 in this application we'll be using
02:14:05.440 native SQL queries but if you want me to
02:14:08.079 use some kind of an orm like Prisma or
02:14:10.400 drizzle just let me know and this is it
02:14:13.079 take a look you just declare a new SQL
02:14:16.239 instance by declaring neon from neon
02:14:19.400 database serverless and you Prov provide
02:14:21.360 your database URL and you can
02:14:23.440 immediately start querying it pretty
02:14:26.199 cool right if you're not familiar with
02:14:28.360 SQL syntax I'll give you a phenomenal
02:14:31.199 resource you can refer to very soon but
02:14:34.040 with that in mind let's create our first
02:14:35.760 post request that would create a user we
02:14:37.880 can move this SQL neon thing right
02:14:40.480 within our post request because we have
02:14:42.360 to declare it every time we make a new
02:14:44.320 request then we can destructure some
02:14:46.760 things that we're passing into the
02:14:48.440 request such as the name email and clerk
02:14:51.800 ID and that's going to be equal to
02:14:54.559 await request. Json we're not passing
02:14:58.159 those yet but we'll pass it soon once we
02:15:00.840 try to make a call to this API route
02:15:03.639 next we're going to check if we don't
02:15:05.440 have access to the name or email or
02:15:08.119 clerk ID we're just going to return a
02:15:12.119 response.
02:15:14.000 Json where the first parameter is an
02:15:16.840 error where we can say missing required
02:15:20.159 fields and the second parameter is the
02:15:23.800 inid where we can send the status of 400
02:15:27.880 and it looks like I'm missing an equal
02:15:29.440 sign right here there we go now it
02:15:31.679 nicely structures it for me but if we do
02:15:34.079 have all of these fields then we can
02:15:36.440 form a new response that we're getting
02:15:38.800 from the database by saying const
02:15:41.320 response is equal to a wait SQL and now
02:15:46.679 here we dive into the magic of SQL
02:15:49.520 syntax the most most powerful way to
02:15:52.559 talk to a postgress or mySQL database
02:15:55.520 you just open up template strings you
02:15:58.159 expand it into multiple lines and you
02:16:00.559 can tell your database to do whatever
02:16:03.199 you want it to do the syntax and a bit
02:16:06.239 on the longer side as opposed to using
02:16:08.400 an orm but you have the full flexibility
02:16:12.119 so if you wanted to create a user no
02:16:14.559 longer is it just users. create or
02:16:17.480 something like that with SQL you can say
02:16:20.400 insert
02:16:21.719 into
02:16:23.639 users and then you can choose what you
02:16:25.920 want to insert into it in this case
02:16:28.440 it'll be name email and clerk ID and
02:16:34.160 then you can Define which values are you
02:16:36.920 passing into these fields that you are
02:16:40.280 inserting so the values will be a
02:16:43.760 template string of name a template
02:16:46.519 string of email and a template string of
02:16:49.959 clerk ID that's going to look something
02:16:52.200 like this and even though this SQL query
02:16:55.040 is quite simple soon enough we'll dive
02:16:58.000 into more complex SQL queries so I want
02:17:01.439 to share with you a course that I
02:17:03.558 created which will most likely be a paid
02:17:05.679 course later on but for now I will give
02:17:07.879 it to you for free so you can practice
02:17:09.959 your SQL knowledge before continuing
02:17:12.478 with the rest of this project if you
02:17:14.160 need it the course is called database
02:17:17.280 Mastery and it starts with pure SQL it
02:17:21.840 is currently available on our platform
02:17:24.040 and as I said soon enough it will become
02:17:26.080 paid but for now I can give you free
02:17:30.200 access there we dive into database
02:17:32.959 introductions introduction to SQL how to
02:17:36.080 create tables and insert data and Main
02:17:39.679 SQL parameters you can access it by
02:17:42.599 clicking the databases link down in the
02:17:44.439 description we'll revisit the course
02:17:46.679 later on once we start writing more
02:17:48.599 complex SQL queries for now we can can
02:17:51.000 proceed with the rest of this API call
02:17:53.959 we can return a new response and we can
02:17:57.398 say json.
02:17:59.160 stringify to which we can pass an object
02:18:01.879 of data which can be equal to the
02:18:04.439 response and as the second parameter to
02:18:06.638 the response we can pass a status of
02:18:09.920 2011 and I just noticed that all of this
02:18:12.760 should have been within a try so I have
02:18:14.920 to put this Tri block all the way above
02:18:18.558 there we go and then we finally have a
02:18:21.318 catch so if we have an error we want a
02:18:23.799 console. log. error and we can also
02:18:27.318 return a response. Json with the error
02:18:31.398 and a status code of
02:18:35.240 500 great and this is our Expo API route
02:18:41.240 inside of which we're calling serverless
02:18:43.359 neon database so how can we actually
02:18:46.679 trigger this API route well I've told
02:18:49.679 you a bit about that when reading the
02:18:51.760 documentation but let me show it to you
02:18:54.359 one thing I'll do first is go to the lib
02:18:57.959 and create a new file called fetch. TS
02:19:02.519 and inside of here I prepared for you a
02:19:05.318 helper function that will make it easier
02:19:07.359 for us to continually make fetch calls
02:19:10.280 without writing so much code so if you
02:19:13.120 go to the read me of this video go to
02:19:15.280 Snippets you'll be able to find a lib
02:19:17.799 fetch. TS file so copy it and P pasted
02:19:21.120 right here you'll notice it has two
02:19:23.679 functions one is a hook use fetch which
02:19:27.280 will allow us to Simply fetch the data
02:19:29.879 and it already has built-in loading and
02:19:32.200 error handling right here so when we
02:19:34.718 fetch the data we can make sure that
02:19:36.558 it's either there it's either loading or
02:19:39.478 it aired out and here's the part that
02:19:41.920 actually helps us make the request it is
02:19:45.000 just a regular function that accepts the
02:19:47.000 URL and the options and it just calls
02:19:50.000 the regular Fetch with that URL and with
02:19:53.040 those options if the response is not
02:19:55.160 okay we throw an error else we forward
02:19:58.120 the response from that API call so
02:20:00.800 instead of writing this entire code
02:20:03.040 every time now we can just call the
02:20:05.240 fetch API functionality so let's call it
02:20:08.600 within signup we can navigate over to
02:20:11.200 sign up and remember where we have a
02:20:13.680 to-do right here create a database user
02:20:17.240 this is exactly what we want to do right
02:20:19.120 now so we can say AIT
02:20:21.319 and we can call this fetch API to which
02:20:24.680 we can pass first of all the URL SL API
02:20:29.080 SL
02:20:30.160 user why is it that well because it is
02:20:34.280 API user plus API so it means it's an
02:20:37.800 API route and as the second parameter we
02:20:40.479 can provide all the options such as a
02:20:43.080 method of post and then a body which
02:20:46.120 will be Json stringify to which we can
02:20:49.200 pass an object of name is equal to
02:20:53.439 formname email is equal to form. mail
02:20:57.439 and clerk ID is equal to complete signup
02:21:01.399 doc created
02:21:04.200 user ID like this and now you know where
02:21:08.040 these are coming from name email and
02:21:09.960 clerk ID correspond to our API
02:21:15.040 route and they correspond to these
02:21:18.080 request Json data variables name name
02:21:20.920 email and clerk we make this call from
02:21:24.439 when we sign up the user we call our
02:21:26.479 Expo API routes we insert that data into
02:21:30.680 the neon DB database at the same time we
02:21:33.800 create and connect the clerk user and
02:21:36.560 set it to the session so if we have done
02:21:39.120 everything correctly we should be able
02:21:41.200 to go to the neon DV database and go to
02:21:45.280 the SQL editor inside of here we can run
02:21:48.200 some SQL commands and with this GitHub
02:21:51.280 repost Snippets I prepared for you one
02:21:53.479 command that we need to run it is under
02:21:56.280 create users table SQL so you can copy
02:22:00.280 it go back to the neon DB console paste
02:22:03.640 it right here and we can read it
02:22:05.319 together it says create table users it's
02:22:08.520 going to have an ID which is going to be
02:22:10.359 a Serial primary key with a name email
02:22:14.040 and clerk ID and we can run this it
02:22:17.000 looks like we got an error and if I run
02:22:19.160 it again it's it says statement executed
02:22:22.359 successfully it looks like there was an
02:22:24.319 issue with the c character in the clerk
02:22:26.520 ID so just delete it and type it again
02:22:29.240 and try to rerun it I think it should
02:22:31.439 work maybe GitHub MDX added some special
02:22:34.160 characters here either way the table has
02:22:37.080 been created and we can head over to
02:22:39.120 Branch tables which is a new feature on
02:22:41.479 neon
02:22:42.439 DB this is pretty cool because we can
02:22:44.800 immediately see the users table appear
02:22:47.439 which means that we are ready to test
02:22:49.040 everything out and alongside a new user
02:22:51.680 appearing on clerk now a new user should
02:22:54.520 appear on neon DB as well so going back
02:22:57.880 to Clerk's dashboard for one last time I
02:23:00.600 will delete this user because now as
02:23:03.560 soon as we create a new one hopefully it
02:23:05.920 will appear on both sides so let's
02:23:08.680 reload our application clerk session
02:23:11.240 died which is great because that means
02:23:13.439 that we have deleted our user and now
02:23:15.680 before we go ahead and create a new
02:23:17.240 account there's just one more thing we
02:23:18.920 have to do and that is within the app.
02:23:21.880 Json if we want to use expose server
02:23:24.720 functionalities we have to go under web
02:23:27.479 output and change this into server
02:23:30.800 that's going to enable us to do APA
02:23:32.640 routes and alongside that we also have
02:23:35.960 to add a settings object into plugins
02:23:39.200 right here for the Expo router and we
02:23:41.920 can do that by adding the origin and
02:23:44.720 here we can have any kind of a mock URL
02:23:47.120 for our server at least it can be a mock
02:23:49.319 URL for development purposes and in this
02:23:52.040 case we can do something like a string
02:23:54.560 of https col sl/ uber.com and since we
02:24:00.720 have expanded this Expo router with
02:24:02.319 additional options we have to wrap it in
02:24:04.439 an array so now we'll have an array
02:24:07.920 where the name of the plugin will be
02:24:09.439 Expo router and then we're showing the
02:24:11.680 options as the second parameter so
02:24:13.920 that's going to look something like this
02:24:16.720 I think we can even put it all in one
02:24:18.439 line so it makes more sense
02:24:21.200 there we go perfect and now that we have
02:24:25.040 added this URL we also have to add it to
02:24:28.120 our environment variables that's going
02:24:30.160 to look something like this go to
02:24:33.359 EnV call it Expo corpore server URL and
02:24:39.840 make it equal to to this URL that we
02:24:42.960 have right here I think we need to end
02:24:45.479 it with a forward slash so we can do
02:24:47.560 that here and here now we can close
02:24:51.640 these files open up the terminal stop it
02:24:54.760 from running and run MPX Expo start- C
02:24:59.760 to rerun our application with cache
02:25:02.720 cleared and you'll notice that now it'll
02:25:05.000 take a bit of a longer time to bundle
02:25:07.200 which is a good thing because it means
02:25:08.640 that our app now has more things within
02:25:10.920 it so let's wait until it bundles there
02:25:14.600 we go soon enough we'll remove this
02:25:16.240 clerk warning from the bottom and now we
02:25:18.960 can try to register one more more time
02:25:21.160 make sure to delete your existing clerk
02:25:23.200 account I'll enter my name and I'll also
02:25:27.880 enter my email and password and I'll
02:25:30.600 click sign up here we get our
02:25:33.120 verification code
02:25:36.760 86437 and we can verify our email there
02:25:40.080 we go verified browse home we got
02:25:43.840 redirected to home but that's nothing
02:25:45.880 new we also get a new clerk user but
02:25:48.920 that's also nothing new the most
02:25:50.920 important thing is that if you go to
02:25:52.880 your neon console and go to table check
02:25:55.840 out the users table and here our new
02:25:58.439 user will be created so soon enough
02:26:01.479 we'll be able to create additional
02:26:03.080 tables for writers and drivers and we
02:26:06.279 can make a connection between all of
02:26:08.080 that to store it in our database and
02:26:10.279 displayed within our app great work so
02:26:13.359 far moving forward we can finally start
02:26:16.359 creating some of the UI for our homepage
02:26:18.800 so let's navigate to our home and let's
02:26:21.920 Dive Right In to get started with
02:26:24.359 creating our homepage we can wrap
02:26:26.640 everything in a safe area View and give
02:26:28.960 it a class name equal to BG General 500
02:26:33.200 that's going to give it a nice looking
02:26:34.720 grayish background now for the first
02:26:36.880 time in this course we'll use something
02:26:39.240 known as a flat list coming from react
02:26:42.720 native a flat list in react native is a
02:26:46.399 performant interface for rendering basic
02:26:49.080 flat lists supporting things like
02:26:51.760 horizontal mode header support footer
02:26:54.479 separators pull to refresh scroll
02:26:56.640 loadings it's basically a UL an
02:26:59.279 unordered list but with some additional
02:27:01.840 functionalities for mobile devices where
02:27:04.000 you can pull to refresh you can scroll
02:27:06.279 horizontally and they all nicely appear
02:27:09.040 it is also completely customizable so
02:27:11.160 you can choose exactly how each one of
02:27:13.200 these elements looks like but the gist
02:27:15.720 is you get some data and then you decide
02:27:18.560 how each one of these list items looks
02:27:20.600 like and finally you render it within a
02:27:23.040 flat list I'll show all of that to you
02:27:25.399 right now so for the flat list to work
02:27:28.200 we of course have to have some data so
02:27:30.479 we can have a data object and for now I
02:27:32.920 can make that an array of different
02:27:35.800 rides so how will each one of our rides
02:27:38.840 look like well it's going to have an
02:27:41.160 origin address a destination address
02:27:44.160 different map information a screenshot
02:27:46.279 of the map driver first name last name
02:27:48.880 and more so we could go ahead and create
02:27:51.359 some kind of a mock list of rides right
02:27:53.880 here and that's exactly what I've done
02:27:56.200 under these code Snippets just to make
02:27:58.319 your life a bit easier so if you scroll
02:28:00.560 all the way to the bottom you can see
02:28:02.560 that we have mock rides and this is
02:28:05.560 simply an array with a couple of objects
02:28:08.120 that allow us to mock four different
02:28:10.359 rides just so we can create their UI
02:28:12.560 first and then implement the
02:28:13.840 functionality later so let's go ahead
02:28:16.560 and copy this code snippet and we can
02:28:19.399 put it right here above our page const
02:28:22.680 recent rides is equal to and then we can
02:28:26.160 paste this entire array right here what
02:28:29.520 we can do is just collapse it that way
02:28:31.439 we don't have to keep looking at this
02:28:32.840 huge array but we can now use it within
02:28:35.200 the data so let's just say data is equal
02:28:38.439 to recent rides I think I misspelled it
02:28:42.359 there we go recent rides and we can
02:28:45.080 slice only the first five characters so
02:28:48.359 from zero to five
02:28:50.880 question mark. slice just to make sure
02:28:52.800 that we actually do have them now that
02:28:55.319 we have the data we also have to have
02:28:57.279 something else to figure out how we will
02:28:59.479 render each ride or should I say how we
02:29:02.359 should render each item within the list
02:29:05.120 and for that we can use a prop called
02:29:07.920 render item that allows us to specify
02:29:11.720 how each one of these items will be
02:29:14.000 rendered so first make sure to create a
02:29:16.880 callback function that looks like this
02:29:19.160 you can D structure the item data like
02:29:21.680 this and then for each one we can return
02:29:24.760 a ride card which is a self closing
02:29:28.520 component to which we can pass the
02:29:30.680 entire ride which is equal to the item
02:29:33.600 of course this ride card is another
02:29:35.800 custom component that we have to create
02:29:38.800 so let's go to our components folder and
02:29:42.040 create a new component called ride card.
02:29:47.279 TSX here we can of course create a new
02:29:50.040 con ride card and we can export default
02:29:54.160 that ride
02:29:55.760 card and you already know that it's
02:29:57.920 going to accept only one prop so we can
02:29:59.880 destructure the prop of ride which is
02:30:02.560 going to be of a type ride is of a type
02:30:06.200 ride coming from the types and here for
02:30:09.120 now we can just return a view and within
02:30:11.680 the view for now we can render a text
02:30:14.640 and that text can render the ride.
02:30:17.920 driver. first uncore name just so we can
02:30:21.080 see who is the driver and don't forget
02:30:23.240 to import The View as well as the text
02:30:27.399 from react native there we go now we can
02:30:30.880 go back to home and we can import the
02:30:33.600 right card coming from components right
02:30:36.520 card and right at the top I'm not sure
02:30:39.040 if you can see it as it's very very
02:30:40.880 small we have four different names of
02:30:43.120 writers we can make that a bit larger by
02:30:45.600 giving it a class name equal to text- 3
02:30:49.439 XL
02:30:51.240 and there we go we can see David James
02:30:53.160 James and Michael that is great so now
02:30:56.640 our flat list has the data that it wants
02:30:59.680 to render and it also has a render item
02:31:02.960 function that tells it how each piece of
02:31:05.479 data should look like so now we can go
02:31:07.960 into the right card and start developing
02:31:10.439 it first things first we'll have to
02:31:12.439 mention ride. driver Ride die
02:31:15.560 geolocation Ride die destination many
02:31:18.160 many times as we have too many any
02:31:20.120 properties on this ride so what we could
02:31:22.840 do is just destructure those properties
02:31:25.160 at the top so we don't have to repeat
02:31:26.960 ourselves you do that by saying ride and
02:31:29.760 then you destructure it within a new
02:31:31.359 object we can destructure something like
02:31:33.800 a destination longitude we can
02:31:36.399 destructure the destination latitude as
02:31:39.359 well let's also destructure the origin
02:31:42.600 address we can destructure the
02:31:44.880 destination
02:31:46.640 address I think we'll need a created app
02:31:50.160 so when was the ride created at as well
02:31:52.800 as the ride time how much time does it
02:31:55.120 take we can then destructure the driver
02:31:58.240 and we can destructure the payment
02:32:00.040 uncore status I think this is going to
02:32:02.240 be enough for now so instead of saying
02:32:04.560 ride. driver now we can just say driver.
02:32:07.640 first name great so let's start turning
02:32:10.640 this ugly list of names into something
02:32:13.080 that looks like this each one of the
02:32:14.960 cards will have the pickup location
02:32:17.040 destination location a photo of that
02:32:19.920 entire path and many more pieces of
02:32:22.200 information quite exciting and a bit
02:32:24.200 easier than what we have done so far in
02:32:26.200 our application this is mainly just the
02:32:28.200 UI so let's give this view some class
02:32:30.359 names I'll give it a class name of flex
02:32:33.800 Flex D row items Das Center justify Das
02:32:38.120 Center BG of white to differentiate it
02:32:41.160 from that gray background rounded dlg to
02:32:44.880 give it that organic look Shadow
02:32:48.040 DSM Shadow Das neutral
02:32:52.760 -300 margin bottom of three so now this
02:32:56.399 will create this card like feel you can
02:32:59.040 see it on the right side or on your
02:33:00.840 phone and you can see how nice this list
02:33:02.800 behaves on your phone next we can move
02:33:05.080 this text a bit below and we can create
02:33:07.399 a second view right here this view will
02:33:10.800 have a class name equal to flex Flex D
02:33:14.880 row items Das Center justify Dash
02:33:18.479 between and a padding of three within it
02:33:22.319 we'll have one more view which we'll use
02:33:24.840 to enclose the image so we can give it a
02:33:27.439 class name of flex Flex D row items Das
02:33:32.000 Center and justify Dash
02:33:35.439 between within it we can render a react
02:33:38.600 native image so import it and give it a
02:33:43.439 source this time we'll refer to the
02:33:45.840 source by the URI which is going to be a
02:33:49.359 template string of
02:33:53.800 https SL maps. gapy and this go apify is
02:33:59.760 going to be such a cool API which will
02:34:02.080 use to transform the coordinates into an
02:34:05.200 image where it shows a map and the start
02:34:08.240 and two locations with the entire path
02:34:10.680 outlined within it so we'll have to head
02:34:12.880 over to gy.com as you can see it is
02:34:15.880 completely free for up to 3,000 credits
02:34:18.319 per day which is more than enough enough
02:34:20.359 and we can click get started the only
02:34:22.680 thing we have to do is basically create
02:34:24.399 an account which is free and no credit
02:34:26.560 card is required so simply continue with
02:34:29.960 Google create a project I'll name it JSM
02:34:34.600 ride choose the API I believe we're
02:34:37.439 using the static map API and it's going
02:34:40.479 to give you an API key which we can
02:34:42.439 store into our envs what you also get is
02:34:45.240 a complete API URL example so let's copy
02:34:48.840 that and let let's paste it right here
02:34:50.920 instead of this URI you can see it is
02:34:53.200 very very long right now but we can cut
02:34:56.120 it right here after lawn and lat as
02:34:59.640 we'll be providing our own longitude and
02:35:02.399 latitude and we don't need any of these
02:35:04.880 additional properties so we can remove
02:35:07.200 that and we also need to grab our API
02:35:09.359 key so copy it head over to our
02:35:13.040 envs and add a new one Expo public go
02:35:18.240 apy API I key is equal to this number
02:35:22.279 right here now if we go back we can
02:35:24.600 structure this better by saying maps.
02:35:27.399 gy.com V1 static map style is osm bright
02:35:32.720 so we don't need this smooth width is
02:35:35.319 600 height is 400 Center lawn lad and
02:35:40.600 now we can add a column and then we can
02:35:43.479 add a dynamic property of destination
02:35:47.319 longitude comma and then we can do
02:35:50.240 another property of destination latitude
02:35:53.520 we can add the end sign outside and say
02:35:58.000 Zoom is equal to 14 and finally we have
02:36:01.720 to provide the API key which is equal to
02:36:05.040 process. EnV
02:36:07.680 dot Expo
02:36:09.920 undoru uncore
02:36:13.120 gapore API uncore key make sure that
02:36:16.760 everything is spelled properly right
02:36:18.560 here and that this Expo public key is
02:36:21.319 the same one that you have right here in
02:36:23.800 your envs we can also provide this image
02:36:26.640 with a class name of a w of 80 pixels h
02:36:33.920 of 90
02:36:36.120 pixels rounded dlg still not there so
02:36:40.880 maybe I can reload my
02:36:43.120 application sometimes that helps once we
02:36:45.319 update our envs and there we go the maps
02:36:48.479 are appearing you can see we have David
02:36:51.040 James and Michael and even though
02:36:53.880 they're very very small right now it's
02:36:55.960 going to be so interesting to see once
02:36:57.800 we put it in a better looking UI of
02:37:00.000 course I'm talking about something like
02:37:02.000 this so now let's continue with the rest
02:37:04.279 of the UI we can go below this image and
02:37:07.600 still within the same view we can create
02:37:10.000 another
02:37:11.120 view with a class name equal to flex
02:37:17.160 flex-all margin X of five
02:37:20.200 Gap y of five and flex of one within it
02:37:25.200 we'll have another view to contain our
02:37:27.479 icon that'll have a class name equal to
02:37:32.120 flex Flex D row items Das Center and the
02:37:36.960 Gap X off
02:37:39.640 two and within it we can render an image
02:37:43.319 with a source equal to icons which we
02:37:46.359 need to import do two so which
02:37:50.160 destination are we going to with a class
02:37:52.560 name of w of 5 which is about 20 pixels
02:37:56.800 and an H of five there we go now we can
02:37:59.240 see this two icon and below it we can
02:38:02.120 render a text that'll spell out the
02:38:05.479 origin address so now we can give it a
02:38:08.640 class name equal to text- MD and font
02:38:13.479 Das Jakarta medium there we go and now
02:38:17.240 we can duplicate this view one more time
02:38:20.080 below for the from
02:38:23.000 destination or no should they say to
02:38:25.080 destination this was the origin address
02:38:27.920 so in the second one we can say icons.
02:38:30.600 point and I can change it to
02:38:34.080 destination address and to both of these
02:38:36.920 texts we need to add a special property
02:38:39.960 of number of lines is equal to one
02:38:44.040 because we don't want it to go over one
02:38:46.040 line there we go now we can see some
02:38:48.359 different locations at this point it's
02:38:50.920 safe to remove this driver first name as
02:38:53.200 it's messing with our view so if we do
02:38:55.479 that it's looking great now we can go
02:38:58.920 below this text and Below one two three
02:39:02.479 more views so only two are left at the
02:39:05.000 bottom there we can create a view that
02:39:07.479 will wrap the bottom part of our
02:39:09.960 card this view will have a class name
02:39:13.080 equal to flex
02:39:15.479 flex-all w- full margin top of five
02:39:19.880 BG general of 500 rounded
02:39:24.200 dlg padding of three items Das start and
02:39:28.960 justify Dash center for the time being
02:39:32.120 this messed up our UI but don't you
02:39:34.120 worry about that we can add another view
02:39:36.920 right here with a class name equal to
02:39:40.080 flex Flex D row items Das Center w- full
02:39:46.000 justify Dash
02:39:47.560 between notice times we're playing with
02:39:50.439 flex properties and margin bottom of
02:39:53.479 five within it we can render a piece of
02:39:56.720 text that'll just say date and
02:40:00.720 time and we can give it a class name of
02:40:04.520 text- MD font D Jakarta medium and text-
02:40:11.359 gray- 500 right below we can duplicate
02:40:15.479 this same
02:40:17.720 text and instead of in of saying date
02:40:20.040 and time we can render real date and
02:40:22.399 time by saying format date which we can
02:40:25.920 import and give it a created add
02:40:29.120 property then we can do a comma and once
02:40:32.160 again call the format date function and
02:40:36.160 this time pass it the ride time and this
02:40:39.600 format date is one of the utility
02:40:41.600 functions that we can create so let's
02:40:44.520 quickly head over to our lib and let's
02:40:47.560 create a new file called
02:40:50.640 U.S this stands for utility functions
02:40:54.240 one of these functions can be export
02:40:56.720 const format date that takes in a date
02:41:01.439 string which is a string and returns a
02:41:05.279 string so that's going to look something
02:41:07.560 like this this is the perfect type of
02:41:10.560 function that you would use chat GPT for
02:41:13.800 it is pretty simple not that complex and
02:41:16.920 it just gets the job done so if you go
02:41:19.439 to GitHub Snippets you'll see that I
02:41:21.240 provided you with this lib utils file
02:41:24.200 which you can copy and override this
02:41:27.319 utils you'll notice that here we have
02:41:29.840 this format date that basically takes a
02:41:32.600 date turns it into a new date gets the
02:41:35.880 month names and then returns it in a
02:41:38.319 nice human readable format we also have
02:41:41.120 a couple of other functions right here
02:41:43.439 all created by Chad GPT now we need to
02:41:46.560 import this format date function from
02:41:49.279 from
02:41:50.640 utils so let's do that at the top format
02:41:54.120 date at SL SL
02:41:57.880 utils and we cannot see that yet right
02:42:00.439 now because the layout is broken I think
02:42:03.000 everything is going in a row instead of
02:42:04.800 a column so let me scroll up and let's
02:42:08.600 look into some of these views right here
02:42:11.640 oh yeah this second view should have
02:42:13.880 been a
02:42:16.120 flex-all as in column item start justify
02:42:20.200 Center
02:42:21.920 here and a padding of three if you do
02:42:25.319 this check this out now everything folds
02:42:28.520 nicely and this date and time are also
02:42:31.080 appearing right here with the correct
02:42:33.080 information oh no it's taking the date
02:42:35.319 from the right time this right here
02:42:37.040 should have been a format time
02:42:40.200 function and we have to import it from
02:42:42.439 lib utils there we go 12th of August
02:42:46.000 2024 8 hours this ride took eight hours
02:42:50.560 interesting now let's go one text and
02:42:53.720 one view down and create a new view
02:42:56.560 inside of which will show the driver
02:42:58.800 information so let's create its
02:43:00.840 container by giving it a class name of
02:43:03.319 flex
02:43:05.160 flex-r items Das Center w-o for full
02:43:10.040 width justify Das between to stay
02:43:13.200 consistent with the layout and margin
02:43:15.240 bottom of five to divide it from the
02:43:17.359 next section within here here we can
02:43:19.640 create a
02:43:21.040 text that text will say driver so let's
02:43:24.800 save it there we go now you can see the
02:43:26.800 driver and if you pay close attention
02:43:29.080 and if I zoom it out just a bit you'll
02:43:31.279 notice that this view right here is
02:43:33.439 exactly the same as this view so what we
02:43:35.960 can do is just duplicate this view
02:43:39.240 talking about the date and
02:43:41.279 time and put it right below next we can
02:43:45.279 change the date and time to driver and
02:43:48.040 we can change the information about the
02:43:49.840 date and time to driver. first name and
02:43:55.720 driver. last
02:43:57.760 name and take a look that looks great we
02:44:01.240 can duplicate it a few more times I'll
02:44:03.680 do it once more for now and this time
02:44:06.840 we'll talk about the car seats so how
02:44:10.200 many seats does this driver's car have
02:44:13.560 so we can get to that by rendering the
02:44:16.040 driver. carore seats
02:44:19.880 there we go that looks great some have
02:44:21.960 five some have four and finally we can
02:44:24.960 duplicate it once more to talk about the
02:44:27.960 payment so right here we can say
02:44:31.680 payment status and we can render a
02:44:34.840 payment status you can see that it all
02:44:37.240 says paid right now but we can change
02:44:40.120 the class names if it's paid to be green
02:44:42.520 and if it's not paid to be red so let's
02:44:45.479 turn this class name into a dynamic
02:44:47.479 template string and we can say if
02:44:50.880 payment status is triple equal to paid
02:44:54.520 then we can add an additional style of
02:44:56.319 text- green 500 else we can add a text
02:45:00.120 to Red
02:45:02.160 500 let's make sure to close this
02:45:04.880 properly we start with a question mark
02:45:07.960 end it here and close it right here
02:45:12.640 there we go this is
02:45:14.640 good now we can see that it all says
02:45:17.439 green we can also cap capitalize it so
02:45:20.200 here we can add capitalize so the paid
02:45:23.600 is capitalized with letter P you can see
02:45:26.960 how nice this form is like we can move
02:45:29.000 it up and down we can scroll it it is
02:45:31.720 absolutely amazing and with that we have
02:45:34.600 just developed our ride card it is
02:45:37.520 looking great so let's go back to home
02:45:41.120 and now that we have this ride card I
02:45:43.880 can show you the other properties of the
02:45:46.120 flat list that allow us to further
02:45:48.439 modify the look of that list such as a
02:45:51.880 class name where we can provide it a
02:45:54.240 padding X of five just to create some
02:45:56.600 more space there we go that's nice we
02:45:59.319 can also add a keyboard should persist
02:46:03.840 Taps and here we can say handled so now
02:46:07.279 if you tap on it the tabs should persist
02:46:10.680 this is preferred with flat lists we can
02:46:13.439 also add a Content container
02:46:17.279 style which can be a a padding bottom of
02:46:21.479 100 so now we'll have a bit more padding
02:46:23.680 at the bottom so we have space for our
02:46:26.080 bottom navigation now here's another
02:46:28.279 pretty cool thing this flat list
02:46:31.240 automatically allows you to Define how
02:46:33.720 an empty list component should look like
02:46:36.640 you just create a callback function and
02:46:39.080 return a new view that defines what's
02:46:42.120 going to happen if it is empty so let me
02:46:46.160 create a text first and say something
02:46:49.560 like empty of course we have to import
02:46:52.040 The View and the text at the top coming
02:46:54.279 from react
02:46:58.680 native and now if instead of these
02:47:01.479 recent rides I render an empty array you
02:47:05.160 can see empty at the top that means that
02:47:07.560 it gives us the possibility to style it
02:47:09.960 somehow differently so let's do just
02:47:12.800 that we can give this view a class name
02:47:16.000 equal to flex flex-all
02:47:19.160 items Das Center and justify Das
02:47:22.640 Center next we need to check whether
02:47:24.960 we're currently loading or not it is
02:47:27.800 highly likely that sometimes we might be
02:47:29.880 loading so that's the reason why we
02:47:31.680 don't have any elements so for now I'll
02:47:34.120 just create a mock loading property and
02:47:37.240 set it to false later on this will come
02:47:39.600 from real Dynamic data So within this
02:47:42.200 view we can check if we're not
02:47:46.439 loading then we can render an empty
02:47:49.520 react fragment within which we'll have
02:47:51.960 an image that's another react native
02:47:53.920 component we have to
02:47:55.479 import and that image will have a source
02:47:58.800 equal to images make sure to import that
02:48:02.359 do no result if we save this it's going
02:48:05.399 to break because we have to have a
02:48:07.600 second part of the tary operator so if
02:48:10.040 we are loading for now we can just show
02:48:12.760 a
02:48:14.240 text that says
02:48:17.439 loading there we go now this is a huge
02:48:20.439 no results image so let's style it a bit
02:48:23.200 by giving it a class name of w40
02:48:27.319 h40 let's also give it an Al tag of no
02:48:30.880 recent rides
02:48:33.200 found and let's give it a resize mode of
02:48:37.800 contain there we go we can also give it
02:48:41.479 a piece of text right below it's going
02:48:44.279 to have a class name of text- smm and
02:48:47.920 it'll say no recent rides found there we
02:48:52.200 go as simple as that now if we are
02:48:57.000 loading we can show something else not
02:49:00.080 just a boring empty loader we can render
02:49:03.359 an activity indicator and that is coming
02:49:06.600 directly from react native it's going to
02:49:09.680 be a self-closing component called
02:49:12.880 activity
02:49:14.760 indicator and we can give it a size is
02:49:17.399 equal to small and a color of hash
02:49:22.640 0000 there we go so now you can see a
02:49:24.960 very small activity indicator while it
02:49:27.439 is loading great let's collab this list
02:49:31.160 empty component and we can now bring
02:49:33.560 back the real data because we don't want
02:49:35.279 to be looking at an empty list and this
02:49:37.279 flat list is so versatile as you can see
02:49:40.160 we just defined how it would look empty
02:49:42.800 without using a tary operator on the
02:49:44.680 entire list they just provided a handy
02:49:47.160 prop another thing that the flat list
02:49:49.399 component provides is the list header
02:49:51.720 component allowing you to Define how a
02:49:54.120 header should look like let's make it
02:49:56.520 into a react fragment that's going to
02:49:58.960 render a view this view will have a
02:50:01.600 class name all Flex Flex Das row items
02:50:06.200 Das Center justify Dash between and
02:50:10.080 margin y of five within it we can render
02:50:13.080 a piece of text that says welcome and
02:50:17.000 then we can render the user question
02:50:18.960 mark. first name and we can even choose
02:50:22.200 to add a wave
02:50:24.359 Emoji you can go to Google and quickly
02:50:27.279 copy it welcome and now we have to get
02:50:30.000 the user's first name let's see where
02:50:32.560 this user is coming from going to the
02:50:35.479 top and collapsing the recent rides we
02:50:37.880 can see that the user is coming from the
02:50:39.800 hook of use user which is coming from
02:50:42.200 clerk Expo let's console. log. user to
02:50:45.160 see what data do we get in there there
02:50:47.800 we go take a look look at this there's a
02:50:50.319 lot of data but in this case the first
02:50:52.920 name and the full name are false I
02:50:56.000 believe that's because we haven't used
02:50:57.880 the Google authentication so far we have
02:51:00.520 just used the email o so maybe if we
02:51:03.920 don't have the first name we can render
02:51:06.920 something else maybe user question mark.
02:51:10.479 email addresses zero I believe that
02:51:13.040 should be the email address no it's
02:51:15.239 email address is zero. email address
02:51:18.920 there we go so now it says welcome
02:51:21.080 contact adjs mastery. proo it'll look
02:51:23.880 better once we authenticate using Google
02:51:26.319 let's style this text just a bit by
02:51:28.359 giving it a class name equal to text-
02:51:31.800 2XL and font D jaarda extra bold okay so
02:51:37.040 maybe one Excel will be good now below
02:51:39.840 that text we can also render a touchable
02:51:43.680 opacity what is that that's a button so
02:51:47.080 what will this touchable opacity do well
02:51:49.680 it'll render an
02:51:51.120 image that has a source equal to
02:51:55.560 icons.
02:51:57.080 out and it'll have a class name of W4
02:52:00.920 and
02:52:01.800 H4 so that is this little button at the
02:52:04.319 top right that allows us to log out so
02:52:07.520 let's create a function right here
02:52:11.080 const handle sign out which is going to
02:52:15.359 be equal to an arrow function and now we
02:52:18.600 can add it as an onpress functionality
02:52:21.000 on this touchable opacity so on press we
02:52:24.560 can handle sign out and we can also give
02:52:27.520 it some additional class names such as
02:52:30.840 justify Das
02:52:32.600 center items Das Center W of 10 h of
02:52:38.520 10 rounded Das full and BG of
02:52:42.800 wide there we go so now it looks great
02:52:46.040 and I don't quite like that we have the
02:52:47.720 email address here so what do you say
02:52:50.520 that we split it and we split it by the
02:52:55.439 add sign because most people have their
02:52:57.479 name in the first place and then we take
02:53:00.160 the first part of that email right here
02:53:02.520 by doing this so now it's going to say
02:53:04.640 welcome contact because I signed up with
02:53:06.960 contact at JS Mastery Pro but for you
02:53:09.600 most likely this will be your name or
02:53:11.720 let me know in the comments down below
02:53:13.080 if it's something else we can also add
02:53:15.920 the capitalize right here so that now it
02:53:18.880 says welcome we can add a comma right
02:53:22.040 here contact much better or it's going
02:53:25.640 to be a first name once we do Google off
02:53:28.600 great and now I think we can make it a
02:53:30.359 bit bigger with 2XL moving down below
02:53:33.720 the touchable opacity and Below one more
02:53:36.120 view we can render one of the most
02:53:38.479 important parts of our application and
02:53:40.760 that's going to be a
02:53:43.000 Google text input that's going to be a
02:53:46.319 custom input which we'll create so let's
02:53:49.200 turn it into a component by going over
02:53:51.760 to the components folder and creating a
02:53:54.359 new Google text input. TSX you know the
02:53:59.800 drill it is const Google text
02:54:04.520 input which is equal
02:54:06.600 to an immediate returning function where
02:54:09.760 we export default Google text
02:54:13.399 input it's going to return a view and
02:54:16.239 within it we can have a text
02:54:19.000 that'll say search make sure to import
02:54:22.160 The View and the text from react
02:54:25.359 native so going back we can now render
02:54:28.040 this as a self-closing
02:54:30.880 component of course don't forget to
02:54:33.200 import it from Google text input and to
02:54:36.920 it we can pass some props such as icon
02:54:39.920 is equal to icons.
02:54:42.640 search we can pass it some container
02:54:45.640 style equal to BG White
02:54:49.000 Shadow MD and
02:54:51.640 Shadow
02:54:54.479 neutral
02:54:56.200 300 and we can provide a handle press so
02:54:59.439 what happens once we press it we want to
02:55:01.560 handle destination press and this is yet
02:55:05.760 another function which we can Define
02:55:08.120 right here at the top for which soon
02:55:10.040 enough we'll add the logic now we can
02:55:12.800 head into the Google text input to
02:55:14.840 accept all of these great props it's
02:55:17.160 going to be an icon
02:55:19.760 maybe later on we'll pass an initial
02:55:21.840 location as well it's going to be a
02:55:24.640 container style which we defined later
02:55:27.359 on we might want to change the input
02:55:29.960 background color so we can say text
02:55:32.560 input background color and finally the
02:55:36.680 handle
02:55:38.399 press and all of these will be of a type
02:55:41.720 Google Input props coming from types so
02:55:45.640 now we can style this view a bit by
02:55:47.359 giving it a class name of a template
02:55:49.560 string of flex Flex D row items Das
02:55:54.640 Center justify Das Center relative Z50
02:56:00.279 so it appears on top of other elements
02:56:02.880 rounded Das Excel and finally we can
02:56:06.040 spread all of the other container
02:56:08.479 Styles so now we can see the search
02:56:10.640 appear right here at the top and for now
02:56:13.359 we can give it just something like
02:56:14.720 margin bottom of five there we go so now
02:56:18.479 we can see a nice looking search or at
02:56:20.439 least what is soon going to become a
02:56:22.880 beautiful Google input from which you'll
02:56:25.600 be able to select all of the different
02:56:27.479 places in the world starting from the
02:56:29.720 places near you so it's going to be very
02:56:31.640 smart before we go ahead and create that
02:56:34.080 Google text input let's go a bit below
02:56:37.040 and create another react fragment inside
02:56:39.840 of which we can render a text that tells
02:56:42.560 us our current location so we can say
02:56:45.040 text your current location we can give
02:56:48.760 it a class name equal to text- excl font
02:56:53.760 djakarta bold and margin top of five as
02:56:57.439 well as a margin bottom of three below
02:56:59.720 it we can render a view that'll have a
02:57:03.239 class name equal to
02:57:05.239 flex Flex Das row items Das
02:57:09.720 Center BG of transparent and H of 300
02:57:14.279 pixels and within it we'll render maybe
02:57:16.680 the most important component of our
02:57:18.800 application and that is the map so let's
02:57:21.880 create a new file called map.
02:57:24.840 TSX you know the drill create a new map
02:57:29.239 which is equal to an arrow function
02:57:31.439 where we can export default that map and
02:57:34.560 for now we can just return a view so
02:57:37.239 let's say return a view coming from
02:57:40.000 react native and a text within it
02:57:42.800 that'll say map
02:57:45.399 beautiful so now we can render this map
02:57:48.000 right right here within it coming from
02:57:49.960 components map and you can see how it
02:57:52.040 says map right here so now we're getting
02:57:54.720 much much closer to this view right here
02:57:56.920 where it says welcome John we have a
02:57:59.080 sign out button a beautiful Google
02:58:01.600 autocomplete search your current
02:58:03.840 location and then the recent rides at
02:58:05.960 the bottom so while we're here let's go
02:58:08.760 below this react fragment and create one
02:58:11.640 final text which is going to be similar
02:58:14.080 to this your current location text so
02:58:16.200 let's copy it and it'll say
02:58:19.600 recent
02:58:21.600 rides there we go so we have recent
02:58:23.920 rides your current location and then
02:58:26.279 finally a greatl looking search input so
02:58:29.279 now we only have one question and that
02:58:31.439 is what do you want to do first since
02:58:34.319 you cannot talk to me right now and I
02:58:36.040 can only imagine what you're saying I'll
02:58:38.080 have to make a decision and I really
02:58:40.479 don't like this big hole in the center
02:58:43.040 of our application right now so let's do
02:58:45.800 the map first and then we can focus on
02:58:47.760 the Google autocomplete later on so I'll
02:58:50.479 close the home and the Google text input
02:58:53.680 leaving us with the map but of course
02:58:55.680 for that we'll have to add a lot of
02:58:57.439 functionalities integrating with
02:58:59.359 Google's apis to integrate Google's
02:59:02.279 Services you'll have to head over to
02:59:04.600 Google Cloud console that is console.
02:59:07.399 cloud.google.com
02:59:09.080 next you can create a new project so
02:59:12.080 just click new project at the top right
02:59:14.239 I'll call it JSM
02:59:16.800 dride and I'll put it under no
02:59:19.520 organizations choose where I want to put
02:59:21.520 it it looks like I have to choose an
02:59:24.000 organization and then click create I
02:59:26.800 think it takes about a minute for your
02:59:28.319 project to be created there we go it was
02:59:31.239 actually 5 Seconds let's select our
02:59:33.800 project and head over to apis and
02:59:36.680 services next click enable apis and
02:59:40.000 services and search for apis and
02:59:42.840 services we can search for places and
02:59:46.200 select the places API new new there we
02:59:49.600 go this is the one they even refresh the
02:59:51.640 icon and click enable it looks like the
02:59:55.120 placees API new requires a project with
02:59:57.319 a building account so let me try to
03:00:00.000 cancel this and go back and search for
03:00:03.120 just places API and choose this one it
03:00:07.239 seems like we can enable the places API
03:00:09.720 the original one not the new one without
03:00:12.439 entering the credit card details so just
03:00:14.279 go ahead and click enable here it might
03:00:17.200 ask you something else later on but then
03:00:19.160 just exit and it will be enabled let's
03:00:22.479 go back and let's enable the second API
03:00:24.560 we'll need which is the directions
03:00:27.439 API go to it and click enable great it
03:00:32.279 looks like it's enabling it right away
03:00:34.399 it did redirect me to this page where we
03:00:36.560 need to verify our card to get started
03:00:39.080 which is totally okay because they're
03:00:40.439 not going to charge us anything but for
03:00:42.520 now I'll try to exit out of that and
03:00:44.399 just go a page back hopefully we can do
03:00:46.800 it without entering any details but if
03:00:48.840 we need to we'll have to do that later
03:00:50.560 on now let's head over to our
03:00:53.560 dashboard and go to enabled apis and
03:00:56.960 services then click credentials and then
03:01:00.439 press create credentials and choose API
03:01:03.680 key there we go we just got our API key
03:01:06.960 so let's copy it head over to our EnV
03:01:11.120 and type Expo public Google API key and
03:01:18.399 paste the key that you just copied I
03:01:20.399 think this should be enough and it
03:01:22.000 should work if Google doesn't mess with
03:01:24.040 us further we'll see if it will work
03:01:26.200 soon enough now we can go back to the
03:01:28.680 map to start implementing it we'll have
03:01:31.080 to install two new packages so let's
03:01:34.720 type mpm install
03:01:38.479 react-native-maps as well as
03:01:42.160 react-native-maps DD directions and
03:01:45.200 press
03:01:46.200 enter as soon as they in sold we'll be
03:01:49.279 able to use a map view sounds convenient
03:01:52.720 right map view coming from react native
03:01:56.479 Maps next we can start passing it props
03:01:59.560 that'll make it work so let's give it a
03:02:02.760 provider prop which is equal to provider
03:02:06.279 uncore default which is coming from
03:02:09.000 react native Maps that's going to be
03:02:11.040 Google most likely next we can give it a
03:02:14.239 class name equal to w-o for full width
03:02:18.439 H full so it takes the full height of
03:02:20.800 the container and round it Dash to excel
03:02:23.800 to make the borders a bit
03:02:26.720 organic and would you look at that the
03:02:29.560 map is here currently for me it shows
03:02:33.080 the country of Croatia with its very
03:02:35.800 interesting shape as this is where I'm
03:02:38.120 based at for you it's going to show
03:02:40.840 something else and you can see how fluid
03:02:43.200 it is I can zoom in zoom out and move it
03:02:46.800 around and it just works so seamlessly
03:02:50.560 great so with that in mind let's
03:02:52.800 continue modifying this map to make it
03:02:54.880 soothe the needs of our application I'll
03:02:57.520 give it a tint color equal to black as
03:03:01.040 well as a map type equal to muted
03:03:04.920 standard this will make it just a bit
03:03:07.080 muted so it fits the theme of our
03:03:09.439 application better and it allows us to
03:03:12.160 better show the routes from and to
03:03:14.760 different locations in this case we're
03:03:16.960 not interested in seeing all the rivers
03:03:18.920 and lakes and mountains what we're
03:03:21.000 interested in are the roads let's also
03:03:23.960 turn off show points of interest by
03:03:26.840 saying show points of interest is equal
03:03:29.279 to
03:03:30.600 false now how can we change the initial
03:03:33.399 region that it points to well here we
03:03:36.319 can say const region is equal to an
03:03:39.239 object where we need to provide
03:03:41.200 different things such as the latitude
03:03:43.479 longitude and more very soon we'll
03:03:46.399 calculate this dynamically
03:03:48.279 so we'll be able to pass it as initial
03:03:51.920 region is equal to and then we can pass
03:03:55.000 the region right here but for now let's
03:03:57.439 leave it as it is we can also say shows
03:04:01.239 user location and set that to true as
03:04:05.200 well and finally we can make the user
03:04:07.640 interface style light as our application
03:04:10.800 is in light mode and I just noticed
03:04:13.520 something I mean look at the bottom left
03:04:15.960 corner of this map it says Apple Maps so
03:04:20.359 it's not Google the default in this case
03:04:23.040 actually is Apple because I'm on an
03:04:25.279 iPhone if you're using some kind of a
03:04:27.279 different operating system you might get
03:04:29.760 different map presented to you coming
03:04:32.359 from map view from react native maps how
03:04:35.800 convenient but we still needed to get
03:04:37.960 that Google API key which we'll test
03:04:39.760 later on for the places and directions
03:04:43.399 and you might have noticed how it found
03:04:45.760 your location but it didn't specifically
03:04:49.040 pinpoint to where you are on the map
03:04:51.800 that's because if you don't Grant your
03:04:54.160 device location permissions then it
03:04:56.720 cannot know where you are which might be
03:04:59.080 good or not depending on how much
03:05:00.800 privacy you want but all of the great
03:05:03.399 applications to work properly need to
03:05:05.840 have your correct location imagine if
03:05:08.520 Uber didn't have your exact location how
03:05:10.960 would drivers nowhere to find you so how
03:05:13.640 do we implement the functionality of
03:05:16.000 getting your exact Lo
03:05:18.880 well let me show you we'll install a
03:05:21.520 package called zustand so mpm install
03:05:25.840 zustand and no zustand doesn't have
03:05:28.720 anything to do with knowing your
03:05:30.680 location but it has Bare Necessities for
03:05:34.200 State Management in react and react
03:05:36.399 native so it is a state management
03:05:38.520 Library you can think of it like react
03:05:40.760 context it allows you to create a store
03:05:43.760 of some information and then you can use
03:05:46.960 an update that information across your
03:05:49.200 entire application so let's do just that
03:05:53.120 going back to our code we can create a
03:05:55.359 new folder in the root of our directory
03:05:58.279 and we can call it store within the
03:06:00.800 store we can create an index.ts
03:06:04.840 file there we can import the create
03:06:08.040 functionality from zand once we have the
03:06:11.319 create function it allows us to create a
03:06:13.439 store and we can do that by saying const
03:06:17.600 use location store is equal to
03:06:21.800 create that function takes in one
03:06:24.359 parameter which is the state Creator so
03:06:26.880 it is a callback function with an
03:06:29.040 immediate return of an object so it
03:06:31.920 looks like this you open up a callback
03:06:34.319 function and then you immediately write
03:06:37.080 parentheses and then braces this means
03:06:39.800 that you're immediately returning an
03:06:41.479 object here as the first parameter of
03:06:43.960 the Callback function we get a set
03:06:46.600 function that allows us to set the state
03:06:49.080 now we want to export this Ed location
03:06:52.319 store because once we create it zustand
03:06:55.080 allows us to call it from any file also
03:06:58.359 we can Define the type of that store in
03:07:00.840 this case it'll be a location store
03:07:03.200 coming from
03:07:04.760 types it'll have things like the user
03:07:08.399 address which at the start will be set
03:07:10.720 to null we can also give it a user
03:07:13.600 longitude set to null by default next
03:07:16.600 we're going to have a user
03:07:18.080 address which is also going to be set to
03:07:20.479 null destination longitude set to null
03:07:24.680 destination latitude set to null
03:07:27.800 destination address set to null by
03:07:30.479 default as well and then we have to have
03:07:33.080 a Setter function set user
03:07:36.520 location which will take in a latitude
03:07:40.560 longitude and the address and we have to
03:07:43.479 Define the types of these so that's
03:07:45.239 going to be latitude
03:07:47.720 is a number longitude is a number and
03:07:52.439 address is a string and this entire
03:07:55.479 thing returns a function or rather it's
03:07:58.560 a function block so let's type it out
03:08:01.000 properly looks like I have a typo
03:08:03.279 somewhere or maybe not maybe it's good
03:08:06.080 but the prettier is not formatting it
03:08:08.279 yet because we're missing some things
03:08:09.920 still we'll fix it as we go in this
03:08:12.279 function block where we're passing the
03:08:14.600 latitude longitude and the address we
03:08:16.720 can now use this Setter function given
03:08:19.279 to us by zest end to now actually set
03:08:22.399 those values so remember what I said
03:08:24.720 immediate return of an object that is
03:08:26.920 parentheses and then curly braces where
03:08:30.120 we set the user latitude to be equal to
03:08:33.359 Latitude we said the user
03:08:36.399 longitude to be equal to longitude and
03:08:39.399 we set the user address to be equal to
03:08:42.239 address I think I have a typo here
03:08:44.800 that's why it's not fixing it so if I
03:08:46.760 fix the typo
03:08:48.080 there we go this is better but it's
03:08:50.279 still complaining about something it's
03:08:52.200 saying that it's missing the user
03:08:53.600 latitude so let's make sure to fix that
03:08:56.479 user latitude yeah indeed it is missing
03:08:59.920 I have user address two times and it's
03:09:02.840 missing one more thing and that is the
03:09:04.880 set destination location so that's going
03:09:07.960 to be a second Setter function set
03:09:10.920 destination location which will be
03:09:12.920 almost exactly the same as set user
03:09:15.200 location so let's just duplicate it
03:09:18.439 it'll also accept the latitude longitude
03:09:20.680 and the
03:09:22.080 address and this time instead of saying
03:09:24.640 user latitude longitude and address
03:09:26.960 we'll say
03:09:28.560 destination latitude longitude and
03:09:31.680 address there we go now it nicely saves
03:09:34.600 it and we have to rename it to set
03:09:37.520 destination location now we can see our
03:09:40.439 tab script and pror or an esent nobody's
03:09:42.960 complaining anymore and that's why I
03:09:45.359 love typescript so much B Bas on this
03:09:47.840 location store where we said how
03:09:49.840 everything should look like it is now
03:09:51.479 saving your ass from making stupid
03:09:53.399 mistakes and typos as I have typed user
03:09:56.720 address two times maybe you didn't good
03:09:59.200 for you but now now that we have no red
03:10:02.319 squiggly lines hopefully this makes a
03:10:04.479 bit more sense we have some values and
03:10:08.040 we have some Setters for those values
03:10:10.479 where we set the user location and where
03:10:13.040 we set the destination location great so
03:10:16.479 this is called a dtin store and now we
03:10:19.319 have access to this use location store
03:10:21.160 hook which we can call where are we
03:10:24.319 going to call it for the first time well
03:10:26.640 it's going to be within our homepage the
03:10:29.520 first time we open up our application
03:10:32.279 and log our user in right here we can
03:10:35.120 say const and we can get the set user
03:10:39.800 location as well as set destination
03:10:44.640 location and that's going to be equal to
03:10:46.960 you use location store coming from store
03:10:51.319 alongside getting these Setters from the
03:10:53.279 store we also need one more thing and
03:10:55.880 that is a use State for the permissions
03:10:59.720 whether we have given permissions for
03:11:01.520 our location so we can say has
03:11:04.600 permissions and set has permissions at
03:11:07.640 the start set to false and now we can
03:11:11.040 create a new use effect
03:11:14.439 hook that's going to take in a callback
03:11:16.760 function
03:11:18.040 and also a dependency array also see how
03:11:20.960 webstorm adds this inlay hints about
03:11:24.160 what each one of these parameters is
03:11:26.319 first is the actual effect and then the
03:11:28.439 dependency array for now we'll keep the
03:11:30.640 dependency array empty and within it
03:11:33.600 we'll create a new async function called
03:11:36.720 request
03:11:37.840 location const
03:11:40.479 request location is equal to an async
03:11:45.160 function and we can call it immediately
03:11:48.319 so just right here request location
03:11:51.359 within it we can get the status of a
03:11:53.720 request for a location by destructuring
03:11:56.399 the status by saying await location
03:12:00.800 coming from react native do
03:12:04.880 request
03:12:06.600 foreground
03:12:09.080 permission async and this location is
03:12:12.439 coming at the top from react native and
03:12:14.880 you can see that right now it's having
03:12:16.479 trouble getting this method from the
03:12:18.319 location object and that's because the
03:12:21.279 location is coming from a new package
03:12:23.439 called Expo location so let's install it
03:12:27.000 mpm install Expo Das location once it
03:12:31.600 installs we can just import it at the
03:12:33.640 top by saying
03:12:35.439 import asterisk meaning everything as
03:12:39.160 location from Expo
03:12:43.319 location and it looks like I have a typo
03:12:45.960 right here it's per perms plural now
03:12:49.640 it's okay and it knows exactly what this
03:12:51.760 function is about asks the user to Grant
03:12:54.399 permissions for location while the app
03:12:56.359 is in the foreground next we can check
03:12:58.960 if the status is not equal to Granite
03:13:02.880 then we can set has permissions to false
03:13:07.080 and exit out of the function but if we
03:13:09.160 did get the permissions we can get
03:13:11.239 access to a location by saying lead
03:13:13.319 location is equal to a weight location
03:13:17.760 dot get current positions async next we
03:13:23.000 can extract the address from the
03:13:24.520 location by saying const address is
03:13:27.319 equal to await location. reverse geocode
03:13:32.439 async to which we pass the
03:13:35.640 latitude equal to
03:13:37.800 location. cords question mark. latitude
03:13:41.760 and we can add the exclamation mark at
03:13:43.439 the end because we know it'll be there
03:13:45.399 just for tab script to know and we can
03:13:47.560 repeat the same thing for the
03:13:50.600 longitude once we have that here's the
03:13:53.399 keyp part we can call the set user
03:13:56.000 location which is coming from our store
03:13:59.000 and now we can update the latitude to be
03:14:01.359 equal to
03:14:03.080 location. chords.
03:14:06.479 Latitude we can do the same thing for
03:14:08.439 the
03:14:09.359 longitude and we can also store the
03:14:12.000 address which is going to be a template
03:14:13.960 string of
03:14:15.800 address Z
03:14:18.040 .name comma address 0. region and you
03:14:23.359 can notice that here it's complaining
03:14:24.920 about the await all of this has to be
03:14:27.040 within the request location function
03:14:29.200 which is async so let's put it there and
03:14:33.120 close the function right here now this
03:14:35.880 will request location access and then
03:14:38.000 set it to the store which means that
03:14:39.960 we'll be able to use it from anywhere
03:14:41.640 else in our application okay so if we
03:14:44.080 have done everything correctly a new
03:14:45.920 popup asking your location permission
03:14:48.439 should have appeared for you you cannot
03:14:50.120 see it here on my computer screen but on
03:14:52.600 my phone I can see allow Expo go to use
03:14:55.520 your
03:14:56.319 location and I'll click allow while
03:14:58.880 using the app in case you gave access to
03:15:01.960 expoo to your location before then it'll
03:15:05.160 already have it but you can then switch
03:15:07.279 it by going to settings and then say ask
03:15:09.640 next time or when I share so this time
03:15:12.080 it's always going to ask you for the
03:15:13.560 location great so now that we're getting
03:15:16.200 this location
03:15:17.840 we're actually not only getting it but
03:15:19.920 we're also setting it to the store which
03:15:22.199 means that we can now go back to the map
03:15:24.640 and we have all the necessary
03:15:26.000 information to figure out where our user
03:15:28.720 is on the map so let's extract that
03:15:32.120 information by saying const and these
03:15:35.080 structure the user longitude user
03:15:38.319 latitude destination
03:15:42.279 latitude and
03:15:44.199 destination longitude and that's going
03:15:47.120 to be equal to use location store and
03:15:51.359 now that we have that we can figure out
03:15:53.520 our region and what is a region well
03:15:56.479 region is a circle around you with a
03:16:00.120 specified radius from within which we
03:16:02.960 can search for
03:16:04.680 drivers and we can get the region by
03:16:07.720 calling a special method called
03:16:10.640 calculate
03:16:12.239 region to which we then need to provide
03:16:15.439 all of this information such as the user
03:16:17.920 longitude latitude destination longitude
03:16:20.680 and latitude and that's it but what is
03:16:23.560 this calculate region well it's one of
03:16:25.880 the utility functions that you can get
03:16:28.359 in the Snippets down below if you search
03:16:30.840 for lib map. DS copy this and create a
03:16:35.960 new file in the lip called map. TS here
03:16:41.600 we'll put all the utility functions for
03:16:43.680 the map it seems like a lot but it's
03:16:47.160 really not we have three different
03:16:49.680 functions here we have the calculate
03:16:51.960 driver's time which we can nicely
03:16:54.720 collapse right here we also have
03:16:57.880 calculate region which is the one which
03:16:59.720 we want to work on right now and we also
03:17:02.720 have generate markers from data this is
03:17:06.680 a function that takes in the drivers and
03:17:08.960 marks their locations around our Circle
03:17:11.800 but later on once we have real drivers
03:17:13.960 you can just get their coordinates and
03:17:15.760 then use the same function to generate
03:17:17.600 markers with slight modifications don't
03:17:20.120 worry I'll explain every one of these
03:17:22.040 functions as we use them so first let's
03:17:24.880 import the use calculate region within
03:17:27.359 our map it's going to come from the map
03:17:30.319 utils and now we can see what do we have
03:17:32.439 to pass to it if there is no user
03:17:35.199 longitude and latitude it'll set some
03:17:37.720 fake values right here and if there's no
03:17:40.359 destination longitude and latitude it'll
03:17:42.720 just take a Delta meaning a difference
03:17:45.080 from our current user location and and
03:17:47.160 just in my specific case I'll take these
03:17:49.399 mock values I'll go to home and when
03:17:53.800 we're setting the user location I will
03:17:56.840 set them to these mock values just so I
03:17:59.560 don't have to allow for relocation every
03:18:01.960 time now if I go back to the map you can
03:18:05.399 see that we're getting the minimum
03:18:06.560 latitude and maximum
03:18:08.399 latitude based on the user latitude and
03:18:11.359 the destination latitude once we have
03:18:13.920 that we add some padding meaning we
03:18:16.840 spread the circle around our user and we
03:18:20.199 further calculate
03:18:21.640 it as I said before Chad GPT is perfect
03:18:25.479 for these types of functions but it's
03:18:27.520 going to make much more sense once we
03:18:29.439 actually put it to action so let me go
03:18:32.199 back right here and let's put this
03:18:33.880 region to use I'll say initial region is
03:18:37.479 equal to region and I'll turn on the
03:18:39.760 show user location in my case it is
03:18:42.640 using this specific location I provided
03:18:45.720 which is right here in San
03:18:48.760 Francisco so the next thing we can focus
03:18:51.160 on is showing some drivers nearby our
03:18:54.279 location and we can do that by going
03:18:56.800 back to our store and creating a second
03:19:00.120 store which will be called use driver
03:19:03.160 store here we can export const use
03:19:07.040 driver store you know the drill and then
03:19:10.000 we can say create with a type of driver
03:19:14.040 store and we get this Setter
03:19:16.279 functionality it right here make sure to
03:19:19.040 import the driver store from the types
03:19:21.880 and within here we can set the drivers
03:19:24.680 at the start equal to an empty array as
03:19:27.880 marker data coming from types it's going
03:19:31.439 to be an array of marker data and later
03:19:34.319 on we'll have a selected driver which at
03:19:36.960 the start can be set to null we have to
03:19:39.800 have a set select the driver which is
03:19:42.479 going to be equal to a callback function
03:19:45.279 that takes in a drive of a type number
03:19:48.479 and then calls the set functionality
03:19:51.000 with its own callback function where we
03:19:53.960 can set the select a
03:19:55.680 driver to be equal to driver ID right
03:19:59.560 below that we have the set drivers
03:20:01.880 functionality to set all the
03:20:04.199 drivers which takes in drivers as an
03:20:07.080 array of marker data and again calls the
03:20:10.239 set functionality where it sets drivers
03:20:13.080 to drivers and finally we can clear
03:20:16.760 select the driver which is just going to
03:20:18.840 call a set functionality and set a
03:20:21.239 selected driver to null and it looks
03:20:23.840 like I misspelled the driver ID and in
03:20:26.239 this case there's so many different
03:20:27.800 parentheses and braces and things to
03:20:30.640 mess up so what I'll do is I'll provide
03:20:33.399 this index.ts of store in the code
03:20:36.600 Snippets in the GitHub readme so if you
03:20:38.800 mess something up you can copy and paste
03:20:40.600 it from there now that we have that used
03:20:43.120 driver store we can make use of it in
03:20:45.479 the map by getting the selected driver
03:20:49.840 as well as the set
03:20:51.680 drivers by saying is equal to use driver
03:20:55.640 store and now the question is where are
03:20:58.319 we going to get the drivers from of
03:21:00.439 course they're going to come from our
03:21:01.760 neon DB post girl database but for the
03:21:04.840 time being let's mock some drivers like
03:21:07.720 we mocked our recent rides just so we
03:21:09.960 can see it on the screen in the GitHub
03:21:11.960 read me you can see a little toggle with
03:21:14.920 Moog drivers so copy it and paste it at
03:21:18.479 the top of the map file cons drivers is
03:21:22.199 equal to this array make sure to
03:21:25.399 collapse
03:21:26.520 it once you have the drivers we can
03:21:29.199 create a new use
03:21:31.680 effect it has a callback function and it
03:21:35.279 also has a dependency array that changes
03:21:38.040 whenever the drivers change in here we
03:21:40.560 want to check if the drivers exist and
03:21:42.720 whether they're an array so we can say
03:21:44.640 if array that do is array to which we
03:21:48.680 can pass the drivers and if we have the
03:21:51.080 drivers but if we don't have the user so
03:21:53.520 if no user latitude or no user
03:21:58.160 longitude in that case we want to exit
03:22:00.479 out of this but if we do have the user
03:22:03.520 location and if we have the drivers we
03:22:06.479 want to create markers on the map so we
03:22:09.000 can say const new
03:22:11.279 markers and that's equal to generate
03:22:14.359 markers from data so this is this is a
03:22:16.880 function that we created in the map
03:22:19.080 utils to which we can pass the data
03:22:21.960 equal to drivers and we can pass the
03:22:24.520 user latitude and the user longitude and
03:22:28.040 that'll generate the markers this is not
03:22:30.640 too big of a deal right now because we
03:22:32.359 have mock drivers later on once we have
03:22:34.680 the real ones from the database it'll be
03:22:37.000 okay so now that we have these new
03:22:39.319 markers we can set them to the state so
03:22:41.960 let's create a new used State and let's
03:22:45.680 call it
03:22:47.439 markers and set markers at the start
03:22:50.720 equal to an empty array and they'll be
03:22:52.960 of a type marker
03:22:55.760 data and specifically an array of marker
03:22:59.080 datas and after we create these new
03:23:01.840 markers we can simply set markers to be
03:23:05.000 equal to new
03:23:08.600 markers and just to go to the map utils
03:23:11.880 I can explain how the generate markers
03:23:13.920 from data Works basically it's it's
03:23:16.600 getting the information about our user
03:23:18.960 latitude and longitude so where are we
03:23:21.560 right now and it's adding a random
03:23:24.479 offset to mock the driver's locations so
03:23:27.560 that it seems like they're next to us
03:23:29.840 once you implement the real geolocation
03:23:31.800 for the drivers you won't have to do
03:23:33.960 this you'll be able to just show a
03:23:35.760 couple of the drivers that are most
03:23:37.680 nearby to the
03:23:39.640 user but now the question is where do we
03:23:42.199 show these markers and how do we show
03:23:44.600 them within the map let me show you
03:23:48.239 we can go to the map and specifically
03:23:50.520 inside of the map and here we can map
03:23:53.920 over the markers by saying markers. map
03:23:58.160 where we get each individual marker and
03:24:01.040 for each marker we can automatically
03:24:03.399 return a new marker this marker is
03:24:06.680 coming from react native Maps so let's
03:24:10.239 look into it react native Maps we have a
03:24:13.199 map view and then before the provider
03:24:15.840 default inside of the curly braces we
03:24:18.960 can import the marker but of course the
03:24:21.479 marker needs to have some
03:24:23.760 information so what we can do is give it
03:24:26.840 a key equal to marker. ID give it
03:24:30.319 coordinates which are going to be equal
03:24:32.199 to an object of
03:24:34.520 latitude equal to marker.
03:24:38.560 latitude longitude equal to marker.
03:24:43.760 longitude we can give that specific
03:24:46.479 marker a title equal to marker. tile and
03:24:51.439 we can also give it an image equal to if
03:24:54.880 selected driver is triple equal to
03:24:58.080 marker. ID then we can render the icons
03:25:01.920 coming from constants do selected marker
03:25:06.120 else we can just render a marker icon
03:25:09.640 depending on which marker is selected
03:25:12.760 and would you look at that we have four
03:25:14.760 cars appearing next to our current
03:25:16.600 location for me there is no pin about
03:25:19.479 the where I'm at right now but for you
03:25:22.199 there should be one so it's looking even
03:25:24.199 better now we have our current location
03:25:27.439 showing on the map we see the recent
03:25:29.800 rides and we see the drivers near by us
03:25:32.880 that can drive us somewhere but the
03:25:35.160 question is where are we going to go and
03:25:37.920 how can we tell that to our Uber
03:25:39.399 application to implement that we'll have
03:25:41.920 to focus on the second biggest part of
03:25:44.600 our homepage and that my friend is our
03:25:48.040 Google text input finally we'll be able
03:25:51.479 to type something in and get the path
03:25:54.319 drawn out from our current location to
03:25:57.319 our destination location so let's dive
03:26:00.680 right into the Google text input and
03:26:02.960 let's start implementing it first things
03:26:05.359 first we have to install a package for
03:26:07.680 the react native Google Places
03:26:09.520 autocomplete and its name is exactly
03:26:12.279 that mpm install
03:26:15.239 react-native -
03:26:17.399 google-places D Auto
03:26:22.239 Complete we have a view right here and
03:26:25.399 directly within the view where currently
03:26:27.359 it says search will render the
03:26:29.760 self-closing Google Places autocomplete
03:26:34.120 and we have to import it right at the
03:26:35.840 top from the react native Google Places
03:26:38.080 autocomplete that's a mou full and
03:26:41.160 immediately you can see a nice looking
03:26:43.279 input appear and if you click into it
03:26:45.479 you can start typing tying
03:26:47.680 something but it's still not showing any
03:26:50.399 information so let's continue styling it
03:26:52.960 further and passing other props to it
03:26:55.319 that it expects such as fetch details
03:26:58.800 which can be set to true we can also
03:27:01.840 pass it a placeholder equal to search or
03:27:05.680 maybe something like where you want to
03:27:08.439 go next we can give it a debounce this
03:27:11.960 means that it's only going to make a
03:27:13.560 request every 200 milliseconds if if it
03:27:16.479 was going to make a request every key
03:27:18.239 press that would be too many requests
03:27:21.120 and we can also give it some Styles so
03:27:24.520 let's create a large object of styles
03:27:27.640 we're writing CSS injs here and first we
03:27:31.120 can style different things such as the
03:27:33.199 text input
03:27:34.680 container so we can create that as
03:27:36.880 another object that's going to look like
03:27:39.120 this and we can say align items is equal
03:27:42.120 to Center we can also say justify
03:27:45.479 content is equal to Center as well we
03:27:48.600 can give it a border
03:27:51.239 radius equal to
03:27:53.439 20 a margin horizontal equal to 20 as
03:27:57.319 well you can see how it's moving it and
03:28:00.160 a position set to
03:28:02.319 relative and also a shadow
03:28:06.199 color equal to Hash D4 D4 D4 next we can
03:28:12.560 style the text input so let's go outside
03:28:16.120 inside of this and say text
03:28:18.640 input we can give it a background color
03:28:22.920 which is going to be equal to either the
03:28:25.960 text input background color or the color
03:28:29.920 white so this is the one we're passing
03:28:31.880 through props text input background
03:28:34.640 color let's properly close this it's
03:28:37.960 also going to have a font size of 16 a
03:28:41.600 font weight of 600 a margin top of 5 and
03:28:47.399 a width of 100% finally a border radius
03:28:52.160 of 200 to make it not have such rough
03:28:56.040 Corners finally once we can see some
03:28:58.680 elements on the screen we can style how
03:29:01.800 they look like by modifying the list
03:29:04.479 view Styles we can say that the
03:29:07.000 background color of the list view will
03:29:09.760 be equal to text input background color
03:29:12.880 if it exists or else it'll be set to
03:29:16.520 white we can also give it a position
03:29:19.120 equal to
03:29:20.800 relative we can give it a top position
03:29:24.120 equal to zero a width equal to
03:29:27.880 100% a border radius set to 10 a shadow
03:29:33.080 color equal to D4 D4 D4 and a zindex of
03:29:39.720 99 so it appears on top of other
03:29:42.520 elements great so now our input is
03:29:45.560 looking
03:29:46.960 great but as we type nothing is
03:29:49.600 happening yet so let's give it some
03:29:51.920 additional properties as well such as
03:29:55.040 the onpress functionality once we press
03:29:57.760 it what do we want to happen well first
03:30:01.640 once we press it we can get some
03:30:03.359 information from the press such as the
03:30:05.760 data and the details which is at the
03:30:08.279 start set to null and then we can call
03:30:10.640 the function and call a handle press
03:30:13.640 function and this function is coming
03:30:15.720 through props to it we need to pass the
03:30:18.000 latitude longitude and the address so
03:30:20.600 let's do just that Latitude will be
03:30:23.600 equal to details question mark.
03:30:26.880 geometry.
03:30:28.840 location. latitude or lat
03:30:31.880 L and we can add an exclamation mark
03:30:34.520 because we know it's there we can repeat
03:30:36.840 the same thing with the longitude but
03:30:38.720 it's going to be LNG at the end and
03:30:41.920 finally the address will be equal to
03:30:44.600 data do description next to the on press
03:30:47.880 we also have to Define our query so this
03:30:50.120 is the search query and the key here is
03:30:53.080 going to be equal to the Google Places
03:30:55.239 API so this is something we can Define
03:30:57.960 right here at the top by saying const
03:31:01.239 Google Places API key let's make sure to
03:31:06.120 spell it properly is equal to process.
03:31:10.720 env. Expo
03:31:13.520 corpu Google AP apore key and we can now
03:31:18.199 use this Google Places API key as the
03:31:20.720 key in the query and we can set the
03:31:24.720 language equal to any language in the
03:31:27.199 world I use en n for English we can also
03:31:30.120 choose to render a left button so that's
03:31:33.199 how customizable it is render left
03:31:36.680 button which will be equal to a callback
03:31:39.080 function where we return a view that has
03:31:42.760 a class name equal to justify i- center
03:31:47.600 items Das Center and a w of 6 and an H
03:31:51.960 of
03:31:52.680 six within it we can render an image
03:31:56.199 coming from react native with a source
03:32:00.279 and if an icon exists then we return an
03:32:03.600 icon else we tap into the icons from
03:32:07.479 constants search so you can see a big
03:32:09.960 search icon on the right right now we
03:32:11.920 can style it by giving it a class name
03:32:14.720 equal to w ofc 6 and H of 6 with a
03:32:18.560 resize mode equal to
03:32:21.600 contain there we go that's much better
03:32:24.920 finally we can have one last property
03:32:28.000 called text input props which will
03:32:32.080 accept a placeholder text color which
03:32:35.319 will set to be equal to Gray and a
03:32:38.399 placeholder will be equal to either the
03:32:41.720 initial location so this is if we
03:32:43.640 already have a location from before or
03:32:46.840 double question mark this is to make
03:32:48.920 sure that if we don't have the initial
03:32:50.359 location we can show something else and
03:32:52.960 that else is where do you want to
03:32:57.680 go great so now if I clear it you can
03:33:00.399 see where do you want to go and if we
03:33:02.760 start typing something like let's see
03:33:06.040 Zagreb is the capital of
03:33:08.800 Croatia nothing shows up or whatever you
03:33:11.880 start typing most likely nothing is
03:33:14.399 showing up either
03:33:16.880 and the main point of this Google
03:33:19.160 autocomplete is for it to autocomplete
03:33:21.920 exciting locations and cities near our
03:33:25.000 location so why is it not working well
03:33:27.920 when Google gave us our API key I
03:33:30.040 thought that they're going to let it
03:33:31.279 work but it looks like if we go to
03:33:34.040 enable apis and services and then search
03:33:37.160 for directions API and then even though
03:33:40.520 it is enabled we have to go to manage
03:33:43.560 and then we have to go through this
03:33:44.880 verification process process where the
03:33:46.720 user card to verify that we're not a
03:33:49.920 robot they won't charge us absolutely
03:33:53.000 anything until we manually decide to
03:33:55.319 upgrade to a paid account so this is
03:33:57.359 just a strict verification to make sure
03:33:59.640 that we're not a
03:34:01.080 robot so I'll click agree and continue
03:34:04.160 you'll have to enter some additional
03:34:05.680 information and then proceed further in
03:34:08.479 a matter of seconds my account was
03:34:10.680 verified and now you need to answer a
03:34:12.600 couple more
03:34:14.479 questions you you can say what you want
03:34:16.520 to
03:34:18.080 build say what you're
03:34:20.720 doing choose the
03:34:24.239 platform and select the framework once
03:34:27.479 you do that it'll give you a new API key
03:34:29.960 which you can copy take on enable all
03:34:32.279 Google Maps apis for this project and
03:34:34.720 create a budget alert to help you stay
03:34:37.040 on top of your spending so you don't get
03:34:39.080 charged more but that's almost
03:34:41.080 impossible to reach given that I believe
03:34:43.560 you would need to have millions and
03:34:45.680 millions of calls to reach that amount
03:34:48.640 so you can think of it as completely
03:34:50.439 free and then go to Google Maps platform
03:34:53.840 now I'm fully aware that some of you
03:34:56.080 might not have a credit card and that's
03:34:59.080 totally okay some subscribers have told
03:35:01.319 me in the comments of a previous video
03:35:03.199 that for India specifically there's also
03:35:05.439 Ola Maps which is completely free and
03:35:08.319 you can get it without a credit card so
03:35:10.120 that's another thing that you can try
03:35:11.640 out if Google is not an option or maybe
03:35:14.479 other people in the comments will be
03:35:16.080 able to tell you some alternative
03:35:17.520 Solutions if you really cannot use
03:35:19.479 Google but in this case I'll be
03:35:21.560 proceeding with Google so it created a
03:35:24.239 new project for me and I do believe that
03:35:26.640 the services are automatically enabled
03:35:28.920 for Google Maps so we can just use this
03:35:31.800 new API key that has been provided to us
03:35:34.960 and I can paste it right here once you
03:35:37.479 do that and whenever you make some
03:35:38.880 changes you'll have to reload your
03:35:41.600 application so stop it from running and
03:35:44.120 then run MPX Expos start- C to clear
03:35:48.720 your cache now if you open up the search
03:35:51.239 once again and start typing something
03:35:53.920 you'll see powered by Google and you'll
03:35:56.080 be able to see some great locations
03:35:57.960 appear on your screen you'll be able to
03:36:00.479 select from many of them and the next
03:36:02.680 step we'll have to do is to open up a
03:36:04.840 new screen that will allow us to verify
03:36:07.439 your current location your destination
03:36:09.640 location and then we'll be able to
03:36:11.800 create a trip which is a handshake
03:36:14.640 between you and and the driver so to
03:36:17.239 make that happen we have to make sure
03:36:19.760 that something happens once we press or
03:36:21.960 choose a specific location and that is
03:36:25.199 coming through props from the homepage
03:36:28.120 so if we go to home you can see that
03:36:30.120 we're passing handle destination press
03:36:32.840 which is currently completely empty once
03:36:35.080 we press it it's going to give us access
03:36:37.239 to a location that contains three
03:36:40.359 different things a Latitude which is a
03:36:43.279 number a longitude which is is also a
03:36:46.080 number and then an address which is a
03:36:50.120 string what do we do with those well we
03:36:53.000 can call the set destination location to
03:36:56.720 which we can pass this newly selected
03:36:59.319 location destination once we do that we
03:37:02.239 can use the router. push functionality
03:37:05.760 to go to the second screen forward slash
03:37:09.560 in parentheses root and then find Dash
03:37:13.560 Ride Now check this out even typescript
03:37:17.239 didn't save me when I was setting up the
03:37:20.040 name of the type within this
03:37:22.600 location it was okay with launch titude
03:37:26.800 but in this case webstorm spellchecking
03:37:30.080 found the mistake here it was supposed
03:37:32.399 to be
03:37:33.840 longitude so this was super useful next
03:37:37.399 we have to import the
03:37:39.319 router from Expo router so let's do just
03:37:42.560 that
03:37:49.640 and in this case Expo is also pretty
03:37:52.399 smart because it tells us right now that
03:37:55.040 there's no such screen find ride so
03:37:58.800 let's go ahead and create it we can go
03:38:01.080 to our file
03:38:02.319 explorer go to app rout and then right
03:38:07.239 here next to tabs we can create a new
03:38:10.439 file directly in the root we can call it
03:38:13.840 find- rde
03:38:16.120 TSX there we can say const find ride is
03:38:20.600 equal to a react error function where we
03:38:24.080 can run export default find ride you
03:38:28.040 know the drill we can there return a
03:38:32.479 view coming from react native and we can
03:38:36.720 return a text element for now saying
03:38:39.960 find right just so we know if we have
03:38:42.520 reached that screen
03:38:44.439 properly now if we go back to home from
03:38:47.720 where we were redirecting you can see
03:38:49.800 that it's no longer complaining and
03:38:52.000 thanks to zustand and our store before
03:38:55.160 we change the screen we're also setting
03:38:57.600 our destination location right here to
03:38:59.600 the store so that even on the next
03:39:01.560 screen we know where we want to go so
03:39:04.760 let's give it a shot I'll type
03:39:07.120 Sacramento right here in California USA
03:39:10.920 and it navigates me over to find ride
03:39:14.560 and just so I can prove prove to you
03:39:16.080 that we actually know where we want to
03:39:17.760 go we can make use of the used location
03:39:20.800 store so let's head over to find
03:39:24.399 ride use the use location store by
03:39:28.080 saying const something is equal to use
03:39:31.479 location
03:39:32.680 store and here we can destructure the
03:39:35.960 user address which is our current
03:39:37.880 address and the destination address and
03:39:41.120 we can also get the set destination
03:39:42.920 address and set user location
03:39:46.000 in case we decide to change it you know
03:39:47.880 how in Uber you can change your current
03:39:49.520 location in case you will be somewhere
03:39:51.399 else once the driver picks you up so now
03:39:55.160 here in the text I can give it a class
03:39:57.760 name equal to text-
03:40:01.760 2XL and I can say you are here and I can
03:40:06.399 render the user address I can duplicate
03:40:09.199 it and say you are going to and here we
03:40:13.520 can say destination address
03:40:15.920 and now if I save this you can see you
03:40:18.479 are here San Francisco you're going to
03:40:21.760 Sacramento wonderful this is working
03:40:25.199 like a charm and we can even go back and
03:40:28.160 if we want to go somewhere else let's
03:40:30.199 say Pao
03:40:32.560 Alto we can also go right here so let's
03:40:36.239 do that next as you can notice the next
03:40:39.080 three screens have a very similar layout
03:40:41.680 they have a map at the top here here and
03:40:45.560 here they have some kind of a widget
03:40:48.160 that appears at the bottom which is this
03:40:50.279 form right here here and here and then
03:40:54.080 you can slide it above to cover the map
03:40:57.160 so for that reason I'll teach you how to
03:40:59.160 create something very cool and that is a
03:41:01.520 layout component so that we can reuse a
03:41:04.520 very similar layout but then change
03:41:06.720 what's shown within it so let's go to
03:41:09.000 components and create a new file called
03:41:12.239 ride layout. TSX
03:41:15.840 it'll be a component like any other
03:41:18.640 starting with con ride layout which is a
03:41:22.600 react functional
03:41:24.279 component we can export default. R
03:41:27.479 layout and then we can return some kind
03:41:30.640 of a view right within
03:41:32.760 it the difference between a regular
03:41:35.319 component and a layout component is that
03:41:38.560 layouts typically accept children as
03:41:41.239 props so we can Define children right
03:41:43.760 here and it'll be of a type children is
03:41:46.720 a react node what does having children
03:41:49.399 allow us to do well first of all we can
03:41:52.159 have some kind of a text that allows us
03:41:54.760 to say top of the layout and we can
03:41:58.199 duplicate that to say bottom of the
03:42:00.720 layout but then in the middle we can
03:42:03.159 render whatever we show in the children
03:42:06.239 so if I do this we can now go back to
03:42:09.479 find ride and I'll wrap my entire
03:42:12.120 application with the ride layout of
03:42:15.439 course make sure to import it from
03:42:17.479 components and check what happens now we
03:42:20.520 have top of the layout bottom of the
03:42:22.560 layout and then in the middle we have
03:42:25.000 whatever we have right here for now we
03:42:27.720 can leave that just to be a text that
03:42:30.479 says something like find ride because
03:42:33.359 this is the screen that we're currently
03:42:34.800 on now later on we'll be able to reuse
03:42:37.560 this layout on other screens as well
03:42:39.800 screens such as these ones right here in
03:42:43.520 the root layout first we have the find
03:42:47.239 ride so we can also hide the header on
03:42:50.640 it later on we'll also have a
03:42:54.520 confirm ride and finally we'll have a
03:42:58.000 book ride and we want to hide headers
03:43:00.600 from all of them as you can see our
03:43:03.279 layout is now complaining about too many
03:43:05.319 screens defined so for now I will
03:43:08.319 comment out the bottom too and let's
03:43:10.920 continue working on our right layout
03:43:13.560 instead of having a top and bottom
03:43:15.120 bottom text we'll do something different
03:43:17.720 I'll wrap everything in a gesture handle
03:43:21.439 root view like this and that's going to
03:43:24.600 come from a new package so let's install
03:43:27.239 it by running mpm install
03:43:31.840 react-native-gesture-handler
03:43:34.399 once it installs we'll be able to just
03:43:37.560 import it from there this will allow us
03:43:40.359 to swipe our screen and then show
03:43:42.439 something underneath it before rendering
03:43:44.600 children let's render some other stuff
03:43:46.560 here like another view with a class name
03:43:50.680 equal to flex D1 and BG DWI within it we
03:43:55.520 can render yet another view with a class
03:43:59.159 name equal to flex
03:44:03.800 flex-all h- screen for full height and
03:44:07.760 BG
03:44:09.600 dl-500 I'll go back to my screen and now
03:44:13.199 we can see that the entire screen is
03:44:14.640 blue
03:44:16.120 we can show another view right below it
03:44:18.640 or right within it with a class name
03:44:21.840 equal to flex Flex Das row absolute Z of
03:44:27.439 10 top of
03:44:29.680 16 items Das Center justify Das start
03:44:34.359 and padding
03:44:36.279 xl5 nothing will show yet because we
03:44:38.840 have to put something within it and that
03:44:41.159 something will be a touchable opacity
03:44:43.840 which is basically a button on press of
03:44:46.399 this touchable opacity we'll call a
03:44:48.800 callback function that'll call the
03:44:50.880 router
03:44:52.479 doback so we can just go to a page back
03:44:55.399 and within it we can render a view
03:44:58.080 that'll render an image with a source
03:45:01.159 equal to icons coming from constants
03:45:04.560 doback
03:45:05.960 arrow with a resize mode of
03:45:10.000 contain and a class name equal to W6 h
03:45:15.399 six now you can see a little back arrow
03:45:18.159 right here on top left we can also style
03:45:21.120 it further by giving this view a class
03:45:23.840 name of W10 h10 BG white round the- full
03:45:31.640 and we can also give it items Das Center
03:45:34.800 and justify Das Center to put it in the
03:45:37.720 middle great so now we're starting to
03:45:40.399 create this backdrop right below the
03:45:42.600 touchable opacity we can also render a
03:45:45.319 piece of text that will say either a
03:45:48.439 title so it will render a title that we
03:45:51.279 pass through props so alongside children
03:45:54.479 we can also get the title and the title
03:45:57.760 will be of a type
03:45:59.399 string if we don't have a title then we
03:46:02.840 can render a piece of text that will say
03:46:05.199 something like go back let's style this
03:46:08.239 a bit by giving it a class name equal to
03:46:11.760 text- excl font djar PARTA semi bold and
03:46:17.319 margin left of five right below that
03:46:19.880 view will render a
03:46:22.560 map coming from components
03:46:25.960 map thankfully we have already crafted
03:46:28.880 this
03:46:29.640 component and that's going to go below
03:46:31.720 the view not below the
03:46:34.000 text there we go so now this makes much
03:46:36.680 more sense for the first time ever we
03:46:39.920 can see a map right here on our entire
03:46:43.399 screen how nice nice is that but here's
03:46:46.720 the key part going below this map and
03:46:49.840 below the view we'll create something
03:46:52.560 known as a bottom sheet and this bottom
03:46:55.960 sheet is coming from another custom
03:46:58.040 package it has more than 300,000 weekly
03:47:01.159 downloads and it provides this nice
03:47:03.239 bottom sheet that you can swipe up and
03:47:05.640 you can see the perfect use case is Maps
03:47:09.040 so let's copy this installation code
03:47:12.199 open up the terminal and run mpmi at
03:47:15.960 gorom SL bottom Das
03:47:19.479 sheet and now we can very easily import
03:47:22.600 it from there this bottom sheet also
03:47:25.720 requires a ref so we can say const
03:47:28.720 bottom sheet ref is equal to use ref
03:47:33.199 coming from
03:47:34.640 react of a type bottom sheet at the
03:47:38.359 start set to null now we can provide
03:47:41.239 this ref to this bottom sheet by saying
03:47:43.640 ref is equal to to bottom sheet ref we
03:47:47.760 can also give it snap points so these
03:47:50.720 are the two different points at which
03:47:53.000 the sheet will stop so we can put that
03:47:56.239 as an array and it can be equal to let's
03:48:00.159 do something like 40% and then the
03:48:02.680 second one can be about maybe
03:48:06.560 85% like
03:48:08.920 this and then we can also give an index
03:48:11.680 of zero to this bottom sheet
03:48:15.080 within the bottom sheet we can render
03:48:17.479 the
03:48:19.199 bottom sheet scroll
03:48:23.279 view that'll have a style equal to flex
03:48:28.000 of one and a padding of
03:48:31.680 20 and within it we can render the
03:48:34.640 children so this is where the magic
03:48:37.199 happens if I now go back right here to
03:48:41.239 search you can see that now there's a
03:48:43.840 find r text and if I scroll up and down
03:48:48.120 it gets stuck at 40 and 85%
03:48:51.960 respectively but again the key part is
03:48:54.359 that whatever is right in here what
03:48:56.560 we're wrapping with the ride layout
03:48:58.560 shows directly within this little view
03:49:01.479 that you can then move up and down but
03:49:03.720 the map remains right on top of it this
03:49:07.080 is such a beautiful user interface so
03:49:10.040 now the layout is mostly done and if we
03:49:13.319 go back to our final ride we can start
03:49:16.120 implementing whatever is supposed to be
03:49:18.080 within it let's first give it a title
03:49:20.960 equal to ride and let's create a view
03:49:24.800 right within
03:49:26.800 it this view will have a class name
03:49:30.439 equal to margin y of
03:49:32.920 three and within it we can render a text
03:49:35.960 element that will say from so where are
03:49:38.960 you coming from it'll have a class name
03:49:42.600 equal to text- LG font D Jakarta semi
03:49:47.159 bold and a margin bottom of
03:49:49.960 three right below it we can render a
03:49:53.120 reusable component which we have already
03:49:54.920 created called a Google text input of
03:49:58.359 course we have to pass a couple of props
03:50:00.120 to it so let's do just that we can pass
03:50:02.920 it the icon equal to
03:50:05.399 icons coming from constants do Target in
03:50:09.800 this case we already have an initial
03:50:11.640 location as well equal to user
03:50:15.199 address so now you can see we already
03:50:18.000 know where we're coming from because
03:50:20.000 it's taking it from a user address
03:50:22.840 location next we can provide some
03:50:25.120 container style equal to BG neutral
03:50:30.600 100 and we can also provide a text input
03:50:35.439 background color of hash F5 F5
03:50:41.199 F5 and then what happens on the handle
03:50:43.880 press well we can call a call function
03:50:47.279 where we get the
03:50:48.920 location and we simply set user location
03:50:52.439 to a new location that a user has
03:50:56.359 chosen in this case it's complaining a
03:50:58.880 bit about the initial location maybe
03:51:01.120 there's a type mismatch I'll just add an
03:51:03.239 exclamation mark at the end because we
03:51:05.199 know it'll be in the right format we can
03:51:07.920 end this view right here and check this
03:51:10.439 out I will simply duplicate this view
03:51:13.479 below and say not from but rather to
03:51:18.840 change the icons to map change the
03:51:22.080 address to destination address you can
03:51:25.239 disregard my low battery sign I'll go
03:51:27.640 ahead and go charge it soon and we can
03:51:30.520 also change the text input background
03:51:32.680 color to transparent here instead of set
03:51:35.680 user location we'll set the destination
03:51:39.120 location I'll close my battery warning
03:51:42.000 and would you look at this we have two
03:51:44.640 different inputs from and to and we can
03:51:47.880 change both of them by typing once again
03:51:50.640 so in San Francisco I can type and go
03:51:53.040 from let's say somewhere else here we go
03:51:56.399 but I do get a warning here saying that
03:51:58.920 virtualized lists should never be nested
03:52:02.159 and if we close this I'm guessing a
03:52:05.040 similar thing will happen right here yep
03:52:07.800 you can see virtualized lists should
03:52:09.600 never be nested we'll fix that very soon
03:52:12.080 but before we do that let's quickly add
03:52:14.239 a new custom button right here below
03:52:17.800 it's going to say find now remember
03:52:20.439 we're trying to find
03:52:21.960 drivers and what are we going to do on
03:52:24.319 press well on press we will use the
03:52:28.000 router coming from Expo router to push
03:52:32.159 over to forward slash root in
03:52:35.359 parenthesis forward slash confirm Das
03:52:39.560 ride and we can give this button a class
03:52:42.600 name equal to margin top of
03:52:46.640 five there we go this is looking much
03:52:49.600 better of course we have to actually
03:52:51.880 create this route so let's add a new
03:52:55.080 stack screen that's going to say confirm
03:52:58.239 ride and let's create a new file in the
03:53:01.640 app rout and it'll be
03:53:04.920 called
03:53:06.920 confirm ride. TSX where we can create a
03:53:11.520 new cons confirm ride
03:53:15.800 and then we can export default that
03:53:18.159 confirm ride that'll for now return a
03:53:22.520 view and a
03:53:25.040 text saying confirm ride one thing that
03:53:29.840 could be the issue here is if we go to
03:53:32.600 the ride layout remember it's mentioning
03:53:35.040 something about scroll views so what if
03:53:38.040 we just use a bottom sheet view right
03:53:40.560 here and not a bottom scroll sheet view
03:53:44.920 we can import it remove the other one
03:53:48.040 and give that a shot we don't need a
03:53:50.279 scroll within a scroll I think that's
03:53:52.040 why it's complaining about so if one
03:53:54.640 more time we go
03:53:56.560 into
03:53:58.520 here and we need to bring it a bit up
03:54:02.640 and enter something like
03:54:04.960 Switzerland now it works perfect there's
03:54:08.880 one thing we could try though and that
03:54:10.800 is coming directly from the keyboard
03:54:13.080 behavior of the bottom sheet component
03:54:17.000 they say that we can Define the keyboard
03:54:18.960 appearance behavior and we can use the
03:54:21.800 extend or interactive to offset the
03:54:24.239 sheet by the size of the keyboard so by
03:54:27.560 default it is interactive so we can
03:54:29.359 switch it to maybe extend we can do that
03:54:31.840 by giving this bottom sheet a keyboard
03:54:34.040 Behavior equal to
03:54:37.760 extend but even if I try that it doesn't
03:54:40.720 seem to do the trick maybe on Android it
03:54:43.560 works so so we can leave it as it is
03:54:45.439 because by default it is indeed
03:54:47.680 interactive but we'll have to figure out
03:54:49.640 something else for iOS maybe we'll have
03:54:52.600 to pass custom snap points to this ride
03:54:55.000 layout by saying snap points is equal to
03:54:58.359 and it can be an array of something like
03:55:02.319 85% so now if I go to the ride layout
03:55:06.199 and accept those snap points which will
03:55:08.920 be an array of strings so we can say
03:55:11.080 snap points is optional and it is an
03:55:13.560 array of strings we can now either
03:55:16.399 render 4085 by default or if we have the
03:55:19.840 snap points we can then render it by
03:55:21.920 snap points so what this is going to do
03:55:24.560 is every time that you're here it's
03:55:26.399 always going to be opened at least
03:55:29.319 85% this way you can see the from and
03:55:33.239 two locations very nicely on the screen
03:55:35.479 here and on this screen you're not
03:55:36.960 supposed to be looking at the map anyway
03:55:38.720 you're supposed to be checking whether
03:55:40.239 the from and two are correct so with
03:55:42.960 that in mind we got that fix so let's
03:55:45.159 click find now which is going to
03:55:46.640 redirect us to confirm ride this is the
03:55:51.080 second page where we'll reuse the ride
03:55:54.279 layout so I'll show you how convenient
03:55:56.880 that is check this out instead of a view
03:56:00.800 I'll use the right layout coming from
03:56:03.600 components I'll give it a title which is
03:56:06.279 going to be choose a
03:56:09.239 driver and I'll give it snap points
03:56:12.040 which are going to be custom of about
03:56:15.760 65% for the first one and we can do
03:56:19.960 85% for the second one within it we can
03:56:23.520 render a flat list the data for the flat
03:56:26.760 list will be the drivers that we can
03:56:28.800 choose from and I do believe that we
03:56:31.000 already have some fake drivers I think
03:56:33.439 it was maybe in home let's see here we
03:56:36.720 have recent rides maybe it was in the
03:56:39.080 map yes right here at the top of the map
03:56:41.760 we have the mock drivers for now let's
03:56:44.399 simply copy them and add them at the top
03:56:46.720 of the confirm ride I promise soon
03:56:49.399 enough we'll make this Dynamic but for
03:56:51.560 now for the flat list data will be equal
03:56:54.439 to drivers next we can choose how we
03:56:57.520 want to render that item so we can say
03:57:00.199 render item we have a callback function
03:57:03.319 where we get access to that item and for
03:57:06.199 each one we return a driver card so this
03:57:10.319 is another component which we can create
03:57:12.479 in the components folder
03:57:15.279 let's create it by saying a driver card.
03:57:19.760 DSX you know the drill const driver card
03:57:24.239 is equal to a simple immediate return
03:57:27.960 component where we render a view with a
03:57:31.760 text that says something like driver and
03:57:35.359 we can immediately export default that
03:57:38.159 card going back we can import this card
03:57:42.199 and if we render it we'll have to go
03:57:43.920 back back let's go to Scranton
03:57:46.279 Pennsylvania and click find now and we
03:57:48.920 can see four different drivers to each
03:57:51.600 one of these drivers we can pass the
03:57:53.560 item which is basically the entire
03:57:56.000 information about a specific driver of
03:57:58.720 course in the driver card we'll have to
03:58:00.800 accept that prop so let's do that right
03:58:03.479 away it'll accept the item of a type
03:58:07.800 writer card props and basically what
03:58:11.239 we're developing here is this card where
03:58:14.120 where we show a profile photo of the
03:58:15.760 driver their name their rating how much
03:58:18.960 they cost how much it would take for
03:58:21.040 them to get to us and how many seats
03:58:23.319 their car has as well as their car photo
03:58:26.479 to speed up our workflow just a tiny bit
03:58:28.920 you can find it right here in the
03:58:30.439 Snippets copy it and paste it here
03:58:33.359 you'll notice that it is nothing more
03:58:35.479 than a touchable opacity basically a
03:58:37.920 button that you can click that has an
03:58:40.239 image and then with some repeated pieces
03:58:42.800 of text that that is it we can nicely
03:58:45.439 scroll through it we can click on them
03:58:47.960 this is looking great the only thing
03:58:50.439 we're missing back at confirm ride is
03:58:53.760 going to be this time not a header but a
03:58:57.199 list footer
03:58:59.720 component where we can define a callback
03:59:02.720 function and then Define a
03:59:06.279 view which we can
03:59:08.600 close that will have a class name equal
03:59:12.239 to margin X of five and margin top of
03:59:16.159 10 and within it we can render a custom
03:59:19.159 button with a title select ride and on
03:59:23.840 press we can run the Callback function
03:59:27.040 that calls the
03:59:29.159 router. push to slash in parentheses
03:59:34.880 root slash book- R so right now it is
03:59:39.600 red because we don't yet have that route
03:59:42.040 but soon enough it'll be there before we
03:59:44.479 go ahead and create it there's one more
03:59:46.199 thing we have to do and that is create a
03:59:48.840 completely new store so right now we
03:59:52.199 have the store for the location but
03:59:55.000 right below it there's a store for the
03:59:57.720 drivers where we're keeping track of all
04:00:00.239 of the active drivers and we're keeping
04:00:02.159 track of which driver has our user
04:00:04.960 selected so we can access that store
04:00:08.159 like we're used to so far by saying
04:00:10.520 const something is equal to use driver
04:00:15.479 store and from it we can extract the
04:00:18.520 drivers we can extract the selected
04:00:21.399 driver as well as set the selected
04:00:24.279 driver to the one that we click so to
04:00:27.760 the driver card we can pass the selected
04:00:30.960 equal to selected driver and we can add
04:00:34.760 the exclamation mark at the end because
04:00:36.560 we know it exists and then we can call
04:00:38.880 the set selected where we have a
04:00:41.359 callback function where we can call the
04:00:43.600 set selected driver and to it we can
04:00:46.920 pass the item. ID basically the ID of
04:00:50.880 the driver we're selecting and in this
04:00:53.960 case the drivers here override the
04:00:56.560 drivers above which is okay because we
04:00:58.840 don't need to Define them to times
04:01:01.239 rather I'll remove the drivers from here
04:01:04.319 and back on the map where we use the
04:01:06.199 drivers for the first time we can call
04:01:08.720 the set drivers go into the use effect
04:01:12.199 and right here at the top of it we can
04:01:14.319 say set drivers and pass our current
04:01:17.560 fake drivers that we have at the top
04:01:19.920 there's going to be a type mismatch but
04:01:21.640 don't worry too much about that this
04:01:23.159 will have to be removed anyway very soon
04:01:25.920 as soon as we add real drivers so now
04:01:28.800 let's create the last screen in our flow
04:01:31.319 which is going to be book ride we can do
04:01:34.319 that by going to root and creating a new
04:01:37.359 file called book ride. DSX it's going to
04:01:41.960 be a const book ride ride
04:01:44.720 component and we can run export default
04:01:48.439 book ride while we return a
04:01:52.120 view with a
04:01:54.520 text that's going to say book ride in
04:01:58.880 the layout we can also add book ride
04:02:01.640 back just so we can remove the
04:02:04.600 header now let's go through our entire
04:02:07.960 process one more time to test it out of
04:02:10.800 course the last screen being the book
04:02:12.840 ride oh and don't forget to add a return
04:02:15.439 statement right here before so that
04:02:17.680 everything works so if I do this and if
04:02:21.040 I go visit Michael from the office to
04:02:24.800 Scranton
04:02:26.000 Pennsylvania I'll click find now we can
04:02:29.159 see different drivers soon enough we'll
04:02:31.600 be able to select only one right now
04:02:33.800 we're selecting all of them and we can
04:02:36.040 click select ride and that's going to
04:02:38.199 lead us to the last screen in this ride
04:02:41.640 selection sequence where we can find
04:02:43.880 finally confirm that this is our driver
04:02:46.640 and we are ready to book a ride with
04:02:48.800 them and in terms of actual design this
04:02:51.960 is the page we'll develop next as you
04:02:54.840 can see it is very similar to previous
04:02:57.760 Pages we're still using the ride layout
04:03:00.439 and then we show something in the bottom
04:03:02.600 sheet we're so close to getting to the
04:03:05.399 payments part and we've already done a
04:03:08.040 lot of UI I really want to focus on the
04:03:10.880 functionality we've been using fake
04:03:13.080 drivers and fake rides right here on the
04:03:15.520 homepage so it's about time to turn all
04:03:18.680 of that into real data and real
04:03:21.399 databased
04:03:22.520 interactions so just so we can do that
04:03:24.880 very quickly I just provided you with
04:03:26.880 the UI for the root book ride which you
04:03:30.000 can copy here and just paste in this
04:03:32.520 book ride page just make sure to fix
04:03:35.760 this import where it's going to say ride
04:03:39.720 layout and there we go now we have the
04:03:42.600 ride information but it seems that it's
04:03:45.159 not properly picking up the driver
04:03:47.439 information I think I know why in the
04:03:50.680 map we're using fake
04:03:52.800 drivers and their IDs are
04:03:56.439 strings so when we're confirming the
04:03:58.760 selected driver we have to turn it into
04:04:01.239 a number so we can wrap it just like
04:04:04.080 this into a
04:04:06.159 number and back in the book ride we can
04:04:09.000 now consol log both the
04:04:12.199 drivers as well as has the selected
04:04:14.720 driver so we can do it just like so and
04:04:18.800 save
04:04:19.760 it we can see that selected driver is a
04:04:22.479 string of
04:04:24.279 one and we can see all drivers and there
04:04:27.640 should be one with the ID of one so now
04:04:30.720 it's just comparing the driver. ID which
04:04:33.760 is turned into a number format which is
04:04:36.399 equal to the selected driver ID so if I
04:04:39.399 go back choose one of these there we go
04:04:43.359 we can see the right information and
04:04:45.920 just the pickup time is not good so
04:04:48.359 right here for the pickup time we can
04:04:50.880 check if there is driver details time or
04:04:54.239 we can say something like 5 minutes this
04:04:57.120 is going to be fixed once we have the
04:04:58.520 real data but right now this is looking
04:05:02.080 great the only thing that is missing on
04:05:04.439 this screen is the confirm ride button
04:05:07.359 but that won't be just a simple button
04:05:09.720 it'll open up the entire stripe payment
04:05:12.479 window where will be be able to choose
04:05:14.399 from many different payment options and
04:05:16.800 issue a payment after which we'll be
04:05:19.040 redirected to the success model screen
04:05:21.960 so for the next step we can scroll all
04:05:24.279 the way down below this View and we can
04:05:27.159 render a new component which we can
04:05:29.279 create under the components folder and
04:05:32.000 we can call it payment.
04:05:35.120 TSX it'll be a react functional
04:05:37.600 component called
04:05:39.600 payment we don't have any props for now
04:05:43.040 but you know the drill it will return a
04:05:46.319 view that will have a
04:05:49.800 text that'll say payment and we can do
04:05:53.880 export
04:05:55.399 default payment right here at the bottom
04:05:58.600 now back in the book ride we can now
04:06:01.120 import the
04:06:03.800 payment and you can see it right here at
04:06:06.239 the bottom the payment itself will
04:06:09.479 simply be a react fragment that'll load
04:06:12.760 a custom button so here we can say
04:06:15.640 custom
04:06:17.000 button with a title equal to confirm
04:06:21.640 ride a class name equal to margin y of
04:06:25.279 10 to divide it a bit from the top and
04:06:27.199 bottom and on press we want to call a
04:06:30.199 function called open payment sheet this
04:06:34.479 is coming from stripe so we can declare
04:06:37.319 this function right here const open
04:06:40.920 payment sheet is equal to an AS Arrow
04:06:44.199 function which for now we can leave
04:06:47.560 blank so if we quickly go back to that
04:06:51.120 last screen that we had you can see that
04:06:54.239 now there is a confirm ride button which
04:06:57.199 means that we can focus on implementing
04:06:59.199 the payments big step ahead so let's
04:07:02.439 dive right into it great job when coming
04:07:05.040 this far for payments will of course use
04:07:08.239 stripe one of the largest
04:07:10.159 infrastructures for accepting any kind
04:07:12.520 of payments online online so head to
04:07:15.120 stripe.com and start now you can create
04:07:18.239 a new account or sign in once you sign
04:07:21.439 in you can turn on the test mode and
04:07:24.720 that'll make sure that all the
04:07:25.960 information that you can see here is
04:07:27.720 test data so no real transactions will
04:07:30.560 be processed here then you can go to
04:07:33.080 developers and API keys and here you
04:07:36.640 should have some of the standard keys or
04:07:38.640 if you don't have them already you can
04:07:40.199 just create them so I'll copy my
04:07:42.399 publishable key and I'll head to
04:07:45.760 myv and add a new Expo undoru unor
04:07:50.760 stripe uncore publishable underscore key
04:07:54.760 and make it equal to the key that I just
04:07:56.359 copied we'll also need our secret key so
04:07:59.520 let's copy it and add a new stripe
04:08:03.760 secretor key we don't have to add Expo
04:08:07.159 public before because we'll use this
04:08:09.080 only within the API routes so it is
04:08:11.560 truly secure now that we have our keys
04:08:14.359 let's open up the documentation page
04:08:16.520 thankfully Stripes docs are one of the
04:08:19.080 best documentations out there in the
04:08:21.479 development industry period so I'll link
04:08:24.199 this documentation page down in the
04:08:25.960 description where you can collect
04:08:28.080 payment details before creating a
04:08:30.040 payment intent and thankfully they have
04:08:32.640 guides for web iOS Android and react
04:08:35.680 native so we can just follow the steps
04:08:38.680 first we have to install and set up
04:08:41.000 stripe we can install stripe as well as
04:08:44.119 stripe react native so let's copy this
04:08:46.960 and paste it in our terminal and
04:08:49.080 alongside that I'll also copy this other
04:08:51.600 part using mpm the first one is serverid
04:08:55.000 stripe and the second one is stripe for
04:08:57.760 react native s DEC once we do that we
04:09:00.880 want to initialize stripe by using the
04:09:03.640 init method and this is within the
04:09:05.840 stripe provider and do you know where
04:09:08.199 we'll use this well we'll only wrap our
04:09:11.800 book ride page with this
04:09:13.920 so let's go ahead and copy this entire
04:09:15.880 file close all of the currently open
04:09:18.439 files and just open up the book ride I
04:09:22.279 can zoom this out just so we can see
04:09:23.840 what's happening a bit better and I'll
04:09:26.640 paste it right here at the top we'll
04:09:29.560 have to make some modifications for
04:09:31.640 example we won't be needing this entire
04:09:34.479 new functional
04:09:36.600 component next we'll have some use
04:09:39.399 effects functions as well as use States
04:09:43.399 that we can copy and move into our book
04:09:46.239 ride function and finally we have the
04:09:48.640 stripe provider itself which we can
04:09:51.760 copy and wrap our entire ride layout
04:09:56.319 with and finally we can close this
04:09:59.600 stripe
04:10:01.279 layout or rather should they say stripe
04:10:04.279 provider so I'm going to do it just like
04:10:09.520 this and
04:10:11.479 save as you can see now we have copied
04:10:14.600 over the logic for stripe with that we
04:10:17.760 have to import use state from react as
04:10:21.800 well as import use effect from react as
04:10:25.040 well next we need this fetch key
04:10:27.800 functionality and this is going to be a
04:10:30.080 call to our own server from which we can
04:10:32.800 fetch our secure stripe key to make sure
04:10:35.600 that we really want to process that
04:10:37.279 payment for now I will comment this part
04:10:40.080 out next we can scroll down and we need
04:10:43.119 to to enable different payment methods
04:10:45.239 that's in the payment method settings so
04:10:48.000 if you follow that link you'll see many
04:10:50.080 many different options that'll be
04:10:51.720 enabled depending on where you're at but
04:10:54.199 for now I'm okay with Apple and Google
04:10:56.520 pay as well as cards so I'll leave it as
04:10:59.680 it is and we can collapse the first two
04:11:01.880 steps entirely the third step is to set
04:11:04.880 up a return URL on the client side and
04:11:08.520 they say that we can put this within the
04:11:10.159 app. DSX we can skip this part because
04:11:13.359 if you're using Expo it says to set up
04:11:15.239 your scheme in ab. Json and that has
04:11:17.520 already been set up for us so thankfully
04:11:19.880 we can skip setting up the return URL
04:11:23.080 next we can collect the payment details
04:11:25.199 on the client side so we need to
04:11:27.520 initialize a payment sheet we can copy
04:11:30.399 this entire part of the code and this
04:11:32.640 will go on the checkout screen in our
04:11:34.760 case that'll be the payment screen so we
04:11:37.920 can go over to payment and we can paste
04:11:41.080 it right here at the top
04:11:44.119 you'll notice that we'll have to remove
04:11:45.960 the closing function block and remove
04:11:49.000 the export default checkout screen
04:11:50.720 because we already have our own payment
04:11:52.920 screen let's save it let's move the
04:11:56.399 import a bit
04:11:58.040 up and now this is starting to make a
04:12:00.479 bit more sense I will collapse
04:12:02.520 everything just so you can see what's
04:12:04.680 happening and we also need to move just
04:12:06.920 a few things from the book ride it's
04:12:09.199 going to be the publishable key fetch
04:12:11.119 publishable key and the use effect we
04:12:13.399 can move those things over to the
04:12:14.960 payment as well just to have everything
04:12:17.319 in one place I'll paste it right
04:12:20.800 here we can move the states to the top
04:12:24.040 right here and the only thing we have to
04:12:26.439 change is now that we have moved the
04:12:28.479 publishable key we have to actually
04:12:30.479 fetch it from environment variables in
04:12:32.880 the book ride so we can say process.
04:12:35.920 env. xoor public stripe
04:12:41.479 publishable key and I'm going to add an
04:12:44.479 exclamation mark because we know that
04:12:46.159 it'll be
04:12:47.279 there and we can move the Imports for
04:12:50.080 the used State and use effect over to
04:12:52.600 the payment oh we already have it great
04:12:55.760 so now let me Zoom this out a bit so you
04:12:58.119 can better see it and let's see what we
04:13:00.560 have so far in the payment we have this
04:13:03.159 publishable key which we won't really
04:13:04.920 need because it's going to be coming
04:13:06.319 from environment variables so we can
04:13:08.279 delete that we have the init payment
04:13:10.680 sheet and present payment sheet so we
04:13:13.880 first have to initialize it and then we
04:13:16.000 can present it we have a function called
04:13:18.640 initialize payment sheet which will call
04:13:21.319 when we want to initialize it and we
04:13:23.279 have a confirm Handler which they put
04:13:25.119 here for us and it'll be explained later
04:13:28.000 and in our case we don't need this
04:13:29.520 function to fetch the publishable key
04:13:31.680 we'll just use our own API calls to
04:13:33.640 fetch it so I can remove the use effect
04:13:36.520 as well just to make it a bit simpler
04:13:38.760 there we go now it's pretty simple we
04:13:41.000 have a function to initialize it a
04:13:42.640 function open it and our own onpress
04:13:45.640 function that should actually call these
04:13:47.640 functions and make the magic happen and
04:13:50.040 that's exactly what happens in The Next
04:13:51.479 Step where we decide to present the
04:13:53.640 payment sheet so we don't need to copy
04:13:56.840 this entire function block we can just
04:13:58.760 copy what's in it so the const error and
04:14:02.359 then ifs and elses and we can paste it
04:14:05.000 within the open payment sheet here we
04:14:08.000 also need to import the payment sheet
04:14:10.520 error and before we present the payment
04:14:13.359 sheet as I told you we first need to
04:14:15.640 initialize that payment sheet so right
04:14:18.080 here at the top I can say
04:14:22.080 await initialize payment sheet which we
04:14:26.159 call as a function once we initialize it
04:14:29.279 we can check if there are any errors and
04:14:31.239 if so we can just let people know that
04:14:33.600 there are errors by using the react
04:14:36.279 natives alert functionality so alert.
04:14:39.800 alert make sure to import it we can say
04:14:42.479 error code
04:14:44.399 code is error. code and we can also
04:14:48.680 render the error message there we go
04:14:52.399 else if there's no error we can set a
04:14:54.960 new state of success so let's define
04:14:58.000 that new state right here at the top by
04:15:00.800 saying use
04:15:02.520 State I'll call it success and set
04:15:05.520 success at the start set to
04:15:08.399 false and then in the else right here we
04:15:11.600 can set success
04:15:13.560 equal to true and we don't actually need
04:15:16.359 this secondary if and else we just need
04:15:19.080 the inner one so if there is an error we
04:15:22.560 show this and then else we can set the
04:15:26.840 success
04:15:28.439 great so this is a function for opening
04:15:31.279 a payment sheet let's see what else do
04:15:33.319 we have to do finally we have to confirm
04:15:36.319 the payment but we haven't even tested
04:15:38.720 whether everything works so far for us
04:15:41.600 so before we can confirm the payment
04:15:43.720 let's go back and try to actually open
04:15:45.880 up the payment sheet okay so we can go
04:15:48.760 to any kind of
04:15:51.880 location find choose a
04:15:55.040 driver and click
04:15:57.560 confirm this time we get an error saying
04:16:00.319 you did not provide an API key I think
04:16:03.239 that's because we haven't reloaded our
04:16:04.720 application since we added our key
04:16:06.640 because if you look at it here we indeed
04:16:08.720 are passing our publishable key we might
04:16:11.840 also need to fix our scheme scha so
04:16:14.000 let's make a change to that in our book
04:16:16.600 ride for the merchant identifier we can
04:16:19.560 do something like let's maybe do
04:16:23.239 merchant. uber.com doesn't really matter
04:16:27.159 and then the URL schema has to be the
04:16:29.239 same as you have in your app. Json I
04:16:32.720 think by default it is set to my app as
04:16:35.880 you can see right here so let's leave it
04:16:38.439 like that and let's reload our
04:16:40.439 application by stopping it from running
04:16:43.119 and then rerunning MPX Expo start with-
04:16:46.159 C to clear the
04:16:47.920 cache and press R to reload the
04:16:50.840 application I'll speed up the process of
04:16:53.159 going through all these screens and
04:16:55.479 would you look at that right here we
04:16:57.760 have a beautiful little strip payment
04:16:59.880 sheet where you can enter your credit
04:17:01.520 card information the fake one of course
04:17:04.040 you can even scan your card it is so
04:17:06.399 seamless and you can click pay or we
04:17:09.119 cannot right now that's because that's
04:17:10.960 our next step if we go here the next
04:17:13.040 step is to work on this confirm Handler
04:17:15.279 so we can actually initiate and process
04:17:17.840 a payment so now we have created this
04:17:20.080 sheet and we have to next figure out
04:17:22.040 what happens after we click the pay
04:17:24.720 button next let's copy this confirm
04:17:27.159 Handler
04:17:29.560 functionality and let's paste it right
04:17:31.800 here on top of initialized payment sheet
04:17:35.560 this confirm Handler will be used as a
04:17:37.680 method on this init payment sheet so
04:17:41.760 right after the mode we have the confirm
04:17:43.880 Handler which is equal to confirm
04:17:46.080 Handler which is this function we just
04:17:48.239 created here we had it below so we can
04:17:50.319 delete this empty part and now we have
04:17:52.399 the real confirm Handler right here the
04:17:54.960 next step for all of this to work is to
04:17:57.520 create a payment intent so I can
04:18:00.080 collapse this one where we collect the
04:18:02.159 payment details and finally we are ready
04:18:04.560 to create a payment intent meaning
04:18:06.960 create the possibility for the user to
04:18:09.080 pay and that has to happen on the server
04:18:11.920 side so now they created an app. poost
04:18:15.800 route in our case we'll be using expose
04:18:18.319 API routes so let's go ahead and copy
04:18:20.760 this and create this route that will
04:18:23.159 create a payment intent that'll be under
04:18:26.479 app API and we can create a new folder
04:18:31.000 called in parentheses stripe within it
04:18:35.359 we can create a new file called create
04:18:38.880 plus API dots and within here we can
04:18:43.080 paste what we just copied of course
04:18:45.840 we'll have to make little tweaks to make
04:18:47.840 it fit our Expo API route setup so we
04:18:51.680 won't be requiring anything we will
04:18:54.119 simply be
04:18:55.960 importing stripe capital letter from
04:19:01.439 stripe and then we can initialize a new
04:19:04.439 instance of stripe by saying con stripe
04:19:07.640 is equal to new stripe to which we
04:19:10.600 provide our secret key so that's going
04:19:12.520 to be be process.
04:19:14.520 env.
04:19:16.399 stripe
04:19:18.199 secretor key and you can add an
04:19:20.479 exclamation mark at the end because we
04:19:22.159 know it'll be there now we can remove
04:19:24.840 this stripe instance and the Imports for
04:19:27.479 Express and the setup for creating API
04:19:29.880 routes in Expo is just a bit different
04:19:31.880 so we're not immediately saying app.
04:19:34.239 post rather we're saying export async
04:19:39.040 function
04:19:41.239 post where we get get access to a
04:19:43.479 request of a type
04:19:46.040 request and we can extract the body by
04:19:49.560 saying const body is equal to await
04:19:52.640 request. Json and from here we extract
04:19:55.920 everything else we can extract things
04:19:58.199 like the name the email and the amount
04:20:01.479 from that body after we extract them
04:20:03.640 we'll have to check if a name doesn't
04:20:05.800 exist or if an email doesn't exist or if
04:20:08.359 the amount doesn't exist then we can
04:20:11.199 return a new re
04:20:13.840 response of
04:20:15.880 json.stringify where we can add an error
04:20:20.319 that's going to
04:20:21.640 say please enter a valid email address
04:20:26.560 and we can also pass a
04:20:29.640 status of 400 that has to go inside of
04:20:33.600 this block right here let's make sure we
04:20:36.760 are properly opening and closing
04:20:39.359 everything I don't think I properly
04:20:41.319 closed this function block right here
04:20:42.720 here if we fix that we should be
04:20:46.600 good there we go now this is immediately
04:20:49.439 structured in a better way by prier and
04:20:51.479 the isent and if we have all of this
04:20:54.800 information about a user we can start
04:20:57.000 creating our customer by saying let
04:20:59.800 customer and then we can have a check
04:21:02.000 whether the customer exists so we can
04:21:04.319 say const does customer
04:21:08.479 exist which is equal to a weight stripe
04:21:12.239 do customers. list and we're going to
04:21:15.439 search for a user with that specific
04:21:18.080 email next if a customer does exist in
04:21:22.040 that case we can say customer is equal
04:21:24.359 to does customer exist. data zero if a
04:21:28.680 customer exists we're going to get the
04:21:30.439 actual existing customer so we can say
04:21:33.520 existing customer from it we can extract
04:21:36.720 the data and then that length is greater
04:21:38.920 than one that's how we can check whether
04:21:40.680 the customer exists
04:21:43.040 else if a customer does not exist we
04:21:45.520 need to create a new stripe customer by
04:21:47.640 saying con new customer is equal to
04:21:51.640 await stripe. customers. create and we
04:21:55.520 pass a name and an email right within
04:21:58.359 the else if we have a new customer we
04:22:01.040 want to set the customer to be equal to
04:22:03.640 that new customer now how did I know to
04:22:06.720 do all of this stuff and not just create
04:22:09.239 the payment intent like the doc said
04:22:11.960 well even even though this General
04:22:14.359 collect payment before creating a
04:22:16.000 payment intent page was great it allows
04:22:18.399 us to do some basic stuff there is a
04:22:21.520 second documentation page this one right
04:22:23.920 here that talks specifically about
04:22:26.359 accepting payments in react native and
04:22:29.600 if you scroll down I think we have
04:22:31.239 implemented the couple of these first
04:22:33.680 points but one of these is that post
04:22:37.560 request about accepting a payment and
04:22:40.439 here they talk about creating custom
04:22:42.479 customers and then they also talk about
04:22:44.439 creating a payment intent for now we
04:22:46.800 have dealt with this part about creating
04:22:48.520 a customer and now we can copy the rest
04:22:50.960 of the stuff the link will also be down
04:22:53.040 in the description where we can create a
04:22:55.080 key for each customer and then create an
04:22:57.680 entire payment intent and return it to
04:23:00.319 the front end so let's copy this part
04:23:02.600 from line eight and let's paste it right
04:23:05.040 below our if for the
04:23:07.560 customer you'll notice that here we
04:23:09.880 create a key that we attach to a
04:23:12.080 specific customer and then we create a
04:23:14.640 payment intent using stripe. payment
04:23:17.000 intent. create and here we need to
04:23:19.479 specify the amount we're trying to
04:23:21.239 charge the user in this case notice that
04:23:24.000 I'm passing the amount as part of the
04:23:25.880 body so what we can do is instead of
04:23:28.960 using this default $10.99 price we can
04:23:33.319 instead run the parse
04:23:36.239 int of the amount and then multiply that
04:23:40.119 by 100 because all the the payments in
04:23:43.279 here are in cents so to get to the real
04:23:46.000 amount we have to multiply it by 100 we
04:23:48.680 can change the currency to USD for
04:23:51.359 American dollars we have a customer ID
04:23:54.479 and then they also enable something of
04:23:57.119 automatic payment methods which is very
04:23:59.359 cool and we can set that to true but in
04:24:02.439 this case just to make it work we'll
04:24:04.000 have to allow redirects and set to never
04:24:06.880 this is something that I found works
04:24:08.920 best with react native applications and
04:24:11.720 finally we have to return not res. Json
04:24:15.239 but rather a new response that looks
04:24:18.680 like this and then we have to first
04:24:21.399 stringify it so json. stringify and then
04:24:25.119 we have this entire object so let's fix
04:24:28.080 that there we go we're passing the
04:24:30.760 payment intent in this case we can send
04:24:33.439 out the entire payment intent and the
04:24:36.359 entire key so I will just leave it like
04:24:38.920 this payment intent the key and then the
04:24:41.720 customer ID
04:24:43.399 and I don't believe we have to send the
04:24:45.119 publishable key back because we already
04:24:47.040 have it on the front and side so I will
04:24:49.319 remove this part from here and this is
04:24:52.239 it this is our backend function to
04:24:55.880 create a payment intent it is lengthy
04:24:59.479 but it is mostly boilerplate code coming
04:25:01.840 from stripe that now allows us to come
04:25:04.600 back to the payment and implement it
04:25:07.359 specifically it'll happen in the confirm
04:25:09.960 Handler we're getting three things as
04:25:11.920 the param here the payment method the
04:25:14.319 should say payment method which we will
04:25:16.279 not need to use so I can just rename it
04:25:18.159 to an underscore that's kind of a good
04:25:20.319 practice if you're not using some of the
04:25:22.640 parameters and then we have to make a
04:25:24.640 request to our own server and stripe was
04:25:27.640 kind enough to already give us an
04:25:29.199 example of how we can do that in our
04:25:32.239 case we'll do it like this I'll say
04:25:36.520 const I'll destructure the payment
04:25:39.359 intent and the customer remember this is
04:25:41.880 just what we're sending from the back
04:25:43.319 end or you can call it Expo API route
04:25:46.359 and say await fetch API and we're going
04:25:50.199 to go to SL API in parentheses slst
04:25:54.920 stripe in parentheses SLC create the
04:25:58.119 route that we just created we can pass
04:26:00.920 additional options to it such as a
04:26:03.760 method of post headers equal to an
04:26:07.399 object where the content type is set to
04:26:10.080 application Json and most importantly we
04:26:13.239 need to pass over the body by running
04:26:16.080 json. stringify and passing in a name of
04:26:19.880 the person who is buying that's going to
04:26:22.000 be equal to a full name in this case
04:26:25.920 which we can get from the props into the
04:26:28.399 payment function so before we add this
04:26:31.880 part right here let's pass some props
04:26:34.359 into the payment function from the book
04:26:36.680 ride first things first right at the top
04:26:39.640 of the book ride we'll need to get some
04:26:41.760 information about the user and we can do
04:26:43.920 that easily with clerk by saying const D
04:26:46.920 structure the user is equal to use user
04:26:51.800 how
04:26:53.040 convenient now if we go down we can pass
04:26:56.399 all of the user related information to
04:26:58.279 the payment so we know who is making the
04:27:00.359 actual payment we can pass things like
04:27:04.159 full name is equal to user question
04:27:07.239 mark. full name and we can end each one
04:27:10.560 of these in exclamation mark because
04:27:12.880 clerk is not sure they're going to be
04:27:14.359 there depending on different use cases
04:27:16.760 but we know that it will indeed be there
04:27:18.840 so we can tell typescript that we can do
04:27:21.319 the same thing for the email by saying
04:27:23.560 user question mark. email addresses
04:27:27.239 z. email address exclamation mark and
04:27:31.760 then we need to pass the amount of the
04:27:33.680 drive so that's going to be driver
04:27:36.680 details question mark. price next we
04:27:40.560 need the driver ID as as well which is
04:27:42.840 going to be driver details question
04:27:44.680 mark. ID and finally ride time which is
04:27:48.439 going to be equal to driver details
04:27:50.680 question mark.
04:27:53.040 time and now we can go into the payment
04:27:56.680 and we can accept all of these
04:27:58.840 props let's do it right away by getting
04:28:02.760 the full name the email the amount the
04:28:07.560 driver ID and the ride time and all of
04:28:11.760 these will will be of a type payment
04:28:14.640 props coming from types now that we have
04:28:17.439 these we can send more information to
04:28:19.600 the server by saying that the name will
04:28:22.040 be equal to either the full name or
04:28:25.960 email
04:28:27.159 dosit and we can split it by the email
04:28:29.720 sign and take the first part we can then
04:28:32.159 pass over the email which will be equal
04:28:34.119 to email the amount which will be equal
04:28:36.960 to amount and the payment method
04:28:42.159 ID which is going to be equal to payment
04:28:45.199 method.
04:28:47.359 ID again webstorm nicely found that I
04:28:50.760 have a typo it was supposed to be
04:28:53.239 payment now that we have this we
04:28:55.520 basically have everything we need to get
04:28:58.439 a payment intent or rather to create a
04:29:00.760 payment intent on the back end and pass
04:29:03.359 it over back to us on the front end so
04:29:06.640 right here below we can make a check and
04:29:09.920 see if payment intent
04:29:12.720 centore secret so are we getting any
04:29:15.239 secret from here if we are then we can
04:29:18.479 actually make a payment based on the
04:29:20.760 payment intent that we
04:29:22.880 created and to make that happen we'll
04:29:25.399 have to create a second API route for
04:29:28.439 payments so let's create a new file
04:29:31.000 within the stripe folder and let's call
04:29:33.760 it Pay Plus api. Ts and it'll start
04:29:39.080 similar to create we can copy the import
04:29:42.199 of stripe we can copy the part where we
04:29:44.199 initialize stripe where we export an
04:29:46.560 async function and where we extract some
04:29:49.159 data from the body heck this part as
04:29:51.119 well will be the same where we check
04:29:52.640 whether we have all the necessary info
04:29:54.800 so let's copy these initial lines and
04:29:57.840 paste them into the payment API and make
04:30:00.840 sure to properly close everything of
04:30:03.680 course we'll have to make some changes
04:30:05.600 instead of getting the name email and
04:30:07.479 amount in this case we're getting some
04:30:09.399 more payment related stuff such as theay
04:30:12.000 payment uncore method _ ID the payment _
04:30:17.239 intentor ID and the customer ID and now
04:30:21.680 we can make a check whether all of these
04:30:23.720 indeed exist and if they don't exist we
04:30:26.680 can say something like missing required
04:30:29.520 payment information great but if we have
04:30:33.359 all of that payment information below
04:30:35.439 this if we can finally create a new
04:30:38.279 payment method by saying con payment
04:30:40.760 method is equal to wait stripe. payment
04:30:45.040 methods do attach so which payment
04:30:48.720 method we want to attach well the one
04:30:50.840 that we have the ID for so payment
04:30:53.119 method ID and which customer is paying
04:30:56.279 for that well we can provide that in the
04:30:58.319 second parameter customer is equal to
04:31:01.720 customer uncore ID that's going to look
04:31:04.920 something like this and below it we can
04:31:07.359 get the result of the payment by saying
04:31:09.279 const result is equal to await stripe.
04:31:14.279 payment intents do confirm to which we
04:31:17.840 can pass the payment intent id and we
04:31:20.760 can pass the payment method as the
04:31:22.960 second option inside of curly braces
04:31:25.600 where we can say payment method is of a
04:31:28.319 type payment method. ID finally once we
04:31:31.279 have the result we can send it over to
04:31:33.439 the front end by returning a new
04:31:36.279 response within which we have a Json
04:31:39.000 stringify with a success that says true
04:31:43.159 a message that says something like
04:31:45.880 payment confirmed successfully and a
04:31:49.119 result of that payment equal to result
04:31:52.119 of course if something goes wrong then
04:31:54.399 we have to have a catch so I'll copy
04:31:57.720 this entire block of code and put it
04:32:00.199 within a try and catch block so this
04:32:02.760 part goes into try and in the catch
04:32:05.439 where we get the
04:32:07.479 error we can consal log the error and we
04:32:12.359 can also return a new response that has
04:32:16.199 a Json stringify within it that has the
04:32:19.439 property of error equal to error and a
04:32:23.760 status equal to 500 pointing to a server
04:32:27.640 error so now with these two API routes
04:32:31.239 first of all we have created a payment
04:32:33.319 intent allowing our user to get the
04:32:36.920 possibility to pay and then with the
04:32:39.359 second API route we are actually
04:32:41.439 allowing allwing the user to pay based
04:32:43.600 on the provided payment intent so going
04:32:46.239 back to the payment we can now receive
04:32:48.399 that response on the front ins Side by
04:32:50.880 saying const destructure the result and
04:32:54.960 say is equal to await fetch API in
04:32:59.239 parentheses
04:33:00.760 API SL in parentheses stripe SL pay
04:33:06.400 it'll have similar properties as before
04:33:09.359 such as a method of post headers equal
04:33:13.118 to content type of application Json and
04:33:17.278 a body which will be a json. stringify
04:33:20.520 to which we need to pass all of this
04:33:22.160 important information from the payment
04:33:24.160 intent such as the payment undor method
04:33:27.400 uncore ID equal to payment method. ID a
04:33:32.400 payment uncore intentor ID equal to
04:33:36.278 payment intent. ID and what else do we
04:33:39.680 need I think it was is going to be let's
04:33:43.438 see customer ID so we can also pass the
04:33:48.080 customer ID is equal to customer because
04:33:52.359 that is actually the ID and now that
04:33:55.039 that is successful we can do the last
04:33:57.039 thing necessary which is to create a new
04:34:00.160 ride that means hooking up our driver to
04:34:03.320 our Rider and making sure that the rider
04:34:05.958 has actually paid and then we can create
04:34:08.240 a new ongoing ride we're not going to
04:34:10.919 test the payments yet yet before we can
04:34:13.400 create a new ride in the database so
04:34:16.400 let's do that next by checking
04:34:19.000 if result. centore
04:34:23.039 secret if it exists that means that
04:34:25.759 everything is ready to create a ride and
04:34:28.759 we have to be one scope above right here
04:34:30.919 to have access to this result here we
04:34:33.400 want to make a call to a new API route
04:34:36.759 of ride SLC create so let me close these
04:34:41.799 existing routes and let's create one
04:34:44.000 route but this time that will not be
04:34:46.438 just for stripe it'll be for creating
04:34:49.000 our own rides we can do that by creating
04:34:52.520 a new folder within our API folder
04:34:56.561 that's going to be called ride within
04:34:58.919 the ride we can create a new file called
04:35:01.840 create plus api. DS and within here we
04:35:06.639 have to connect to the neon database and
04:35:09.160 create a new record in the database most
04:35:11.879 this file will be just a single SQL
04:35:13.840 mutation so under Snippets in the GitHub
04:35:16.480 read me you can find the API ride create
04:35:19.680 plus API and you can copy it from here
04:35:22.680 and paste it right there you'll notice
04:35:25.879 that this is just a single try and catch
04:35:28.320 Block in the catch we're handling the
04:35:30.240 error and in the try we are getting all
04:35:33.160 the information from the body we are
04:35:35.278 destructuring it we're checking if it
04:35:38.320 all exists and then if it does we're
04:35:40.719 simply create creating a new SQL query
04:35:43.799 where we Define the fields and we Define
04:35:46.400 the values that we're passing into that
04:35:49.039 and finally returning this newly created
04:35:51.118 ride back to us again there is about 70
04:35:53.759 lines of code just because we had to
04:35:55.599 write pure SQL syntax nowadays there's
04:35:58.840 also tools like drizzle or Prisma so if
04:36:01.639 you'd like me to see use that more often
04:36:03.759 just let me know but sometimes it's good
04:36:05.599 to understand how Native SQL works
04:36:08.320 because these orm tools all use SQL
04:36:11.039 behind the scenes
04:36:12.160 and as I promised if you want to learn
04:36:13.840 more about SQL and also or like Prisma I
04:36:17.680 would highly recommend checking out this
04:36:19.359 course that we created which is for now
04:36:21.759 completely free for you so here you can
04:36:23.561 learn a bit more about different SQL
04:36:26.080 mutations such as inserting data which
04:36:28.919 is exactly what we're doing in this one
04:36:31.160 it teaches you how you can insert
04:36:32.680 different properties take a look at this
04:36:34.599 it is exactly what we're doing insert
04:36:37.118 into users table name and email and then
04:36:40.799 you provide the values for that name and
04:36:42.919 email check this out insert into rides
04:36:47.000 origin address and then you provide the
04:36:49.039 value for the origin address pretty
04:36:50.958 straightforward but it is a bit lengthy
04:36:53.199 so I decided to provide it here for you
04:36:55.520 there's also going to be just one more
04:36:57.400 similar file to this one one more API
04:36:59.840 route where instead of creating
04:37:02.400 something we'll be fetching all of these
04:37:04.719 things from the rides so that's also
04:37:06.561 going to be lengthy so let's just
04:37:08.599 quickly create it it's going to be under
04:37:10.599 ride create create a new file it'll be a
04:37:13.520 dynamic route based on the ID so it's
04:37:15.680 going to be square brackets ID plus API
04:37:19.118 dots and you can find this file in the
04:37:22.000 GitHub readme down below so you can
04:37:24.080 paste it as well as you can see instead
04:37:26.480 of inserting in this case we're simply
04:37:28.680 selecting all of the properties that we
04:37:30.799 want to get from this request that we're
04:37:33.320 making great now we can go back to
04:37:36.438 payment and we can call this API request
04:37:39.438 that creates a new ride but before that
04:37:42.520 we'll have to get away from our mock
04:37:44.480 drivers and we'll have to create real
04:37:46.561 drivers in the database remember right
04:37:49.278 now I think in the map right we have
04:37:52.199 some fake drivers right here now what we
04:37:54.680 could do is manually create all of these
04:37:57.080 driver accounts but we can also go to
04:37:59.958 the SQL editor and we can run an SQL
04:38:03.080 mutation to create all of these drivers
04:38:06.359 so in this GitHub Snippets read me you
04:38:08.759 can see the create driver stable SQL
04:38:11.759 which you can copy and then paste right
04:38:14.118 here to create a table it says connected
04:38:17.240 there we go it's exceeded and then the
04:38:19.561 second thing we can do is seed the
04:38:21.958 database with the drivers seed is a word
04:38:24.639 that is used when you want to quickly
04:38:26.199 populate the database with some data so
04:38:29.160 we can copy this command and paste it
04:38:32.160 right here where we're going to insert
04:38:34.320 some drivers right here we can click run
04:38:38.039 and it has been successful we can verify
04:38:41.000 if we go into tables you should be able
04:38:43.438 to see a driver's table with four
04:38:45.561 different drivers great so now we can
04:38:48.719 remove these fake drivers and we can
04:38:51.199 actually fetch real drivers from the
04:38:53.799 database let's do just that we're using
04:38:56.639 those drivers right here in the use
04:38:58.799 effect and even I added a note right
04:39:01.278 here that we need to remove that rather
04:39:04.039 we have to fetch them for real and we
04:39:06.278 can do that by first creating an API
04:39:08.599 route that will give us back all of
04:39:10.480 those drivers so let's do it by creating
04:39:13.599 a new API route in the API folder called
04:39:18.359 driver Plus
04:39:20.320 api.
04:39:21.919 Ts and this one we can write ourselves
04:39:24.840 just so we can see how it is to write
04:39:26.438 some simple SQL queries we can say
04:39:30.240 export async function get where we can
04:39:35.118 open up a try and catch
04:39:37.840 block with the
04:39:40.120 error if if something goes wrong we can
04:39:42.798 just console. log. error and we can also
04:39:47.000 return a response. Json where we send
04:39:51.680 over the
04:39:54.400 error which is equal to the error
04:39:57.040 message in the try we can actually
04:39:59.718 access the neon DP database by saying
04:40:01.958 const SQL is equal to Neon coming from
04:40:05.798 neon database serverless to which we
04:40:08.280 need to provide our database URL or our
04:40:11.320 our connection string so let's say
04:40:13.480 process. env.
04:40:16.520 databaseurl it is that simple and now we
04:40:20.120 can say const response is equal to await
04:40:24.600 SQL we write a template string and we
04:40:28.120 select everything from drivers that's it
04:40:33.240 give me back all the drivers and with
04:40:35.798 that we can return response. Json where
04:40:39.320 we pass over the data which is equal to
04:40:42.040 response so now back in the map we can
04:40:44.718 fetch all of those drivers let's do that
04:40:46.958 right away at the top by saying const
04:40:49.878 data which we can rename to
04:40:52.200 drivers we also get the loading State
04:40:54.798 and the error States and that is equal
04:40:57.280 to use fetch we can specify the type
04:41:01.638 it'll send back an array of drivers like
04:41:04.638 this and here we need to specify the URL
04:41:08.280 which we're calling that's going to be
04:41:10.000 forward slash in parentheses API SL
04:41:14.560 driver I'm going to minimize this just a
04:41:17.480 bit I hope you can still see it and
04:41:20.040 we're basically fetching all the drivers
04:41:21.920 here so now we can make use of the
04:41:24.600 loading State and the error states by
04:41:27.120 adding something above the map so we can
04:41:29.798 say if we are loading or if there is no
04:41:34.400 user latitude or if there is no user
04:41:38.360 longitude in that case we can return a
04:41:41.760 view we can zoom it in and within it we
04:41:44.320 can return an activity indicator with a
04:41:47.600 size of small and a color equal to Hash
04:41:51.878 0000
04:41:53.280 0 it looks like that broke my screen
04:41:56.200 share right here no worries we'll fix it
04:41:58.440 soon we have to import The View right at
04:42:01.560 the top and Below we can check if
04:42:03.920 there's an error but let's make sure to
04:42:05.920 properly close this I noticed that I'm
04:42:07.600 missing the curly braces here if there
04:42:10.360 is an error we can basically have a very
04:42:12.798 similar view to this one I forgot to add
04:42:15.400 the class names so let's give it a class
04:42:17.760 names equal to flex justify Dash between
04:42:22.600 items - Center and w- full this will
04:42:25.798 basically make it appear in the middle
04:42:28.080 we can duplicate this entire view if
04:42:30.000 there's an error of course let's copy
04:42:32.520 the return as well and only instead of
04:42:35.840 the activity indicator we'll show a
04:42:38.920 text that'll say error and then we can
04:42:41.840 render the actual error
04:42:43.920 message and we have to import text from
04:42:47.440 react
04:42:48.400 native great so now we have the error
04:42:50.920 handling the loading handlers and we are
04:42:54.560 fetching the drivers so let's put those
04:42:57.560 drivers to use scrolling down we won't
04:43:00.480 be setting the drivers right here we'll
04:43:02.680 be setting them somewhere else in that
04:43:04.680 second place will be a new use effect
04:43:07.440 right below this one because now that we
04:43:09.360 have the real drivers we can also create
04:43:12.440 a path between the writer and the driver
04:43:15.400 so we can show it on the screen you know
04:43:17.560 that route the blue line from you and
04:43:20.240 the other person that's exactly what
04:43:22.280 we'll create basically navigation so
04:43:25.400 let's create a new use effect and we can
04:43:28.040 have an if statement here if markers do
04:43:31.440 length is greater than zero and if
04:43:34.718 destination latitude is not equal to
04:43:37.360 undefined so we cannot calculate
04:43:39.520 something if we don't have a destination
04:43:41.400 latitude and if destination longitude as
04:43:45.120 well is not equal to
04:43:47.560 undefined or we can just say if it
04:43:49.920 exists right so if markers that length
04:43:53.240 and if destination latitude and
04:43:55.480 destination longitude in that case we
04:43:58.240 can call a special utility function
04:44:00.680 called calculate driver times that's
04:44:04.200 going to look a bit like this and to it
04:44:06.920 we have to pass a couple of prompts we
04:44:09.200 need to pass all of the markers which
04:44:11.160 want to show on the screen which are
04:44:12.440 basically the cars the user's current
04:44:15.958 longitude the user's current latitude
04:44:19.400 and the destination latitude as well as
04:44:21.840 a destination
04:44:24.520 longitude that function is an Asing
04:44:27.320 function so we can call a that then on
04:44:29.400 it which will give us access to all of
04:44:31.638 the drivers and now once we get that we
04:44:34.958 can set
04:44:36.320 drivers to be drivers as marker data
04:44:41.080 array so this is to make sure that the
04:44:42.798 map understands that the drivers are
04:44:44.520 indeed appearing on the
04:44:46.400 screen and we can recall this function
04:44:49.120 whenever the markers change when the
04:44:51.520 destination latitude changes or when the
04:44:54.120 destination logitude changes as well so
04:44:57.320 now let's give it a shot I will close
04:44:59.520 this sheet and I'll say that I want to
04:45:02.320 go let's say somewhere near in San
04:45:05.360 Francisco and first of all don't forget
04:45:07.638 when you make a lot of changes reload
04:45:09.840 the entire application
04:45:11.638 so I'll stop it from running and I'll
04:45:14.040 rerun it one more time with the Das C
04:45:16.958 Tab and then press R to reload the
04:45:19.160 entire
04:45:21.320 application there we go oh this clerk
04:45:24.000 warning just reminded me that we need to
04:45:25.600 implement the O still so that's
04:45:27.680 something that we'll do very soon but
04:45:29.920 now you can see different drivers on the
04:45:31.520 screen as you were able to see before
04:45:33.798 but now if we go let's say we are in the
04:45:36.200 lower Pacific Heights right now if we
04:45:38.520 want to go to this nice park we can go
04:45:41.200 to Scott Street so let's do
04:45:44.320 Scott Street and that's in San
04:45:48.400 Francisco you can see that we have San
04:45:51.280 Francisco and then Scott Street and we
04:45:53.680 can click find now and this will open up
04:45:56.400 the different drivers we can select one
04:45:58.680 of those drivers and these now are real
04:46:01.400 drivers you can see that they changed
04:46:03.080 since the last time that we had the
04:46:04.480 drivers now they're coming from the
04:46:06.160 database we might need to do some work
04:46:08.320 to properly show the actual distance in
04:46:11.480 minutes so let me do that I think this
04:46:14.560 is in the driver card where we have the
04:46:17.440 minutes right here let's see if I can
04:46:19.920 find it this is the
04:46:22.878 price and right next to the price we
04:46:25.200 have the time we can use the parse
04:46:27.920 integer I believe to make this work and
04:46:30.680 now we can see four minutes 3 minutes
04:46:32.440 and more that's good and it looks like
04:46:35.240 the time needs to be a string so I can
04:46:37.878 easily convert this into a string by
04:46:40.878 maing it into a template string like
04:46:44.320 this great and it still works so now we
04:46:48.760 can choose a different driver and you
04:46:50.600 can see that on the screen the driver
04:46:52.440 that you choose becomes green so you can
04:46:54.920 see how they're changing colors right
04:46:56.958 here so now if I choose let's go with
04:47:00.000 David he seems to be one of the cheapest
04:47:02.120 ones and the closest to us oh no no way
04:47:05.440 looks like Michael drives a nice yellow
04:47:07.958 car $2 and 2 minutes away let's go with
04:47:10.958 that one and I'll click select now we
04:47:14.000 can see all the information about
04:47:15.798 Michael looks like we need to do the
04:47:17.840 same thing for the time so let me copy
04:47:21.040 this entire thing go to the right
04:47:23.160 information so that is I believe under
04:47:26.120 pickup
04:47:27.480 time in the book ride yes and we just
04:47:30.638 need to wrap this properly so it's
04:47:32.160 driver details. time let's add it
04:47:35.920 here driver
04:47:39.360 details. time
04:47:42.480 and we can remove this mock
04:47:44.878 number let's make sure to close it
04:47:47.160 properly and save it and now it says 4
04:47:49.400 minutes nice but if I Collapse it I'm
04:47:52.680 still not seeing the path from my
04:47:54.718 location to where I want to go so let's
04:47:58.320 head over to the map and let's look into
04:48:00.760 the function that has something to do
04:48:02.878 with the drivers this one is setting the
04:48:05.920 driver's car locations and I believe we
04:48:09.400 have to add some more dependencies to it
04:48:11.320 you can see even our webstorm is
04:48:12.920 complaining that it needs further
04:48:15.958 dependencies those are going to be the
04:48:17.920 user
04:48:18.798 latitude and the user longitude so
04:48:21.480 whenever those change we can also recall
04:48:24.040 this use effect but that's not the
04:48:26.240 problem the real solution lies right
04:48:29.600 here in the map jsx currently we have
04:48:32.798 just the map view and we have the
04:48:34.840 markers but we have to make a connection
04:48:37.798 from our current initial user location
04:48:41.080 to the destination location so right
04:48:44.920 within the map below these three
04:48:47.480 parentheses we can check whether we have
04:48:50.120 access to the destination latitude and
04:48:52.920 destination
04:48:54.080 longitude and if we have then we can
04:48:57.760 return a react fragment or should I say
04:49:00.798 react native fragment that'll show
04:49:03.600 another marker which is going to be the
04:49:05.760 marker for the destination let's give it
04:49:08.240 a key so we can differentiate it from
04:49:10.320 the others
04:49:11.320 such as destination let's give it some
04:49:13.958 coordinates to show it on the map we
04:49:16.878 need to pass it the latitude which is
04:49:19.040 going to be equal to you can guess it
04:49:21.558 destination
04:49:22.798 latitude and the longitude which is
04:49:25.878 going to be equal to guess it
04:49:28.520 destination longitude we can also pass
04:49:31.638 it a title which is going to be equal to
04:49:34.718 destination so let's do just that
04:49:38.600 destination and we can give it an image
04:49:41.120 which is going to be a typical
04:49:43.360 icons.
04:49:45.480 pin and now check this out I can
04:49:48.360 actually see that I wanted to go to
04:49:50.878 Scott Street and would you look at that
04:49:53.040 there's some trees there that seems like
04:49:54.878 a nice place to take a walk around and
04:49:57.638 we can see the pin on there on your
04:49:59.958 screen you should also be able to see a
04:50:01.920 pin near your exact location so you can
04:50:04.680 see pin from and to but now let's create
04:50:07.878 directions from you to the PIN we can do
04:50:11.120 that by installing a new package so
04:50:13.878 let's open up a new terminal and say mpm
04:50:17.200 install
04:50:19.440 react-native-maps D directions and
04:50:22.400 that's going to allow us to below the
04:50:24.360 marker put this new map view directions
04:50:29.360 we of course need to import it at the
04:50:31.320 top by saying
04:50:34.520 import map view
04:50:36.840 directions from react native Maps there
04:50:40.878 directions that is great and now we need
04:50:43.638 to give it additional information so it
04:50:45.638 knows what to show we of course have to
04:50:48.120 give it An Origin which is going to be
04:50:50.120 our user's latitude that's going to be
04:50:53.080 user
04:50:54.080 latitude and we have to give it
04:50:56.080 longitude which is going to be our
04:50:57.920 current user's
04:51:00.400 longitude next we have to give it the
04:51:02.798 destination which is going to be similar
04:51:05.200 to what we have here we can copy the
04:51:07.400 coordinates of the pin where we want to
04:51:09.320 go latitude is destination latitude and
04:51:12.120 the longitude is the destination
04:51:14.160 longitude to it we need to provide the
04:51:16.520 API key and that key is coming from envs
04:51:19.958 so we can say process. EnV Dot and let's
04:51:23.320 check the exact name in our
04:51:25.558 envs it's going to be Expo public Google
04:51:29.558 API key so we can copy it paste it here
04:51:33.360 let's make sure to properly close this
04:51:35.320 destination and finally below the API
04:51:38.240 key we can also choose our stroke color
04:51:42.280 so the color of the path that can be a
04:51:45.120 bluish color of something like hash 028
04:51:49.878 6
04:51:50.840 FF and a stroke width of about two if we
04:51:55.558 save this we have to make sure that
04:51:57.160 we're properly enclosing it I think we
04:51:59.240 have two extra ending braces and we're
04:52:02.200 missing an equal sign right here and
04:52:04.680 would you look at that we now have a
04:52:07.160 complete path through the streets from
04:52:10.920 our current location on the map to the
04:52:14.160 destination location how cool is that if
04:52:18.040 you want to you can change the color and
04:52:20.000 you can make it a bit wider that's
04:52:22.200 totally okay too there we go this is
04:52:24.718 perfect and now we can even see maybe we
04:52:27.000 can go for this driver right here for
04:52:28.798 David instead of Michael so let's go
04:52:30.920 back let's choose David there we go that
04:52:34.558 Rider is now green and we can select the
04:52:37.920 ride and see where we want to go from
04:52:40.200 our our location to the destination
04:52:42.798 location great now where were we I think
04:52:46.440 we were on the payments where we want to
04:52:48.200 confirm the ride and just before we
04:52:50.760 actually pay it we wanted to create a
04:52:53.040 ride which we now actually can do
04:52:55.760 because we have real drivers in the
04:52:57.680 database we have created a real writer
04:53:00.600 when we created our account so the only
04:53:02.798 thing we have to do is to create a
04:53:04.798 server action that will connect it to
04:53:07.760 and book us a ride so let's head over to
04:53:10.520 to our API calls and check out our ride
04:53:14.520 create this is the one where we're
04:53:16.480 simply getting all the fields we
04:53:18.000 collected so far and then inserting it
04:53:20.558 into the database we can call it from
04:53:22.840 the front end now or should I say from
04:53:24.920 our device screen we can do that by
04:53:27.120 saying await fetch
04:53:29.878 API to which we can pass the URL of
04:53:33.920 Slash in parentheses
04:53:36.400 API SL rde SLC create
04:53:41.360 as additional options we can pass a
04:53:44.440 method equal to
04:53:47.160 post we can pass
04:53:49.600 headers equal to content type
04:53:52.760 application Json and we can pass the
04:53:55.558 body now keep in mind you know that in
04:53:58.520 the actual API request we are getting a
04:54:00.878 lot of things through the body so we
04:54:02.760 have to do the same thing here json.
04:54:07.240 stringify within an object and now we
04:54:09.840 have to pass all of the info we have
04:54:12.200 collected so far the user info the
04:54:14.840 destination info everything so let's say
04:54:18.400 origin address meaning where we're going
04:54:21.240 from is going to be equal to user
04:54:24.280 address and this user address we can get
04:54:26.840 from the location store so right at the
04:54:29.320 top we can get all of this great
04:54:31.040 information from the location store by
04:54:33.320 saying const something is equal to use
04:54:37.280 location
04:54:38.320 store and right here we we can get the
04:54:41.240 user address we can get the user
04:54:44.920 longitude user
04:54:47.120 latitude distination latitude
04:54:50.320 destination address and destination
04:54:53.280 longitude now in an Ideal World we
04:54:56.000 wouldn't need to destructure all of
04:54:57.760 these properties and then now again form
04:54:59.878 them properly ideally we would be using
04:55:02.878 the same exact names on both the front
04:55:05.080 end and the back end but sometimes it's
04:55:07.760 not like that sometimes stripe uses
04:55:10.360 underscores or Kebab case and you're
04:55:12.400 using camel case so it's always better
04:55:14.920 to destructure them and make sure that
04:55:16.558 you're passing the exact right names of
04:55:19.000 the variables on the back end right here
04:55:21.718 if we go to create ride or create ride
04:55:24.480 API this one right here you can notice
04:55:27.160 that we are inserting origin
04:55:29.920 address and not origin address with a
04:55:32.638 capital A right here so for that reason
04:55:35.240 we have to properly spell it here as
04:55:36.920 well origin address is equal to user
04:55:40.000 address address let's continue with
04:55:41.878 passing other properties as well such as
04:55:44.520 the destination address but make sure to
04:55:47.718 use the snake case right here is equal
04:55:50.520 to destination address in camel case we
04:55:53.718 can get the origin
04:55:55.840 latitude equal to user latitude and
04:55:59.360 origin longitude equal to user longitude
04:56:03.360 we can get the destination latitude
04:56:05.878 equal to destination
04:56:08.480 latitude make sure to put that in snake
04:56:12.040 case as well snake case is the
04:56:14.760 recommended case for postgress databases
04:56:17.680 that's why we're doing this and we can
04:56:19.680 do destination longitude equal to
04:56:21.718 destination longitude we can get the
04:56:23.798 rore time which is equal to right time.
04:56:28.080 to fixed Z we can do faircore
04:56:33.280 price to be equal to parse int we take
04:56:36.878 the amount and we multiply it by 100 to
04:56:40.000 get into sense as that's how strip
04:56:42.480 processes payments we can set the
04:56:44.920 payment status to be equal to paid
04:56:47.878 because this is after we actually
04:56:49.520 confirm that the payment went through by
04:56:51.480 stripe we need to know which driver
04:56:53.878 processed the payment and we need to
04:56:55.840 know the user ID that accepted that ride
04:56:59.600 and this user ID is coming from use o by
04:57:02.878 clerk so we can get it right here at the
04:57:04.840 top by destructuring the user ID coming
04:57:08.200 from use o from clerk great so now we
04:57:13.040 have everything we need that we're
04:57:14.440 passing to create a ride and finally we
04:57:17.400 can call the call back of the successful
04:57:20.240 intent creation so that's intent
04:57:22.400 creation call back to which we need to
04:57:24.760 pass our client secret which is equal to
04:57:27.440 result. client secret you can see that
04:57:31.040 stripe uses this snake case as well
04:57:34.240 finally this entire time we have been
04:57:36.798 within the confirm Handler which is only
04:57:39.798 one small part of the intent
04:57:43.160 configuration right here as you can see
04:57:45.878 now right below the intent configuration
04:57:48.920 we can enter the return URL which is
04:57:52.440 going to be my app
04:57:55.558 Colin book- rde so this is where we want
04:57:59.160 to go back to after we complete the
04:58:01.200 payment and if there's an error we can
04:58:03.760 just
04:58:05.160 console.log the error now let's see if
04:58:07.760 we have some warnings or errors
04:58:09.558 remaining we have one right here with
04:58:11.840 the client secret I think this is
04:58:13.760 something that we copied way back from
04:58:15.638 stripe but we don't need anymore as we
04:58:18.600 have implemented it right here above
04:58:20.878 where we're basically passing the client
04:58:22.558 secret into the intent creation callback
04:58:25.520 so we can remove this part right here do
04:58:27.920 we have any other warnings or errors we
04:58:30.440 can see that the confirm Handler is
04:58:32.440 complaining a bit about the types that
04:58:34.480 we're passing into it it's saying that
04:58:37.280 the payment method shouldn't have a type
04:58:39.558 any it seems that we don't have any
04:58:42.080 types for the payment method intent
04:58:44.160 creation call back and that's why it's
04:58:45.920 complaining right here those can be
04:58:48.200 easily fixed if you collapse the
04:58:50.120 function copy the entire function block
04:58:53.718 and paste it right here where it's being
04:58:56.200 used like
04:58:58.400 this and then you can remove this
04:59:01.280 original function because now we're just
04:59:03.440 using it automatically within stripe and
04:59:06.080 a pretty cool thing is now that it is
04:59:08.040 within the intent payment sheet it
04:59:10.718 actually knows everything about the
04:59:12.680 payment method intent creation call back
04:59:15.240 as it infers it from the types above
04:59:18.360 that's cool so with that in mind our
04:59:20.480 initialized payment sheet is finally
04:59:23.160 done with the confirm Handler the return
04:59:25.558 URL everything the whole deal and it
04:59:29.120 took a bit more time and that's because
04:59:31.200 at the same time we were setting up our
04:59:33.120 own code functionality such as getting
04:59:35.440 the Riders the drivers the ride creation
04:59:38.680 and so much more
04:59:40.600 but now all of that should be done and
04:59:43.718 before we go ahead and test it out just
04:59:45.638 bear with me there is one more thing we
04:59:47.440 have to do and that is create a success
04:59:50.760 model okay remember we just have this
04:59:54.320 one unused variable just a single one I
04:59:57.680 can delete these ones just so we don't
04:59:59.240 have warnings but there's just a single
05:00:01.558 unused variable called success we
05:00:04.280 wouldn't want to leave that success to
05:00:06.000 hang there on its own right so we can
05:00:08.798 use it within the mold mod if we're
05:00:11.120 successful let's reward our great
05:00:14.120 work by creating a react native
05:00:18.840 modal and say is visible only if success
05:00:24.680 how
05:00:25.558 convenient on backdrop press so once we
05:00:29.718 exit out of it on backdrop press so once
05:00:33.480 we click outside of it we simply want to
05:00:36.760 set the success to false so set success
05:00:41.400 to false which will hide the model and
05:00:44.280 then we can go on with our day and book
05:00:46.280 some additional rides or track our
05:00:48.400 existing ride so what are we going to
05:00:50.120 show within this react native model it
05:00:53.240 can be a
05:00:54.520 view with a class name equal to flex
05:01:00.680 flex-all items Das Center justify Dash
05:01:04.558 center background of white padding of
05:01:07.840 seven and rounded Das to to excel within
05:01:11.080 it we can render a check image so let's
05:01:13.920 get the image from react
05:01:16.480 native with a source equal to
05:01:20.240 images.
05:01:22.120 check and a class name of w of
05:01:27.080 28 h of 28 and a margin top of five now
05:01:31.798 how can we show this success model right
05:01:34.520 here well we can show it by turning the
05:01:37.638 success to True by default
05:01:40.480 just for the time being and closing this
05:01:43.120 payment sheet model and going all the
05:01:45.638 way back to somewhere
05:01:48.320 else so let's do just that and I think
05:01:51.878 this is our model but something seems to
05:01:53.920 be breaking at the moment oh maybe
05:01:56.160 because we forgot to import the view
05:01:57.878 from react native once we bring it back
05:02:00.240 we'll have to one more time test it out
05:02:03.400 oh there we go you can see this even on
05:02:05.080 the home screen we can see the last path
05:02:07.718 that we drawn out this would be a huge
05:02:10.798 path from California all the way to
05:02:13.920 Tennessee I recently saw a YouTube video
05:02:16.958 where a guy ordered the longest possible
05:02:19.718 Uber ride it was panning across multiple
05:02:22.440 European countries I think pretty cool
05:02:25.360 so let's go over and select a new
05:02:28.638 location maybe we want to go to New
05:02:32.638 York and I'll select a driver and a ride
05:02:37.120 and there we go now we can see this
05:02:39.240 small success ESS thing below the image
05:02:42.600 let's render a piece of text and make
05:02:44.680 sure to import it from react native it
05:02:47.360 can say something like booking placed
05:02:50.558 successfully or maybe something simpler
05:02:52.798 like ride booked we can give it a class
05:02:55.440 name of text- 2XL text- Center font Das
05:03:02.120 Jakarta bold with a margin top of five
05:03:05.558 to divide it a bit from the Icon below
05:03:07.638 it we can render another piece of text
05:03:11.040 that will have a class
05:03:13.320 name equal to text-
05:03:16.080 MD text- General
05:03:19.280 D200 font Das Jakarta medium text-
05:03:25.160 Center and margin top of three and it
05:03:28.360 can say something like thank you for
05:03:31.558 your booking your reservation has been
05:03:35.840 placed please proceed with your trip
05:03:40.920 there we go that's looking nice and
05:03:43.040 below it we can render a custom button
05:03:46.320 this button will have a title of back
05:03:49.320 home and on press want to have a call
05:03:52.840 back
05:03:53.638 function that sets the success to false
05:03:57.040 once
05:03:58.400 again as well as uses the router. push
05:04:02.798 okay so I'm going to put this in
05:04:04.040 multiple lines so that after we set the
05:04:06.760 success we can also use the router
05:04:10.360 from Expo router. push and push to slash
05:04:14.878 root slash tabs
05:04:18.680 slome we haven't been there in quite
05:04:21.080 some time there we go and we want to
05:04:23.400 style it a bit by giving it a class name
05:04:26.200 equal to margin top of
05:04:28.480 five
05:04:30.200 beautiful what do you say that we
05:04:32.760 manually turn the success back over to
05:04:35.558 false and try to book an actual ride for
05:04:38.760 the first time in this entire
05:04:42.638 course let's do it I'll click confirm
05:04:45.920 ride from San Francisco to New York for
05:04:49.520 $11,200 and 42 hours in pickup time and
05:04:54.320 I'll click confirm ride there's one
05:04:56.718 mistake that I can notice here and that
05:04:58.638 is that the stripe button still says 10
05:05:01.000 bucks you definitely wouldn't want to
05:05:02.920 make this mistake in your relab because
05:05:05.120 people would soon enough make use of it
05:05:08.040 so we have to figure out where we're
05:05:10.000 passing the amount to stripe and it is
05:05:13.240 right here in the intent configuration
05:05:15.958 so that is the last part that is
05:05:17.840 remaining for us to do we can change the
05:05:20.360 merchant display name to something like
05:05:24.080 ride
05:05:26.558 Incorporated the amount will be set to
05:05:29.400 parse
05:05:30.958 int amount times 100 to get to cents and
05:05:35.680 the currency will be USD if I save this
05:05:39.200 and click close the sheet and reopen
05:05:41.840 it you can see that now the price is
05:05:44.760 correct so you can enter your card
05:05:47.400 number for stripe test mode it is
05:05:51.120 424242 and you can keep typing that
05:05:53.320 until the end you can do the same thing
05:05:56.120 for the months and
05:05:58.160 years and the CVC but make sure that
05:06:01.280 they're valid months and years and you
05:06:04.360 can now click pay don't worry no money
05:06:06.558 will be taken from your accounts you
05:06:08.200 haven't connected your own details with
05:06:10.160 this this is just test info so I'll
05:06:13.160 click
05:06:14.958 pay it says
05:06:17.558 processing and it seems to have went
05:06:19.920 through ride booked back
05:06:22.920 home this is amazing we can track her
05:06:25.958 location and even though these recent
05:06:28.000 rides are fake now our next step will be
05:06:30.638 to add a real recent ride right here so
05:06:33.120 we can check it out and see how that is
05:06:35.280 going great this means that the main
05:06:38.920 primary flow of our Uber application has
05:06:42.400 been completed a user can create their
05:06:44.760 account search for a location where they
05:06:46.760 want to go choose their driver book a
05:06:49.760 ride and make a payment beautiful work
05:06:54.120 and if you came to this part of the
05:06:55.600 video leave a comment down below and
05:06:58.120 tell me I'm here I completed the main
05:07:01.000 flow not many will get there so great
05:07:04.160 job now that we have that out of the way
05:07:06.798 as I said we can focus on replacing the
05:07:09.520 mock recent rides with the real ones by
05:07:11.840 fetching them from the database and then
05:07:13.680 after that we'll quickly fix the Google
05:07:15.680 o off and then we can focus on the rest
05:07:18.160 of these Pages once again great work I'm
05:07:21.200 super proud of you to remove our mock
05:07:24.000 rides and instead of them use the real
05:07:26.240 ones we can head over to our homepage we
05:07:29.280 can scroll a bit up and right here you
05:07:32.080 can see that we have fake recent rides
05:07:35.000 instead of those what do you say that we
05:07:36.920 fetch the real ones but to make that
05:07:39.160 happen we have to tap into this ride ID
05:07:42.680 functionality which is going to fetch
05:07:44.798 the specific rides for our own user
05:07:47.558 account and bring us back all the
05:07:50.040 details so let's go to the home and
05:07:53.480 let's say const data which we can rename
05:07:56.680 to recent rides we can also get the
05:07:59.718 loading from there and that's going to
05:08:01.680 be equal to use fetch to the URL SL API
05:08:06.680 inside of parenthesis forward SL rde
05:08:09.680 forward slash and then we have to do a
05:08:11.680 dynamic template string of user question
05:08:15.240 mark. ID first let's turn this string
05:08:18.280 into a template string there we go and
05:08:20.480 now let's actually get the user from the
05:08:22.718 use user and we can remove this fake
05:08:24.958 loading at the top now it says no recent
05:08:28.320 rides as you can see right here and I
05:08:30.360 think I know why we created the tables
05:08:32.680 for drivers and users but before
05:08:34.958 creating a ride we didn't create a table
05:08:37.240 for the rides so right here under
05:08:39.520 Snippets you have the create rides table
05:08:42.638 SQL query which we can execute in our
05:08:45.638 SQL editor and
05:08:48.400 run there we go it successfully created
05:08:51.400 the table and since the table wasn't
05:08:53.280 created before right now it doesn't
05:08:55.280 exist so let's go through the entire
05:08:57.440 application flow one more time and see
05:08:59.558 if the ride will get created okay I came
05:09:02.040 to the end screen in the flow I can
05:09:04.400 enter my credit card details and click
05:09:07.400 pay it's processing
05:09:10.360 it's successful and if I go back home we
05:09:13.240 can now see one recent rides from San
05:09:15.760 Francisco to Scranton and it even gives
05:09:18.558 us a little screenshot of the location
05:09:20.798 where we're going to great so now we can
05:09:23.000 remove this recent rise from here as
05:09:25.120 we're no longer using them and now all
05:09:28.400 of the data in our application is real
05:09:31.080 what we can do next is press the log out
05:09:33.160 button at the top right we haven't seen
05:09:34.958 our onboarding screens in quite some
05:09:36.798 time and I'm pressing it but it doesn't
05:09:39.718 seem to be working let's see what's up
05:09:41.760 with that button that is in a place
05:09:44.520 where it says welcome and then we have
05:09:47.280 the name so that's going to be right
05:09:49.920 here in a stack screen under home and
05:09:52.920 here we're handling the sign out
05:09:54.920 functionality where you can see that
05:09:57.440 it's completely empty so we have to
05:09:59.840 implement it the only thing that it'll
05:10:01.718 do is it'll call the sign out function
05:10:05.200 which is going to come from use o from
05:10:07.360 clerk so we can say const sign out is
05:10:11.520 equal to use o coming from Clerk and
05:10:15.798 then we can call it and we can use the
05:10:18.558 router. replace to go to for slash off
05:10:22.680 in parentheses slash sign in now let's
05:10:26.558 try to click the button one more time
05:10:29.320 and this time we are redirected to the
05:10:31.638 sign-in page now if I click login with
05:10:34.000 Google nothing will happen same thing if
05:10:36.558 we go to sign up it's not doing anything
05:10:39.600 that's because we have implemented only
05:10:41.240 the email authentication and now we have
05:10:43.480 to do oath clerk makes that super simple
05:10:47.000 with their documentation page on
05:10:48.798 building a custom flow for
05:10:50.760 authenticating with o o connections so
05:10:53.680 you can just search the docs for this
05:10:55.280 page it's under custom flows allo
05:10:57.718 connections and then you need to switch
05:10:59.958 it from nextjs to Expo we can skip this
05:11:03.080 Expo linking part skip the browser part
05:11:05.718 as well and the only thing we need is
05:11:08.400 this start oath flow with the O strategy
05:11:12.718 and then the onpress functionality this
05:11:14.878 part right here so let's copy that go
05:11:17.840 back to the code to our o component
05:11:21.200 where we have our custom button and we
05:11:23.240 can paste what we just copied I'll paste
05:11:25.520 it over this
05:11:27.120 function I'll rename the onpress to
05:11:30.440 handle
05:11:32.240 Google sign
05:11:34.280 in and I will override our on press on
05:11:37.638 the button click to handle Google Google
05:11:39.480 sign in and we can just slightly modify
05:11:41.840 this first of all let's import use oo
05:11:45.080 from clerk clerk Expo with a strategy of
05:11:48.520 Google
05:11:49.320 oo next import use call back from react
05:11:54.600 after that we can start this o flow and
05:11:57.600 we can slightly modify this part right
05:11:59.600 here so I'll close it just so we have a
05:12:01.600 clean slate and I'll say con result is
05:12:05.160 equal to a weight so we have to make
05:12:08.160 this function a sync
05:12:10.480 and Google oo like this to which we then
05:12:15.040 pass the start oo flow function but the
05:12:19.558 question is where is this Google ooth
05:12:21.520 coming from this Google ooth will be a
05:12:24.600 utility function which we can create
05:12:26.680 it'll be under lib o and then here we
05:12:30.160 have the token cache but now we'll
05:12:32.600 create an additional function export
05:12:35.878 const Google o o which is going to be an
05:12:40.240 async function that accepts the start oo
05:12:44.480 flow of a type any for now and we can
05:12:48.400 open up a new try and catch Block in the
05:12:51.718 catch we of course have the error and in
05:12:53.878 the try we'll copy this part about
05:12:56.040 linking so here we want to extract this
05:12:58.400 linking part and this if and else that
05:13:00.718 we removed previously and we can paste
05:13:02.798 it right here that's going to check
05:13:04.558 whether we have a created session ID and
05:13:07.718 whether we can sign up up and we can
05:13:10.638 also make a user
05:13:12.520 active for that we do need the linking
05:13:15.480 so remember what they say right here we
05:13:17.480 need to install Expo linking this will
05:13:19.958 allow us to link our application to the
05:13:22.200 Google signin model that pops up and
05:13:24.080 then it allows users to go back to your
05:13:25.920 own application so let's run mpm install
05:13:29.240 Expo linking and let's make sure to
05:13:31.320 import it at the top by saying import
05:13:33.718 everything as linking from Expo linking
05:13:38.360 and then we're creating creting a new
05:13:39.680 URL which we want to redirect to it is
05:13:43.240 SL root in
05:13:45.558 parentheses SL tabs slome next we're
05:13:50.400 checking if it's a signup or a sign in
05:13:54.120 rather has the user created an account
05:13:56.638 before if they have created an account
05:13:59.360 then we're doing sign in else we're
05:14:01.360 doing sign up so everything within this
05:14:04.798 if will be called both on the sign in
05:14:07.878 and the sign up so let me show you what
05:14:10.120 we can do we can say if set active
05:14:13.600 exists then we can await set active and
05:14:17.798 this is basically adding the user
05:14:19.600 session but now only if it's sign up so
05:14:23.760 if sign up. created user ID then we want
05:14:29.040 to also create a database user so we can
05:14:31.840 say await fetch
05:14:34.280 API with a URL of forward slash in
05:14:38.520 parentheses API SL
05:14:41.718 user the method will be set to post and
05:14:45.400 the body will be json. stringify where
05:14:48.638 we can pass a name which is a template
05:14:50.840 string of sign up. first name as well as
05:14:56.160 sign up. last name let's fix this typo
05:15:00.320 we can also pass the email equal to sign
05:15:02.520 up. email and we can pass the clerk ID
05:15:05.600 equal to signup do created user user ID
05:15:10.520 and this creates a user in the database
05:15:12.638 we want to go below this two sets of
05:15:15.200 double parentheses and Below one more to
05:15:18.080 return an object that's going to say
05:15:20.878 success is true we can also pass a code
05:15:24.360 of
05:15:25.958 success and pass a message of you have
05:15:29.600 successfully
05:15:31.958 authenticated outside of all of these
05:15:34.680 braces we can return success to false
05:15:38.958 because if we reach this point something
05:15:40.400 is not good would a message equal to an
05:15:44.160 error occurred finally in the catch
05:15:47.440 consol log the error and return success
05:15:51.240 false and a message that an error has
05:15:54.320 occurred so I can paste this and maybe
05:15:57.520 this time we can just do
05:16:00.240 error question mark. errors zero
05:16:04.320 question mark. long
05:16:06.680 message this will give us the full error
05:16:09.798 information and let's make the error of
05:16:12.000 a type any right
05:16:14.000 here great so now we are authenticating
05:16:16.958 users using Google oo and we're creating
05:16:19.320 an account when they sign up so let's
05:16:21.320 import this Google oo from lib o and
05:16:24.440 we're getting the result if the result.
05:16:27.160 code is triple equal to session unor
05:16:30.958 exists then we can alert coming from
05:16:34.480 react native. alert success but add a
05:16:39.280 message of session exists
05:16:43.400 redirecting to homepage and of course
05:16:46.760 we'll have to do a router. push slash in
05:16:50.638 parentheses root slash in parentheses
05:16:53.400 tabs slome outside of that if we can
05:16:57.600 check if result. success if that is the
05:17:01.280 case we can say success else we can say
05:17:04.558 error and that can be within the alert
05:17:06.840 so we don't actually need an if so
05:17:08.840 alert. alert and then we just show that
05:17:11.160 title and as the second parameter we
05:17:13.680 render the result. message if we catch
05:17:18.200 something then we can just do a console.
05:17:20.520 error
05:17:22.120 great I think this is it we already have
05:17:25.080 the UI now we implemented the logic and
05:17:27.798 we can give it a shot let's go through
05:17:29.840 the
05:17:30.798 onboarding and let's click login with
05:17:33.558 Google I noticed a typo there that was
05:17:36.120 supposed to be with right here
05:17:39.440 there we
05:17:40.760 go and let me click the
05:17:44.000 button Expo wants to use google.com to
05:17:46.920 sign in yes let's allow it I chose my
05:17:51.080 account and I'll click continue and it
05:17:54.320 didn't redirect I think I know why I
05:17:57.320 misspelled exists right here so session
05:18:00.718 exists okay I can fix this typon success
05:18:04.240 as well and if we go back to off in the
05:18:08.480 return right here so this is at the
05:18:10.760 bottom of our Google all OD function we
05:18:13.680 also need to pass the code and the code
05:18:16.080 will be success if you're successful or
05:18:19.200 here at the bottom in the catch the code
05:18:21.878 will be equal to error. code now this
05:18:26.240 code will sometimes correspond to
05:18:30.040 session unor exists even though it's not
05:18:33.080 really an error I mean technically it is
05:18:35.200 because we're trying to sign up to an
05:18:37.798 account that exists but still in that
05:18:39.920 case we're going to say success
05:18:41.638 redirecting to homepage and one more
05:18:44.120 thing I noticed here in oth instead of
05:18:46.520 saying email address I just used email
05:18:49.240 right here which is wrong so this also
05:18:51.638 could have broken the application so if
05:18:53.718 we fix that we can give it one more shot
05:18:56.080 I'll click login with Google continue
05:18:58.360 next I'll say continue one more
05:19:02.000 time and we still didn't get redirected
05:19:05.040 but if I open up the terminal I can see
05:19:07.240 a conso log that I added before and if I
05:19:10.040 press R for reload you can see that we
05:19:12.320 are within our application and now it
05:19:14.558 says welcome Adrien which means that
05:19:16.480 we're successfully logged in with our
05:19:18.440 real account and we have one recent ride
05:19:21.520 beautiful I'm still not sure why this oo
05:19:24.200 is not redirecting this is definitely
05:19:26.280 something we need to come back to later
05:19:28.040 on but for now let's quickly implement
05:19:30.360 the all rides screen as it's going to be
05:19:33.360 super simple it's just going to be a
05:19:35.320 collection of recent rides and we're
05:19:38.040 showing that already on the home so it's
05:19:40.120 going to be super simple to show it here
05:19:41.920 as well we can head over to our rides
05:19:44.680 page which is right here Under tabs and
05:19:47.760 within it we can render a flat list
05:19:51.280 similar to the one that we have in the
05:19:52.760 home so let's quickly go to the home
05:19:55.400 let's find our flat list and let's copy
05:19:59.080 the entire thing just until the end of
05:20:01.760 the flat list and we can put it right
05:20:04.040 here within the safe area view make sure
05:20:06.120 to import flat list right here from from
05:20:08.878 react native and save it of course
05:20:11.080 there's going to be some fixes that we
05:20:12.440 have to do to make it work for example
05:20:14.840 we have to also fetch the recent rides
05:20:17.200 same as we're doing in the home so right
05:20:19.240 here at the top here we're fetching the
05:20:21.200 recent rides and here we're fetching the
05:20:23.280 user so we can copy those two things and
05:20:26.400 add them to the rides use user is coming
05:20:29.798 from clerk Expo and this is pretty cool
05:20:32.680 when I copy things from the other file
05:20:34.400 webstorm actually copies the Imports for
05:20:36.680 me which is amazing right now if we go
05:20:39.120 to all rides it kind of breaks and
05:20:41.840 that's because we don't need all this
05:20:43.798 data here so let's clean it up instead
05:20:46.320 of slicing the recent rides we can show
05:20:48.680 all the recent rides next under list
05:20:51.200 empty component we can more or less
05:20:53.400 leave it the same and under the header
05:20:55.718 it's going to be much simpler than what
05:20:57.160 we have here we don't have to have the
05:20:58.920 sign out button nor the Google text
05:21:01.360 input so we can basically remove
05:21:03.840 everything from here and just keep one
05:21:06.680 single piece of text that's going to say
05:21:09.000 all rides and we can give it a class
05:21:11.718 name equal to text- 2XL font D jaarda
05:21:16.280 bold and we can save it and right here
05:21:19.080 before the use fetch what we're
05:21:20.920 expecting to get back is an array of
05:21:23.440 rides which are coming from types so we
05:21:26.400 can Define the ride right here that way
05:21:28.718 flatlist knows what it is accepting and
05:21:31.000 believe it or not since we're reusing a
05:21:33.040 lot of the components we don't need
05:21:35.000 these Imports too and it was super simp
05:21:38.638 simple to just recreate this all rides
05:21:41.638 list right now it is just one but once
05:21:44.558 we book some more they'll all be shown
05:21:46.840 here we can also add a margin y of five
05:21:50.280 right here to divide it a bit from top
05:21:52.240 and bottom beautiful and I couldn't
05:21:54.878 proceed further without fixing this
05:21:56.840 redirect on the Google button so while I
05:21:59.600 took a bit of a break from recording I
05:22:01.760 went ahead and tested it out a bit
05:22:03.360 further and I think I've came to a
05:22:06.280 conclusion first of all we can go to the
05:22:08.958 Google text input and for some reason
05:22:12.080 Android devices have a problem when a
05:22:14.798 font weight is typed in as a number so I
05:22:18.520 went ahead and just wrapped it in a
05:22:20.360 string not a big deal but just something
05:22:22.920 that needed to be done for the Android
05:22:24.840 devices this won't fix the redirect on
05:22:27.120 its own but now we can head over to o o
05:22:31.120 right here and so far we've been only
05:22:34.120 redirecting if a session already exists
05:22:37.360 but here I can add an or and say if
05:22:40.400 result. code is triple equal to success
05:22:44.878 in that case we also want to redirect we
05:22:48.360 don't need to show the success message
05:22:51.080 and we can also remove this bottom alert
05:22:53.120 right here I thought we didn't need this
05:22:55.760 because Google in the O should do the
05:22:58.760 actual redirection here to the home but
05:23:01.440 for some reason it wasn't doing it so
05:23:03.638 maybe we need to do it manually like
05:23:05.480 this which is okay also don't forget
05:23:08.080 that in the O this right here has to be
05:23:10.600 email address not just email and while I
05:23:14.400 was further testing it I experienced
05:23:16.240 some additional issues such as this
05:23:18.480 error saying too many files open and
05:23:21.320 then my Expo server would crash
05:23:24.480 basically there is a solution and it is
05:23:27.360 to run Brew install Watchman on Mac OS
05:23:31.320 at least it fixes it for Mac very weird
05:23:34.000 issue but it worked for me another even
05:23:36.878 weirder issue is is that I got another
05:23:39.480 error saying use process and then work
05:23:42.440 with asnc plugins for some reason and a
05:23:45.480 solution to that is to downgrade
05:23:48.360 Tailwind to
05:23:51.520 3.3.2 instead of carrot
05:23:55.000 3.3.2 so if you're having some issues
05:23:57.718 you can go to package.json
05:23:59.840 and you can find tailin CSS remove this
05:24:03.878 carrot from here then you'll have to
05:24:08.400 clear the Expo folder clear the node
05:24:11.600 modules and delete it and also delete
05:24:14.760 the package lock Json rerun mpmi and
05:24:18.480 then start the Expo server again that
05:24:20.480 should fix it there's many of these very
05:24:22.480 small but weird issues but thankfully
05:24:25.000 I've managed to find solutions to them
05:24:26.878 what you can do next just to make sure
05:24:28.320 we're in the same page is delete all
05:24:30.958 clerk
05:24:33.638 users and you can delete all neon users
05:24:36.680 as well
05:24:39.240 if you have any rides delete those two
05:24:41.520 just so we have a clean slate once you
05:24:43.400 do that start the application again and
05:24:46.080 while we're here we can try to find a
05:24:47.638 way to suppress this clerk warning at
05:24:50.400 the bottom since we know that everything
05:24:52.120 works I can quickly go into the main
05:24:54.878 layout that's the app layout right here
05:24:57.798 and right at the top we can write
05:24:59.878 something like this import logbox from
05:25:03.558 react native and then we can say logbox
05:25:07.000 do ignore log logs patterns warning and
05:25:10.920 then that cleans it up so now we have a
05:25:14.000 nice clean onboarding and we can get
05:25:16.958 started I'll log in with Google I'll
05:25:19.240 click continue and we got redirected
05:25:22.360 that is great I know we changed a lot of
05:25:25.160 things so if this didn't work for you
05:25:27.760 don't worry it it happens it is possible
05:25:30.840 feel free to reach out on Discord or
05:25:33.718 check out the description where we can
05:25:35.280 mention some of the most common issues
05:25:37.120 that people have experienced
05:25:38.798 and solutions to them if you cannot find
05:25:41.040 a frequently Asked question then
05:25:42.840 definitely feel free to ask on Discord
05:25:45.000 the link is down in the description what
05:25:46.878 I would highly recommend is also
05:25:48.680 comparing your files to the final files
05:25:51.480 in the GitHub repository it's possible
05:25:53.920 that you have a typo here or there or
05:25:55.920 that the route is misspelled or
05:25:57.320 something even though we have linters
05:25:59.638 and typescript and all the other great
05:26:02.080 things mistakes happen which is okay but
05:26:04.638 for me it works right now so let's give
05:26:07.240 it another shot by going over the entire
05:26:09.878 applications
05:26:11.200 process we can select a ride let's give
05:26:14.200 James an opportunity now there we go
05:26:16.760 this looks good we can confirm the ride
05:26:20.280 and I can make a payment I'll enter my
05:26:23.520 test
05:26:25.160 details and click
05:26:28.600 pay it's
05:26:32.160 processing we got a success and we can
05:26:35.440 go back home where we can see our recent
05:26:38.000 ride right this is working beautifully
05:26:41.200 for me if I reload I can still see the
05:26:43.760 clerk warning here so I think we can
05:26:45.920 quickly go back to layout and change
05:26:48.120 this from warning to clerk this way
05:26:50.878 Clerk's warnings will be suppressed and
05:26:53.000 make sure to remove the three dots as
05:26:54.680 well so now if we
05:26:59.000 reload you can see it is gone and we can
05:27:01.920 continue exploring our application by
05:27:03.920 going to the ride screen and we can see
05:27:06.000 our recent ride there's only one right
05:27:07.958 here which is amazing so we have the
05:27:10.638 home and we have tested the entire
05:27:13.240 procedure of the flow of creating the
05:27:15.878 rides and now we can also super simply
05:27:19.320 just log in press
05:27:21.760 continue and we are in now as an
05:27:25.440 exercise I have left two different
05:27:27.520 screens for you one is the profile it
05:27:30.520 looks something like this you have a
05:27:32.638 profile photo your name email maybe even
05:27:35.760 an email status but it is not necessary
05:27:38.600 and then maybe even a phone number it is
05:27:40.520 optional you should be able to reuse the
05:27:42.760 input that we have created so far to
05:27:44.878 quickly spin up this screen and these
05:27:46.920 fields don't have to be editable so they
05:27:49.040 can be read only if you want to
05:27:51.080 implement it on your own feel free to
05:27:53.000 pause this video and give it a shot the
05:27:55.480 code for that will go inside of the
05:27:57.760 profile page and you can use the input
05:27:59.920 field component we have created so far
05:28:02.280 so pause this video if you want to
05:28:03.878 implement it on your own or if not if
05:28:06.320 you really want to be done with this
05:28:07.558 great applic
05:28:08.680 since the primary flow is now done I'll
05:28:10.760 provide you with a code it's going to be
05:28:12.520 in the GitHub read me where all of the
05:28:14.480 other code pieces have been and you can
05:28:16.200 simply paste it right here it'll look
05:28:18.480 something like this you get your very
05:28:20.920 simple image which we can pull from
05:28:23.040 clerk especially if you logged in using
05:28:25.320 Google we get your first name and last
05:28:27.638 name which we show in uneditable input
05:28:30.958 fields and then we can show the email
05:28:33.718 and the phone this is it very simple now
05:28:37.480 when it comes to messaging this is
05:28:39.280 something that I left completely
05:28:41.240 open-ended in this video I'll just
05:28:43.600 provide you with this illustration which
05:28:45.280 is just going to say no messages yet so
05:28:47.718 this project will not include messaging
05:28:50.600 but if you really want to bring this
05:28:52.360 project to another level you can go
05:28:54.440 ahead and Implement an entire messaging
05:28:56.760 system use some kind of a package or a
05:28:59.440 library or a service that will allow you
05:29:01.638 to do that in a simpler way if you do
05:29:03.920 decide to implement it well we are on
05:29:06.958 Instagram so you can simply tag us and
05:29:09.240 I'll gladly reshare your work you can
05:29:11.878 also tag me on Twitter where we're
05:29:13.798 sharing a lot of the great work that you
05:29:15.760 guys do for example I shared one 14
05:29:18.320 hours ago by mahad and we are on
05:29:20.558 LinkedIn too so if you create something
05:29:22.840 cool I'll gladly share your work if not
05:29:25.760 no worries I'll still provide you with a
05:29:27.600 way to finish this great project off so
05:29:29.840 you can share it with your friends and
05:29:31.520 potential employers you can do that by
05:29:33.840 going to the chat component and then
05:29:35.878 copy and paste the chat component from
05:29:38.120 the GitHub read me and paste it here as
05:29:40.320 you can notice it is a very simple safe
05:29:43.360 area view where we have an image and
05:29:45.638 some text so if we head over to that
05:29:47.718 screen this is how it looks like with
05:29:50.360 that in mind even though it seems like
05:29:52.280 we only have a couple of screens
05:29:54.558 actually there's so many more don't
05:29:56.680 forget about our great on boarding that
05:29:58.520 we saw at the start and that you can get
05:30:00.760 to if you reload your application this
05:30:03.878 looks great next we have a beautiful
05:30:07.000 Authentication login and sign up forms
05:30:10.480 where we can easily log into our account
05:30:12.958 we have a super responsive map where we
05:30:15.440 can see everything on the screen as well
05:30:17.480 as the recent rides and what do you say
05:30:19.920 that we give it one more shot let's go
05:30:22.558 to Pao Alto visit Steve Jobs we can
05:30:27.080 choose our writer there we
05:30:29.638 go this is looking great we can verify
05:30:32.760 our ride and click confirm and for one
05:30:36.040 last time we can pay just make sure that
05:30:38.600 our entire app is working seamlessly and
05:30:42.240 it's successful we can go back home to
05:30:44.798 see it in real time or go to all rides
05:30:47.638 where we can also see this new ride it
05:30:49.480 is a very comprehensive app with a lot
05:30:51.958 of moving pieces so I'm amazed that you
05:30:54.760 came to the end of this video if you're
05:30:56.520 still here definitely leave a comment
05:30:58.600 down below and tell me hey I finished it
05:31:02.080 I could have turned this into a paid
05:31:03.958 course but I decided to release it for
05:31:06.160 free here on YouTube Just so you can
05:31:08.240 learn about webstorm which is the new
05:31:10.360 IDE I'll be using in future videos too
05:31:13.000 clerk so you can Implement
05:31:14.360 authentication very easily and neon
05:31:17.320 which is my database of choice for all
05:31:19.680 future applications and now you know how
05:31:21.760 to use all of these great Dev tools to
05:31:24.160 implement apps such as the mighty Uber
05:31:26.798 clone and if you haven't already
05:31:29.200 definitely download the ultimate react
05:31:31.520 native guide just so you have a written
05:31:33.798 guide by your side when you continue
05:31:36.120 your react native Journey p P this video
05:31:38.920 and here on the first page I tell you a
05:31:41.320 bit more about something great that's
05:31:43.240 coming I have started to develop the
05:31:45.558 ultimate react native course if you
05:31:47.958 liked what we have done in this video
05:31:49.840 and you obviously have since you're at
05:31:51.360 the end of this video then you're going
05:31:53.080 to love what's coming in this Pro course
05:31:55.520 if you download the guide I'll keep you
05:31:57.240 updated with that in mind thank you so
05:31:59.840 much for watching and coming to the end
05:32:01.520 of this video great job on building the
05:32:03.638 Uber clone and I'll see you in the next
05:32:06.200 one have a wonderful day
