# tactiq.io free youtube transcript
# Build and Deploy a Fullstack App with Admin Dashboard | Next.js, PostgreSQL, Redis, Auth.js
# https://www.youtube.com/watch/EZajJGOMWas

00:00:00.240 most tutorials start strong but then
00:00:02.760 leave you in the shallow end with boring
00:00:04.960 projects nice design same old crud
00:00:07.759 functionalities simple pagination and
00:00:09.840 call it a day might impress your mom but
00:00:12.240 let's face it no one's buying those
00:00:14.519 that's why today you'll build and deploy
00:00:17.320 a production grade University Library
00:00:19.840 management system which isn't just a
00:00:21.840 single app but a set of two
00:00:24.000 interconnected apps tied together into a
00:00:26.519 monor repo these apps work seamlessly to
00:00:29.519 teach you industry standard practices
00:00:31.840 from rate limiting DDOS protection
00:00:34.480 caching optimizations multimedia uploads
00:00:37.559 complex database queries and advanced
00:00:39.559 error handling to automated workflows
00:00:42.079 with custom notifications you'll learn
00:00:44.000 to implement features that real world
00:00:46.280 apps demand everything starts with a
00:00:48.680 public facing app with an open source
00:00:50.760 authentication with personalized
00:00:52.520 onboarding flows and emails homepage
00:00:55.320 with a highlighted book and newly added
00:00:57.280 books with 3D effects a library page
00:00:59.600 with a Advanced filtering and pagination
00:01:01.920 book detail pages that track
00:01:03.800 availability and show summary video and
00:01:06.240 similar books and a profile page to
00:01:08.560 manage your account track borrowed books
00:01:10.720 and download receipts but Enterprise
00:01:12.920 apps also have admin interfaces for
00:01:15.320 managing the data displayed on the
00:01:16.920 public website you'll build it too a
00:01:19.560 whole another app consisting of an
00:01:21.360 analytics dashboard showing statistics
00:01:23.680 New users and books borrow requests and
00:01:26.200 more an all users page and account
00:01:28.560 requests page where admin can approve or
00:01:30.960 revoke access all books page forms
00:01:34.200 allowing you to add a new book and edit
00:01:36.119 it book detail pages and a borrow
00:01:38.920 request page that was a lot and yes with
00:01:42.280 full pagination and search on
00:01:44.320 practically every single page you'll do
00:01:46.920 it all using nextjs typescript and next
00:01:50.119 o for industry standard development
00:01:52.439 postgress with neon the fastest Edge
00:01:54.920 ready database built to scale allowing
00:01:57.320 you to invite your team members and
00:01:59.119 manage database using branches just like
00:02:01.600 you're working with Git image kit for
00:02:03.560 real-time media processing apis and
00:02:05.799 asset management offering free storage
00:02:08.119 Dynamic Transformations and streaming
00:02:09.919 capabilities perfect for optimizing and
00:02:12.120 transforming images and videos for any
00:02:14.040 device making it the only solution
00:02:16.000 you'll need to deliver manage and
00:02:18.160 collaborate on your media assets at
00:02:19.840 scale up stash reddis for efficient
00:02:22.280 caching rate limiting and the ability to
00:02:24.519 build detailed workflows with custom
00:02:26.519 triggers drizzle the hottest orm right
00:02:29.160 now making database interactions faster
00:02:31.680 and simpler than ever and more like
00:02:33.720 tailin CSS resend shaten to create a
00:02:37.080 polished modern app but talk is cheap so
00:02:40.319 let me show you a full demo of the app
00:02:42.239 you'll build today when you visit the
00:02:43.760 website for the first time you'll see
00:02:45.480 the signin screen if you're creating a
00:02:47.519 new account you can go to the signup
00:02:49.280 page where you'll have to fill in a lot
00:02:51.159 of information all of it fully validated
00:02:53.760 we also have an image upload with
00:02:55.519 completion percentage where you'll have
00:02:57.239 to insert your University card that was
00:02:59.560 quick once you've created an account
00:03:01.640 you'll see this nice little toast and
00:03:03.680 you're in but behind the scenes
00:03:06.040 something important has just happened
00:03:08.200 the moment you've created an account our
00:03:10.159 server triggered an onboarding workflow
00:03:12.440 sending you a welcome email but that's
00:03:15.120 not the best part another part of the
00:03:16.840 onboarding workflow is inactivity checks
00:03:19.599 so if you don't visit the website for
00:03:21.200 the next 3 days you'll get another
00:03:23.200 automated email prompting you to check
00:03:25.120 it out and if you're already using it
00:03:27.200 you'll receive a congratulations email
00:03:29.120 similar to what dual lingo does
00:03:31.000 everything is automated for each user
00:03:33.360 now coming back to the app you can now
00:03:35.159 see a cool modern homepage showcasing a
00:03:37.840 highlighted book with this 3d effect
00:03:40.000 there are also some other latest books
00:03:41.439 here there's this library page where you
00:03:43.280 can see a full list of books available
00:03:45.000 in the library with pation boort and you
00:03:47.319 can easily search for any book or filter
00:03:49.239 it through your liking and if you click
00:03:51.040 on any of these books you'll go to its
00:03:52.720 Details page where you can see complete
00:03:54.560 information from Total and available
00:03:56.400 copies description trailers summaries
00:03:58.760 and more as well as a bunch of other
00:04:00.680 similar books you might want to check
00:04:02.120 out but if you click on borrow book
00:04:04.159 you'll see a destructive toast saying
00:04:06.000 you can't borrow a book until your
00:04:07.599 account gets approved Yep this is what
00:04:09.400 we're doing we're not letting just
00:04:10.840 anyone visit the website and try to
00:04:12.680 borrow a book instead we'll allow admins
00:04:15.319 to approve their account similar to what
00:04:17.160 universities or other institutions do to
00:04:19.440 verify your admission and to mimic that
00:04:21.478 real situation we have an entire admin
00:04:24.040 dashboard for managing everything
00:04:25.960 regarding the content and the users you
00:04:28.160 can visit the admin dashboard right
00:04:30.000 within the website by going to/ admin
00:04:32.720 now of course if you're a normal user
00:04:34.520 you'll automatically be redirected back
00:04:36.240 to the homepage otherwise you'll access
00:04:38.280 this whole new website that has a
00:04:39.800 sidebar on the left and the header with
00:04:41.639 the main page showing complete analytics
00:04:43.919 like the total number of bored books
00:04:45.800 users and more we're also comparing
00:04:47.720 these analytics with the previous week
00:04:49.400 so you know if there has been an
00:04:50.560 increase or decrease in statistics and
00:04:52.840 you can also see a list of recently
00:04:54.520 borrowed books and newly joined users
00:04:56.840 now a super useful thing here is that
00:04:58.919 all of this information loads
00:05:00.400 independently without blocking any other
00:05:02.520 part reload and you'll see different
00:05:04.479 loaders and some information will soon
00:05:06.600 show up followed by other pieces this is
00:05:09.360 called performance optimization and even
00:05:11.880 if an error occurs only that specific
00:05:14.039 part is affected while the rest of the
00:05:15.880 app stays functional and non-blocking
00:05:18.520 after that we also have an all users
00:05:20.319 page where you can see a complete list
00:05:21.800 of users who joined and search or
00:05:23.919 paginate them each user has its role and
00:05:26.479 through the admin dashboard you'll also
00:05:28.000 have the ability to make anyone an admin
00:05:30.280 there's also an all books page where the
00:05:32.199 complete list of books is shown with
00:05:34.080 search and pation so let me create a new
00:05:36.639 book by providing lots of details
00:05:38.520 including the title genre rating cover
00:05:41.240 the color using the Color Picker and
00:05:43.039 upload a video trailer let's first go to
00:05:45.240 account requests where you can see a
00:05:47.120 list of all user accounts that need to
00:05:48.880 be approved let me see where mine is oh
00:05:52.080 there we go now I'll click on it to
00:05:53.919 approve it and confirm upon confirmation
00:05:56.639 I'll also receive an email saying that
00:05:58.520 my account has been approved now going
00:06:00.560 back to our main app if I click borrow
00:06:02.400 book it's processing and there we go now
00:06:05.280 I can actually borrow it which redirects
00:06:07.199 me to my profile page see when I borrow
00:06:09.599 this book something happened in the
00:06:11.280 background if I go and check my email
00:06:14.080 I'll see an email notification about the
00:06:16.160 book being borrowed and showing me when
00:06:18.319 I'm supposed to return it and then
00:06:20.000 before the due date I'll also receive
00:06:22.000 two different email reminders letting me
00:06:24.199 know that the due date is coming and if
00:06:25.880 I don't return it in time I'll also get
00:06:27.800 penalty emails later on this workflow is
00:06:30.319 completely automated similar to what
00:06:32.319 Netflix or other companies are doing
00:06:34.240 giving you payment reminders and
00:06:35.680 notifications pretty amazing and not
00:06:37.759 something you can learn every day right
00:06:39.440 back on the website you can see a kind
00:06:41.280 of an identity card with all our
00:06:43.000 information like full name University ID
00:06:45.680 or university card and on the right side
00:06:48.000 there is a list of books I've borrowed
00:06:49.960 with the dates specifying when I borrow
00:06:52.160 them and when I'm supposed to return
00:06:53.759 them there's also a little receipt icon
00:06:56.160 which when I click it will download the
00:06:57.680 generated book receipt and save it to my
00:06:59.599 my computer it's a NIC looking
00:07:01.120 customized receipt which I can then show
00:07:02.960 to my university to get a book if I now
00:07:04.879 go to the admin side specifically the
00:07:06.960 borrow records page I can see my record
00:07:09.440 alongside some other records listed here
00:07:11.199 and admins can also see the receipts and
00:07:13.120 confirm them and one thing here is that
00:07:14.919 we can also search records by user and
00:07:17.000 not just by the book pretty cool stuff
00:07:19.080 and admins can also change the borrow
00:07:20.960 book status so if somebody comes in and
00:07:23.039 Returns the book in person we can change
00:07:24.639 it so does it feel like a lot well if it
00:07:27.240 does no worries because we'll break it
00:07:29.120 step by step and if you're a beginner
00:07:31.479 still figuring out what components are
00:07:33.520 then this course is not for you first
00:07:35.879 check out my beginner crash courses from
00:07:37.680 tailin CSS and react to next GS and then
00:07:40.520 come back I'm so excited to Dive Right
00:07:42.919 In but first let me tell you that this
00:07:45.159 project completely took over my life
00:07:47.360 what started as a simple tutorial turned
00:07:49.680 into something huge I rebuilt it over
00:07:52.680 and over again until it became a project
00:07:55.199 that even senior developers would find
00:07:57.080 impressive and unlike most tutorials I
00:07:59.720 refused to rush through important
00:08:01.479 Concepts because you deserve better so
00:08:04.520 here's the deal most of these courses on
00:08:06.280 YouTube completely free I mean just see
00:08:08.639 how long this video is free complete
00:08:10.759 source code free figma designs
00:08:13.120 everything but the tutorial got so
00:08:15.080 massive I had to split it into two parts
00:08:17.759 part one right here fully free part two
00:08:21.240 on my soon to launch JS Mastery Pro
00:08:23.520 platform with progress tracking real
00:08:25.879 world challenges Advanced patterns get
00:08:28.560 commits for each lesson personalized
00:08:30.800 learning paths and more other platforms
00:08:33.440 would easily slap a $500 price tag on
00:08:36.039 that but not me first 100 developers
00:08:39.320 that click the link down in the
00:08:40.440 description and join the wait list will
00:08:42.440 get lifetime access for free and
00:08:44.839 everybody else that joins will get a
00:08:46.760 significant discount once it launches
00:08:49.160 it's my way of saying thank you so click
00:08:51.600 the link in the description and join the
00:08:53.279 pre-launch spots can fill up pretty
00:08:55.320 quickly so don't wait too long but even
00:08:57.839 if you don't end up getting it no
00:08:59.519 worries this video alone covers rain
00:09:02.000 limiting DDOS protection postgress
00:09:04.399 databases and more all for free so with
00:09:07.720 that in mind alongside the weightless
00:09:09.399 link check out all of the free links as
00:09:11.279 well to get the figma design the source
00:09:13.440 code and so much more with that said
00:09:15.920 let's Dive Right In and let me teach you
00:09:17.800 how to build a set of these two apps a
00:09:20.000 public facing one and a realworld admin
00:09:22.800 dashboard to manage it super
00:09:26.480 excited to get started developing this h
00:09:29.440 huge application that covers features
00:09:32.120 and Technologies I've never before
00:09:34.680 covered on JavaScript Mastery we'll
00:09:36.959 first start by understanding the entire
00:09:39.160 application and its structure how
00:09:41.959 technically you will not only develop
00:09:43.560 one application but two applications a
00:09:46.880 user platform and an admin panel by
00:09:49.560 using something known as a mono repo
00:09:51.600 architecture yep we'll cover all of that
00:09:53.839 in detail but first let's talk about the
00:09:56.160 Technologies you'll use to build it of
00:09:58.320 course we'll use the react framework for
00:10:00.279 the web next GS used by some of the
00:10:03.040 world's largest companies enabling you
00:10:05.240 to create highquality web applications
00:10:07.839 with the power of react components so
00:10:10.240 let's copy the installation command open
00:10:12.440 up a new project in this case I'm using
00:10:14.920 webstorm which is a powerful IDE which
00:10:17.760 as of recently became completely free
00:10:20.000 but of course you're free to proceed
00:10:21.440 with any other code editor or IDE to
00:10:23.920 follow along with this course open up
00:10:25.720 your integrated terminal and paste the
00:10:27.760 installation command and PX create next
00:10:30.800 app at latest It'll ask you whether you
00:10:33.240 want to install the package that will
00:10:34.839 allow us to create our app so press y
00:10:37.560 for yes it's going to ask you what is
00:10:39.360 your project name in case you've already
00:10:41.279 created a folder within which you want
00:10:43.200 to create this app which is what I did
00:10:45.320 and called it University library then
00:10:47.320 you can just press do slash to create it
00:10:49.519 in the current repository it's asking us
00:10:51.639 whether we would like to use typescript
00:10:53.480 that's going to be a strong yes I'll
00:10:55.639 later explain the many benefits you're
00:10:57.360 getting by using typescript and and
00:10:59.519 don't worry if you haven't used tab
00:11:00.959 script before you can proceed watching
00:11:02.839 this video whenever I'm covering some
00:11:04.680 tab script stuff I'll make sure to take
00:11:06.959 my time and explain what's happening
00:11:09.880 next it's asking us whether we want to
00:11:11.519 use eslint that's another big yes we
00:11:14.279 want our codebase to be scalable well
00:11:16.680 structured and maintained we want to use
00:11:19.160 tailin CSS as it's the preferred way of
00:11:22.000 styling applications nowadays and we
00:11:24.560 don't need a source directory it's just
00:11:26.399 a matter of having an additional folder
00:11:28.200 which we don't need of course we will be
00:11:30.760 using the app router so say yes turbo
00:11:33.560 pack which is going to speed up our
00:11:34.839 development time we can say yes for that
00:11:36.959 as well and we don't necessarily need to
00:11:39.480 customize the import alas so simply say
00:11:41.920 no and as you can see next GS will now
00:11:44.399 automatically install all of the dev
00:11:46.320 dependencies needed for us to run our
00:11:48.560 project very easily while it is doing
00:11:51.320 that let me actually walk you through a
00:11:53.560 couple of other technologies that we'll
00:11:55.360 be using to develop this great
00:11:56.800 application production ready scalable
00:11:58.760 application are not built from scratch
00:12:01.200 trust me you don't want to reinvent the
00:12:03.120 wheel which is why in this course I
00:12:05.600 prepared some technologies which are
00:12:07.360 industry standard open source and
00:12:09.880 production ready for you to learn and
00:12:12.000 build this application with as well as
00:12:14.440 all of your upcoming applications first
00:12:16.519 things first here is Tailwind CSS a very
00:12:19.639 obvious choice for The Styling flavor of
00:12:22.120 our applications it allows you to have
00:12:24.120 full flexibility of how your
00:12:26.040 applications are going to look like it's
00:12:28.079 just like you're writing Reg CSS you
00:12:30.320 have all the properties at your disposal
00:12:32.720 but you can use them in a quicker way by
00:12:34.800 simply using a set of predefined utility
00:12:36.959 classes and to make your application
00:12:38.839 even more standardized we'll use shat
00:12:41.240 nuui a library that allows you to copy
00:12:44.079 some of the components but then use the
00:12:45.959 full power of Tailwind CSS to style them
00:12:48.639 to your liking for example you can take
00:12:51.120 an alert or a button component and then
00:12:53.639 make it completely your own of course
00:12:56.320 buttons are simple but using shaten for
00:12:58.839 something like forms where it comes
00:13:00.800 pre-built with react hook form and Zod
00:13:03.560 which are the industry standard
00:13:04.839 Technologies for managing form nowadays
00:13:07.199 that's definitely going to come in handy
00:13:08.880 I'm also happy to say that this is the
00:13:10.680 first project on JavaScript Mastery
00:13:12.760 that'll use a postgress database yep
00:13:15.800 we're transitioning over to SQL and
00:13:18.240 we'll use the world's most advanced
00:13:20.360 open-source relational database but I
00:13:22.839 won't make you deal with clunky SQL
00:13:25.120 interfaces and outdated admin portals
00:13:27.680 instead we'll use neon allowing you to
00:13:30.639 ship faster with postgress it allows you
00:13:33.240 to use open- Source postgress databases
00:13:35.680 with many features that make it such a
00:13:37.440 breeze to use you get instant
00:13:39.519 provisioning no waiting no config and it
00:13:42.199 configures directly with your stack you
00:13:44.440 can hook it up directly with NEX GS or
00:13:47.000 to make it even more scalable and
00:13:49.360 production ready you can use something
00:13:51.240 known as an orm such as drizzle so yep
00:13:54.480 not only will we use a postgress
00:13:56.519 database will actually power it up but
00:13:59.240 using an or an object relational mapping
00:14:02.079 tool which will allow you to make your
00:14:03.800 database architecture that much more
00:14:05.839 scalable and drizzle is definitely the
00:14:08.120 way to go nowadays we'll also have to
00:14:10.000 store a lot of assets like images and
00:14:12.360 videos within our app and for that I've
00:14:14.519 decided to use image kit it is a free
00:14:16.480 tool allowing you to quickly optimize
00:14:18.959 and transform your videos and images and
00:14:21.720 just have a central Hub where you can
00:14:23.800 efficiently manage all of the assets for
00:14:25.720 your project more on that soon and we'll
00:14:28.199 also use stach to make this application
00:14:30.880 truly production ready first we'll use
00:14:33.560 appstash rdus a service that offers low
00:14:36.360 latency data storage and retrieval
00:14:38.399 perfect for caching session management
00:14:40.720 and real-time applications we'll use it
00:14:43.079 to teach you how you can quickly fetch
00:14:44.600 books within our application but we
00:14:46.680 won't just stop there we'll also use up
00:14:49.560 Stash's workflows allowing you to manage
00:14:52.920 and automate multi-step tasks great for
00:14:56.000 things like onboarding or handling data
00:14:58.320 processing workflow flows you can use it
00:15:00.079 to automatically send emails within your
00:15:01.920 application for example when a user's
00:15:04.079 account is verified by an admin or maybe
00:15:07.440 check if the user is not active for the
00:15:09.399 last 3 days or maybe check the user
00:15:11.880 activity and if they haven't been active
00:15:13.880 for the past 3 days send them an email
00:15:16.519 or a notification similar to what dual
00:15:19.120 lingo and most applications out there do
00:15:21.519 in this case we'll also use it to send
00:15:23.800 book borrowing deadlines limits and
00:15:25.959 warnings so now that you learned a bit
00:15:28.079 more about the text attack we'll use
00:15:30.199 let's head back to our editor and let's
00:15:32.440 Dive Right into
00:15:35.160 code now that our application has been
00:15:37.440 set up before we go ahead and run it
00:15:39.639 let's also set up shaten because we'll
00:15:41.920 very quickly need it to create some of
00:15:43.680 the components for the app and typically
00:15:46.240 I would just give you the commands
00:15:47.399 needed to install it but in this course
00:15:50.240 I really wanted to guide you all the way
00:15:52.600 through of how you would approach
00:15:54.959 building something like this on your own
00:15:56.839 so you don't just learn how to replicate
00:15:58.680 this specific application but you'll
00:16:00.600 learn how to use the Technologies to
00:16:02.600 build all of the apps in the future so
00:16:05.120 head over to shaty and UI go to docs and
00:16:08.920 installation for nextjs right there it's
00:16:12.199 going to say if you're using next5 see
00:16:14.680 next5 plus react 19 guide if you read
00:16:17.440 through this page you'll notice that
00:16:19.079 everything is still working as it should
00:16:21.120 it's just that when you're installing
00:16:22.519 some packages you will need to run an
00:16:24.639 additional flag to install it because
00:16:26.880 otherwise you'll be getting some
00:16:28.000 warnings that's that's more or less it
00:16:30.000 so I'll head back to the previous page
00:16:32.120 and just follow the installation setup
00:16:33.880 with mpm I'll copy the First Command and
00:16:37.639 paste it MPX shaten add latest in it
00:16:41.920 press y to proceed and it's going to ask
00:16:44.319 you for the style you would like to use
00:16:46.240 in this case we'll use the New York
00:16:48.319 style with the color of
00:16:51.120 slate for the rest of the steps just
00:16:53.319 press enter we'll use the CSS variables
00:16:55.839 and now this is that warning that you
00:16:57.199 get by using react 19 and next gs15 it
00:17:00.680 says that some packages May Fail due to
00:17:02.519 a peer dependency issue so just say use
00:17:06.160 Force I tried it a couple of times and
00:17:08.839 trust me it won't pose any problems with
00:17:11.400 that said we have just completed the
00:17:12.839 second step of chassi and install as
00:17:14.520 well and we finally can add some
00:17:17.439 components into it such as a button
00:17:19.400 we'll surely need to use a button right
00:17:21.839 so whenever you're installing it you can
00:17:23.760 just paste it right here MPX shaten add
00:17:26.919 latest add button and is going to ask
00:17:29.440 you whether you want to use Force once
00:17:31.280 again this is just an additional step
00:17:32.720 you have to go through and press enter
00:17:35.360 and there we go one component has been
00:17:37.400 installed now let's go ahead and
00:17:39.160 actually check it out if you head over
00:17:41.120 to components UI you'll see that we have
00:17:44.080 one additional component created for us
00:17:46.280 by shaten now why I love shaten so much
00:17:49.679 is that it actually asks you which
00:17:51.600 components you want to install and it
00:17:53.840 automatically gives you the code only
00:17:56.200 for the components you want to use in
00:17:58.120 this case the button
00:17:59.520 and even though it might seem a bit
00:18:00.919 complicated you never have to dive into
00:18:03.400 this code and modify it you're going to
00:18:05.280 Simply use this code as a button that
00:18:07.559 you created within your code base so if
00:18:10.640 I head over to page. DSX which is our
00:18:13.880 current starting application and if I
00:18:16.039 delete everything within the homepage
00:18:18.679 rather I just create an empty react
00:18:20.400 fragment and within it I try to render
00:18:23.840 this button coming from components UI
00:18:26.000 button we can properly enclose it and I
00:18:28.280 think we're ready to test it out I'll
00:18:30.360 open up the terminal and press mpm run
00:18:33.400 Dev to run our application on Local Host
00:18:35.760 3000 once you open it up it should look
00:18:38.039 something like this if you see this nice
00:18:39.640 looking button that means that chaten
00:18:41.760 has been installed now before we proceed
00:18:43.880 with the rest of the theming I want to
00:18:45.559 make sure that not only our app but our
00:18:47.520 codebase remains clean as well and for
00:18:50.559 that we'll use prettier and Es lent the
00:18:53.919 setup for every editor will look a bit
00:18:55.760 differently but you'll have to install
00:18:58.039 the Plugin or an extension called eslint
00:19:01.880 as well as prettier and there's also an
00:19:04.440 additional one called eslint prier which
00:19:06.480 connects them together once you do that
00:19:09.320 at least here on webstorm I can head
00:19:11.720 over to preferences and I can turn on
00:19:14.360 the manual preder configuration and try
00:19:16.799 to find the preder package if it's not
00:19:19.280 there yet we might need to install it so
00:19:21.440 head over to your terminal and open up a
00:19:23.480 new one because this one is currently
00:19:25.000 running our application but on the
00:19:26.840 second one we can install the additional
00:19:28.400 depend dependencies and I'll say mpmi D-
00:19:32.520 save-dev as we want to install it as a
00:19:34.640 Dev dependency and I'll say
00:19:37.720 prier es L should have been
00:19:39.559 automatically installed by
00:19:41.960 nextjs so now I can head over to prier
00:19:45.400 and head over to manual and just select
00:19:47.640 it right here from node modules and run
00:19:50.799 reformat on Save I want to do a similar
00:19:54.000 thing for eslint where I can choose the
00:19:56.679 eslint package from node modules and
00:19:58.760 then find a configuration file and we
00:20:00.640 want to run es Lin fix on Save now if
00:20:03.000 you make a change your code and press
00:20:05.039 command s it'll actually try to reformat
00:20:07.440 the code I know that the setup for other
00:20:09.280 code editors might be a bit different so
00:20:11.320 if you want to give webstorm a try which
00:20:13.120 I have been really loving lately I'll
00:20:15.320 put the link down in the description so
00:20:16.799 you can get it completely for free and
00:20:18.440 then follow along with my setup in any
00:20:20.480 case you should be able to head over to
00:20:22.280 es L.C config.js and we can extend some
00:20:25.799 additional configurations such as next
00:20:28.080 core web f titles next typescript as
00:20:30.760 well as
00:20:31.960 standard we can also add
00:20:35.360 plugin Tailwind CSS SL recommended as
00:20:40.200 well as prier so all of these packages
00:20:42.679 will work together to make our codebase
00:20:44.480 clean oh and I think we can go over to
00:20:47.280 command shift p prettier and then also
00:20:50.480 turn on the runon save action which will
00:20:53.480 actually apply all of the es length and
00:20:55.320 prer changes on Save You Can See it'll
00:20:58.039 add some space spaces in between these
00:20:59.640 brackets as well as apply a semicolon at
00:21:02.200 the end among the other packages that
00:21:03.919 I'm using which you can also install on
00:21:05.880 any code editor there is the rainbow
00:21:09.480 brackets which will make sure that you
00:21:11.240 know where's the start or end of your
00:21:13.600 function or code block I'm also using
00:21:16.600 react Snippets so just make sure to
00:21:19.440 install I think in this case I'm using
00:21:21.480 modern react Snippets either way should
00:21:24.120 be fine I know many of you ask me for
00:21:25.960 the theme in this case I'm using a
00:21:28.799 material theme material deep
00:21:31.360 ocean and that's it that's my editor
00:21:34.320 hopefully you were able to set up Prett
00:21:36.000 your and eslint as I did by further
00:21:38.600 configuring this eslint config file but
00:21:41.720 if not don't worry at all you can just
00:21:43.799 proceed normally I know that sometimes
00:21:45.919 setting up these linting tools can be a
00:21:48.320 pain in the ass and it just messes with
00:21:50.600 everything so even if you didn't manage
00:21:52.360 to set them up properly don't worry at
00:21:54.279 all we can proceed and while we're here
00:21:56.559 I'll also turn this home into an S6
00:21:59.080 Arrow function by saying const home is
00:22:01.799 equal to and then finally at the end we
00:22:04.720 can export default home and in case you
00:22:08.440 have nothing right here at the top of
00:22:10.159 the function you rather have just a
00:22:12.080 single return we can also just turn this
00:22:14.320 into an immediate return by removing the
00:22:16.960 curly brace so you'll see that
00:22:19.640 throughout this course I'll try to keep
00:22:21.720 the code base as clean as possible so
00:22:24.320 you can follow along see everything
00:22:26.000 clearly and learn as many best practices
00:22:28.600 is as possible now let's set up the
00:22:30.840 theme of our application in this case I
00:22:33.080 decided to go with a very unique layout
00:22:35.880 something that you don't see often
00:22:37.919 nowadays so if you haven't yet
00:22:39.480 downloaded this figma page definitely do
00:22:41.760 that the link will be down in the
00:22:43.279 description that'll make it much easier
00:22:45.159 to follow along in any case you can see
00:22:48.000 that some things here are shared such as
00:22:50.440 this background image which we can
00:22:51.919 export as well as some of the colors of
00:22:54.320 the background or this primary yellowish
00:22:56.919 color that we'll use so to make her
00:22:59.679 styling in the future a bit easier we
00:23:01.720 can add all those to our Tailwind config
00:23:04.679 so head over to Tailwind doc config.sys
00:23:28.559 so head over below this lesson to a
00:23:30.679 GitHub repository containing the entire
00:23:32.760 source code of this project go to its
00:23:34.840 read me and head over to Snippets to
00:23:37.000 copy there you can find this tailin
00:23:39.240 config file in there we'll do some
00:23:40.919 simple things like set up our primary
00:23:43.120 default color as well as the primary
00:23:44.960 color for the admin interface because
00:23:47.159 this is a monor repo after all so we'll
00:23:49.600 have to keep track of different themes
00:23:51.679 and if you think about it I purposefully
00:23:53.600 made the admin interface a bit different
00:23:56.080 looking because for this application
00:23:58.440 it'll most likely be opened on a desktop
00:24:01.240 computer somewhere in the library and it
00:24:03.919 has to have a very simple to follow
00:24:05.960 design so clerks or non-technical people
00:24:08.679 using it can very easily create new
00:24:10.760 books or give books to rent and this is
00:24:12.919 not just when it comes to book managing
00:24:15.559 whenever you have an admin interface
00:24:17.360 that has to be put at some kind of a
00:24:18.919 desktop computer for employees to use
00:24:21.480 you always want to use a light simple to
00:24:23.640 use interface now even though I provided
00:24:25.559 these colors to you I want to teach you
00:24:27.200 how you can extract them you can create
00:24:28.880 tilin configs manually let's go with
00:24:31.399 this default primary color for example
00:24:33.840 E7 C9 A5 how would you go about finding
00:24:37.559 it so if you head over back to our figma
00:24:40.039 file and go to O obviously this
00:24:43.360 yellowish color is our primary color and
00:24:46.159 right here under colors you can see it
00:24:47.919 Styles you can copy it and then you can
00:24:50.120 paste it right here in the code and I
00:24:52.200 did the same thing for all of the other
00:24:53.679 colors I didn't want you to manually go
00:24:55.559 ahead and copy every single one so I
00:24:57.440 decided to provide them here for you no
00:24:59.679 logic here just some Styles the second
00:25:01.919 thing you'll need that'll make our
00:25:03.120 styling a bit easier is going to be the
00:25:05.520 global. CSS file so head over to global.
00:25:09.320 CSS select everything and override it
00:25:12.039 with the global. CSS file that you can
00:25:14.360 find in the Snippets to copy for this
00:25:16.039 video there's a lot of stuff that I'm
00:25:17.520 providing right now at the start which
00:25:19.399 is just to get us going but trust me as
00:25:21.880 we dive deeper less and less almost
00:25:24.760 nothing will be provided as we'll code
00:25:27.120 all of the complicated logic IC together
00:25:29.480 from scratch now as you can see in the
00:25:31.440 tail config we're using two custom font
00:25:34.880 families so we have to go ahead and
00:25:37.120 Implement them if you head over to app
00:25:40.159 in there we'll be able to put local
00:25:42.000 versions of our fonts this is a new
00:25:44.279 nextjs feature allowing you to locally
00:25:46.640 import the fonts without having to rely
00:25:48.840 on thirdparty services so right below
00:25:51.240 the Snippets to copy you can find a
00:25:53.279 zipped fonts folder unzip it and then
00:25:55.960 simply paste it right here within the
00:25:57.880 app it'll look something like this fonts
00:26:00.919 with a couple of different variants once
00:26:02.880 we have it you can head over to layout.
00:26:05.399 DSX and we can put those fonts to use
00:26:08.440 similarly to how a Guist font was used
00:26:11.039 before instead we'll import local fonts
00:26:13.760 this time so instead of Guist Sans we'll
00:26:16.240 be using the IBM Plex
00:26:18.880 Sans and we'll do it as a local font
00:26:22.200 coming from import local
00:26:26.240 font from next
00:26:28.919 SL font SL looc to this local font you
00:26:32.760 have to provide a source pointing to
00:26:34.840 that font so a source will be an array
00:26:38.159 and here we can have a couple of
00:26:39.520 different objects where first you
00:26:41.919 specify a path to that font so that'll
00:26:45.000 be/ fonts SL
00:26:48.880 ibmx Sans make sure to capitalize the
00:26:52.080 right things and then Dash
00:26:55.080 regular.ttf we can also give it a font
00:26:57.640 weight of
00:27:00.520 400 and finally a style of
00:27:05.200 normal now we can duplicate this three
00:27:07.919 more
00:27:09.039 times for the second one we'll get the
00:27:11.919 Sans medium and that'll be a weight of
00:27:15.320 500 with a font style of normal after
00:27:18.960 that we can have a semi bold that's
00:27:21.440 going to be 600 for weight and then
00:27:24.399 finally we can have a bolt which is
00:27:26.640 going to be 700 you can see how nicely
00:27:29.279 prer structured this it figured out that
00:27:31.679 this line is extending over the normal
00:27:33.840 character line limit so it put it into a
00:27:36.039 new line in this case I actually don't
00:27:38.440 think we need to say do slash for each
00:27:40.519 font so I can basically remove that dot
00:27:43.320 at the start and then I can manually set
00:27:46.640 this to be a single line as well this is
00:27:49.440 a bit easier to read and understand with
00:27:52.080 that in mind we can also set up our
00:27:53.799 second font by saying const
00:27:56.799 beas new
00:27:59.600 that's going to look something like this
00:28:00.880 make sure to have the spelling done
00:28:02.279 right we're going to take in the local
00:28:05.080 font and we're going to Simply point to
00:28:08.000 a single
00:28:10.480 object that'll have a source equal to an
00:28:13.840 array where we have a single object of
00:28:16.519 path pointing to for SL
00:28:19.440 font SLB new- regular.ttf weight of 400
00:28:25.440 and style of normal we can also add an
00:28:28.519 additional variable which we can use to
00:28:31.080 apply this font later on by calling it
00:28:34.039 be- new perfect so now we have
00:28:38.360 successfully set up the fonts and we can
00:28:40.640 also set up the metadata of our
00:28:42.120 application here by changing the title
00:28:44.279 to bookwise as well as changing the
00:28:46.880 description to something like bookwise
00:28:49.880 is a book review website or in this case
00:28:52.559 it's actually a book borrowing
00:28:55.120 University Library management
00:28:58.679 solution there we go that's more like it
00:29:02.279 now we have the metadata as well and we
00:29:04.240 ready to use all of these within our
00:29:06.360 application now sometimes nextjs starts
00:29:09.000 with this export default function root
00:29:10.720 layout we can simplify this a bit this
00:29:13.440 readon is not
00:29:15.360 necessary and we can just get the react
00:29:17.679 node automatically from react by
00:29:19.960 importing it so just import react node
00:29:22.840 from react no need to get the react
00:29:24.919 itself if you do that it'll actually put
00:29:26.880 it to one line and and we can change it
00:29:28.760 to an arrow function by saying const
00:29:30.880 root layout is equal to and then a
00:29:33.760 callback function to the return
00:29:35.240 statement like this this is a bit easier
00:29:37.360 to understand in my opinion and we can
00:29:39.159 also run the export default root
00:29:43.399 layout finally we're no longer using the
00:29:45.960 Guist Sans and the Guist mono rather
00:29:48.519 we're using the IBM Plex Sans do class
00:29:52.159 name so we'll actually be applying this
00:29:53.760 font using class names and we're using
00:29:56.080 the beas new font which will to apply
00:29:58.519 through a variable great so this is our
00:30:01.279 root layout now that our setup is done
00:30:03.760 we have successfully implemented the
00:30:05.240 Tailwind config as well as done some es
00:30:07.760 length and preder configuration I showed
00:30:09.960 you which packages I use and more we
00:30:12.039 have also applied the new global. CSS as
00:30:14.799 well as imported all the fonts within
00:30:16.679 our layout that means that we have laid
00:30:18.760 some foundations for the start of the
00:30:20.799 development of our project so in the
00:30:23.039 next lesson let's start working on the
00:30:25.200 homepage
00:30:28.080 I think now is the perfect time to pull
00:30:29.760 my browser side by side by my editor so
00:30:32.279 you can see the changes we're making
00:30:33.679 live that'll look something like this
00:30:35.559 you can see our button is automatically
00:30:37.440 using this primary theme and right now
00:30:39.640 we are on Local Host 3000 which is our
00:30:41.799 homepage but some pages in The Design
00:30:44.320 will use different layouts for example
00:30:47.039 the odd page won't have the navigation
00:30:49.159 bar whereas all the other pages will so
00:30:52.880 let's go ahead and implement the layout
00:30:54.600 that will allow us to reuse the
00:30:56.080 navigation bar across all of our root
00:30:58.880 routes I'll do that very quickly by
00:31:01.080 creating a new route group within the
00:31:03.799 app folder by creating a new folder
00:31:07.559 called
00:31:09.080 root you have to wrap it in parentheses
00:31:11.760 to make sure that it becomes a route
00:31:13.600 group now what route group allows you to
00:31:16.080 do is to create a new layout
00:31:18.679 specifically for the pages within that
00:31:20.679 route group so I'll create a new layout.
00:31:24.039 TSX and I'll run rafc right within it to
00:31:27.960 quickly spin up a new layout component
00:31:30.080 another thing I'll do is move this page
00:31:32.320 right here from the root route to the
00:31:34.559 root route group because this will be
00:31:36.679 our primary homepage nothing will be
00:31:38.600 changed after we make sure that this
00:31:40.679 layout actually Returns the children
00:31:42.760 route and we can do that by saying con
00:31:45.559 layout accepts the children which are of
00:31:48.960 a type react node so we're simply
00:31:51.880 telling typescript hey we want to get
00:31:53.679 some children through props here and
00:31:55.200 they're of type react node once you do
00:31:57.320 that we can return a main tag we use an
00:32:01.760 HTML 5 semantic main tag when you want
00:32:04.240 to make sure that this is the main
00:32:05.559 container so we can actually also give
00:32:07.919 it a class name equal to root- container
00:32:12.200 within it we'll also have another div
00:32:14.200 which we'll use to set up our routes and
00:32:16.720 the max width of our content which will
00:32:19.080 display in within the main container so
00:32:21.200 let's give it a class name of margin X
00:32:23.600 of Auto as well as a Max W of 7 XL and
00:32:28.080 within it we can render a header which
00:32:30.279 for now will just be a piece of text as
00:32:32.720 well as a div with a class name equal
00:32:37.480 to margin top of 20 to divide it from
00:32:40.279 the header as well as a padding bottom
00:32:42.880 of 20 and within it we can render the
00:32:45.720 children meaning the root button you can
00:32:49.120 see how now the max W that we applied is
00:32:52.080 nicely centering the elements and even
00:32:53.880 if we increase it they will always
00:32:55.960 remain centered now what you can notice
00:32:57.880 is that if you hover over a specific
00:32:59.799 element hopefully it does the same thing
00:33:01.840 for you but it's actually pointing me to
00:33:04.559 the style within a global. CSS file
00:33:07.840 where you can see which styles are
00:33:09.440 getting applied for example this utility
00:33:11.760 class called root container is applying
00:33:14.200 a Max H screen as well as some Flex
00:33:16.720 properties with a background cover and
00:33:19.200 for Native tailin CSS properties like
00:33:21.799 margin top of 20 if you hover over it
00:33:24.519 you can see what styles is it applying
00:33:27.279 if you can not see that maybe you don't
00:33:29.279 have a Tailwind CSS plugin installed or
00:33:31.919 an extension so go ahead and install it
00:33:34.200 and it should hopefully work for you but
00:33:36.080 if it doesn't no worries because most of
00:33:38.000 these names are pretty self-explanatory
00:33:40.240 anyway with that in mind we can now
00:33:42.279 create our first component of the day by
00:33:44.760 creating it right within the components
00:33:46.880 folder and I'll create a new file called
00:33:50.200 header dot
00:33:52.880 DSX I'll run rafc within
00:33:56.480 it and we can now nicely import it
00:33:59.360 within the layout by simply saying
00:34:01.399 header coming from components header
00:34:04.639 you'll notice the difference within
00:34:06.120 Shaden components and our own components
00:34:08.560 because Shaden components will be within
00:34:10.560 the UI folder whereas our own components
00:34:13.520 will be right here within the components
00:34:15.520 folder and with that in mind you can see
00:34:17.639 that now this layout is doing its thing
00:34:20.000 and we are ready to implement the header
00:34:22.040 which will show on top of the homepage
00:34:24.560 and then implement the homepage itself
00:34:26.960 so let's start with the header first
00:34:29.000 I'll wrap it in an HTML 5 semantic
00:34:31.719 header tag that'll have a class name
00:34:35.040 equal to margin y of 10 Flex justify
00:34:39.639 Dash between as well as a gap of five
00:34:43.119 within it I'll show a link component
00:34:45.839 coming from next
00:34:47.960 link and I'll give it an HRA pointing to
00:34:50.839 forward slash meaning just the
00:34:53.960 homepage within it for now I'll simply
00:34:56.639 say bookwise right below this link I'll
00:34:59.440 show a UL an unordered list that'll have
00:35:02.920 a class name equal to flex Flex - row
00:35:07.400 items D Center and a gap of eight and
00:35:10.760 within it we can render An Li which is a
00:35:13.320 list item that'll render a link and this
00:35:16.800 link will have an href pointing to for
00:35:19.000 SL Library where we'll be able to
00:35:21.079 explore all the books and it'll say
00:35:23.400 library now we can also give it a class
00:35:25.960 name equal to
00:35:28.520 text-base cursor Das pointer to let it
00:35:31.839 know that it's clickable and capitalize
00:35:35.000 and after that we want to check on which
00:35:37.160 route we're on so we know whether to
00:35:39.359 make it currently selected or not this
00:35:41.680 is what I'm talking about if the search
00:35:43.480 is selected we have to change it to a
00:35:45.320 primary color so we know we're on that
00:35:47.280 page right now to be able to do that we
00:35:49.440 have to know on which path we're on and
00:35:52.040 it's so easy to do that in xjs by saying
00:35:54.560 const path name is equal to use path
00:35:58.079 name coming from next navigation now as
00:36:00.960 soon as you use a hook within your
00:36:03.040 component you have to turn it into a
00:36:05.040 client render component by adding a used
00:36:07.560 client directive at the top now we can
00:36:09.839 change Styles dynamically by copying all
00:36:12.720 the Styles we have here right now and
00:36:15.160 using a CN class name property coming
00:36:18.400 from lib utils which was created for us
00:36:21.160 by I believe shaten maybe it's tailwind
00:36:24.040 and in there as the first parameter you
00:36:25.920 can pass all of the Styles which you
00:36:27.640 always want to pass but then you can
00:36:29.760 also pass a condition something like if
00:36:32.240 path name is triple equal to library or
00:36:35.800 forward SL library in that case you can
00:36:38.440 also apply a text light of 200 else you
00:36:43.000 can apply a text light of 100 so now you
00:36:46.960 can see Library selected and it's
00:36:49.119 glowing yellow it looks a bit weird
00:36:51.319 because we have a white background but
00:36:53.440 don't worry we'll deal with that soon
00:36:55.160 with that in mind here for the bookwise
00:36:57.040 I actually want to use a logo so what we
00:36:59.560 need to do is manually import it from
00:37:02.480 figma you can do that by double clicking
00:37:04.520 on it and exporting it there's going to
00:37:06.560 be many different small icons we'll use
00:37:08.839 throughout this course such as this
00:37:10.440 magnifying glass icon this book borrow
00:37:13.040 request and more so to make your life of
00:37:15.880 grabbing all of these individually a bit
00:37:17.680 easier I went ahead and did that for you
00:37:19.960 so you can find a zipped folder
00:37:21.720 containing all of the assets right where
00:37:23.800 you found the other code Parts delete
00:37:26.640 the current public folder and then
00:37:28.839 simply unzip and paste the new one it
00:37:32.760 should look something like this having
00:37:34.319 our favicon as well as some icons and
00:37:37.319 images if you now go back and reload it
00:37:40.200 should look good you can see that we
00:37:42.000 have one error and this error is a
00:37:44.200 hydration error now this hydration error
00:37:46.720 in nextjs is an error that is hard to
00:37:49.119 debug because in most cases it's not
00:37:51.800 even your fault that it happens
00:37:54.119 basically what nextjs is saying is that
00:37:56.839 your browser changed the version of the
00:37:58.880 HTML before react was loaded which then
00:38:01.800 means there's an HTML mismatch on the
00:38:03.880 client side and this can happen because
00:38:06.560 of the some things you're doing in the
00:38:07.800 code but more often unfortunately it
00:38:10.720 happens if the client has a browser
00:38:13.079 extension which messes with the HTML
00:38:15.480 before react was loaded so you'll have
00:38:17.560 to manually disable a couple of your
00:38:19.319 extensions until you figure out which
00:38:21.160 one it is for me it was
00:38:23.440 grammarly so I just disabled it and now
00:38:26.640 the error is gone with that said now
00:38:29.040 that we have this dark background we can
00:38:31.200 no longer see this bookwise text so
00:38:33.720 let's actually render an image we can do
00:38:36.560 that by using a nextjs image tag coming
00:38:40.119 from next
00:38:41.680 image pass it a source of for SL ions SL
00:38:48.160 logo.svg with an ALT tag of
00:38:52.160 logo as well as a width of 40 and a
00:38:56.160 height of 40 as well so that it look
00:38:58.400 something like this perfect and for now
00:39:00.839 that means that our header is good so we
00:39:03.119 are ready to start implementing the
00:39:04.760 homepage our homepage will actually be
00:39:06.800 super simple it'll consist of two major
00:39:09.680 components one of which is the hero
00:39:12.079 section or the book overview so at all
00:39:15.359 times at the top we'll be displaying an
00:39:17.960 overview of a new book like this origin
00:39:21.079 book by Dan Brown so on the left side
00:39:23.400 we'll display some text and information
00:39:25.560 about the book as well as a button to
00:39:27.160 board borrow it and on the right side
00:39:29.160 will'll display its image and then below
00:39:31.680 we'll have a list of popular or latest
00:39:34.079 books so that means that it will
00:39:35.720 actually consist of two separate
00:39:37.760 components so let's create them the
00:39:40.200 first component will be called
00:39:42.760 book
00:39:44.640 overview. TSX you can create it within
00:39:47.880 the components folder run
00:39:50.280 rafc and that's it and then we can
00:39:52.880 create the second one which will be
00:39:55.079 called booklist
00:39:57.560 TSX you can also run RFC in there now
00:40:02.040 what we can do is import and render both
00:40:05.000 of these within the home so I'll have a
00:40:07.640 simple react fragment to wrap both of
00:40:10.240 them because we cannot just return two
00:40:11.920 children without wrapping them first and
00:40:14.160 then I can render the book overview as
00:40:16.880 well as a book list and make sure to
00:40:19.880 import both of them from where they need
00:40:21.880 to come once you've done that let's head
00:40:24.000 over to book overview and let's turn it
00:40:26.119 into a section with a class name equal
00:40:28.760 to book overview then within it we can
00:40:31.599 render a div with a class name equal to
00:40:35.359 flex Flex D1 flex-all so the elements
00:40:39.800 appear one below another and a gap of
00:40:42.599 five and within it we can render an H1
00:40:46.000 that'll render some kind of a title so
00:40:48.520 this will be a long book title and
00:40:53.520 that'll look something like this on
00:40:54.880 mobile devices so now we at least know
00:40:56.880 that the book overview is being rendered
00:40:59.200 but what about the book list well let's
00:41:01.800 head into it and this book list will
00:41:03.880 also be a section within which we can
00:41:05.880 render an H2 that'll say something like
00:41:08.720 popular books and we can give it a class
00:41:12.079 name of font
00:41:14.560 db- new text- for Excel and text- light
00:41:20.480 100 there we go so now we have something
00:41:23.400 like this and now is the time to turn it
00:41:25.440 into something that looks more like this
00:41:27.720 where we get an actual book title book
00:41:30.440 information and the description as well
00:41:32.440 as its cover and then we can also show
00:41:34.640 some more covers at the bottom let's do
00:41:36.720 that in the next
00:41:38.880 lesson to get started with showing some
00:41:41.319 data on our homepage so we can quickly
00:41:43.440 build out the UI before we focus on
00:41:45.720 other functionalities let's first import
00:41:48.680 some sample data or dummy data if you
00:41:51.400 will this will allow us to focus on the
00:41:53.520 UI and later on exchange it for real
00:41:56.440 data which which will fetch from our
00:41:58.240 optimized database to do that you can
00:42:00.520 head over to your application and create
00:42:03.319 a new folder called constants within the
00:42:06.760 constants create a new file called
00:42:10.280 index.ts and here we can create some of
00:42:12.839 that fake data that'll look something
00:42:15.560 like this export const sample books is
00:42:20.319 equal to an array of objects of all the
00:42:23.480 information about different books such
00:42:25.800 as an ID of one than a title something
00:42:29.599 like the midnight book and so on but a
00:42:33.079 book has many more pieces of data so for
00:42:35.839 that reason I provided a couple of
00:42:37.480 sample books in the Snippets to copy
00:42:39.839 this contains no programming logic just
00:42:41.960 some static data so copy it and paste it
00:42:44.760 right here into constants you'll notice
00:42:47.760 that here we have some navigation links
00:42:49.880 that we can later on map over as well as
00:42:52.240 a list of many different sample books
00:42:54.839 with their titles authors genre
00:42:57.520 descriptions colors covers videos
00:42:59.839 summaries and more so now we can take
00:43:01.960 those sample books and pass them into
00:43:03.960 the book list by saying title will be
00:43:07.040 equal to latest
00:43:09.640 books books will be equal to sample
00:43:13.680 books coming from constants and we can
00:43:16.760 pass some kind of a container class name
00:43:19.760 of margin top of 28 to divide it a bit
00:43:22.559 from the top and under the book overview
00:43:25.480 we will simply render more information
00:43:27.960 about the current book by simply
00:43:30.680 spreading all the information of sample
00:43:33.640 books zero so that we can head into the
00:43:36.520 book overview and accept all the
00:43:38.839 information about a book right through
00:43:40.800 the prompts we can destructure them such
00:43:43.599 as a title author genre rating total
00:43:48.960 undor copies available uncore copies yep
00:43:53.480 will implement the entire inventory
00:43:55.240 system so users always know how many
00:43:57.400 books are available we can also add a
00:43:59.920 description color and cover as well and
00:44:03.359 now right here just to verify it's
00:44:04.880 working under H1 we can render a book
00:44:07.640 title The Midnight Library there we go
00:44:10.760 now you can see that our tab script is
00:44:12.440 complaining a lot here saying that
00:44:14.440 binding element author has a type of any
00:44:17.920 what we can do instead is create some
00:44:20.280 generic types and to create them we can
00:44:22.880 actually copy all of these props that we
00:44:24.839 have here and then create a new file in
00:44:27.640 the root of our application
00:44:30.400 called types.
00:44:34.119 D.S in there you can create a new
00:44:36.559 interface called book and you can paste
00:44:40.119 all these props that you just copied
00:44:42.640 select multiple lines as we can edit
00:44:44.839 them remove the comma and instead make
00:44:48.800 them all to be equal to a string like
00:44:51.400 this now not all are going to be strings
00:44:54.000 some are going to be numbers like an ID
00:44:56.640 property which will be set to number
00:44:59.200 title is a string author is a string
00:45:01.720 genre is a string rating will be a
00:45:04.400 number total copies will be a number
00:45:07.920 available copies will be a number as
00:45:10.400 well next we're going to have a
00:45:11.760 description color cover and we're also
00:45:14.440 going to have a video of a type string
00:45:17.119 summary of a type string as well as an
00:45:20.079 optional is loaned
00:45:22.520 book which is going to be a Boolean so
00:45:25.480 with this we're now telling t script how
00:45:27.599 our book should look like and you can
00:45:29.720 Define it by simply saying colon book so
00:45:32.960 these props are of a type
00:45:35.200 book great now what do you say that we
00:45:37.680 render some more information about this
00:45:39.599 book right below the H1 I'll create
00:45:42.040 another div with a class name equal to
00:45:45.280 book- info and within it I'll render the
00:45:48.319 first P tag that'll say bu and then a
00:45:52.119 span and then within the span we can
00:45:54.520 render the author's name that'll look
00:45:56.319 something like this
00:45:57.559 but of course we can make the span a bit
00:45:59.559 nicer looking by giving it a class name
00:46:02.400 of font D semibold and text
00:46:07.240 dl-200 there we go that's going to give
00:46:09.400 it that little pop we can now duplicate
00:46:11.200 this P tag one more time and for the
00:46:13.599 second time it'll say category and then
00:46:16.240 we can set the category to be equal to
00:46:18.400 genre either word is fine there we go
00:46:20.880 and this is looking good to me below
00:46:22.880 this P tag we can have another div
00:46:25.599 that'll have a class name equal to flex
00:46:29.119 and flex D row with a gap of one within
00:46:32.960 that div we'll render an image coming
00:46:35.559 from next image with a source of SL ions
00:46:40.280 slst start. SVG with an Al tag of star
00:46:45.319 width of about 22 and a height of
00:46:48.599 22 and right below it we can render a P
00:46:51.520 tag that'll say rating so now we're
00:46:54.359 displaying the rating of 4.6 for this
00:46:56.559 book as well now let's hit a bit down so
00:46:59.079 one and then two divs down I'll create
00:47:02.040 another div that'll have a class name
00:47:04.800 equal to book-
00:47:07.599 copies and within it we can render a P
00:47:10.119 tag that'll say total
00:47:12.680 books and then we can render a span
00:47:15.880 which will render the number of total
00:47:18.040 copies of those books and we can do
00:47:20.079 another P tag Below in a similar way
00:47:23.480 that'll say available books which will
00:47:26.319 render the number of available copies so
00:47:30.319 we have total books 20 available books
00:47:32.559 10 we can now go below this div and
00:47:35.599 create another P tag for the description
00:47:38.359 by giving it a class name is equal to
00:47:41.599 description or book
00:47:44.280 description and we can render the
00:47:46.359 description right within it like
00:47:49.160 so there we go a dazzling novel about
00:47:53.200 all the choices that go into a life well
00:47:56.200 lived interesting I mean you could have
00:47:58.800 some fantasy or fiction books here as
00:48:00.800 well but as you know we're going to turn
00:48:02.599 this into University Library later on
00:48:05.040 below the P tag we can render a button
00:48:07.680 this is a button coming from our chatan
00:48:09.599 components with a class name equal to
00:48:12.880 book- overview BTN and within it we can
00:48:16.920 render an image with a source of SL ions
00:48:20.599 SL book.svg with an Al tag of
00:48:24.720 book a width of about
00:48:27.400 20 and a height of about 20 as well
00:48:31.000 right below the icon we can render a
00:48:32.720 piece of text that'll say
00:48:35.160 borrow book and we can give it a class
00:48:38.160 name of font
00:48:40.599 db- new text- excl and text- dark 100 I
00:48:46.280 think just borrow should do because it
00:48:48.480 makes sense we want to borrow the book
00:48:50.040 finally we can render the book cover
00:48:52.359 right below or to the right side on
00:48:54.720 desktop devices so let's go below load
00:48:57.040 this div and create another div with a
00:49:00.079 class name of relative Flex Flex -1 and
00:49:04.839 justify Dash Center within it we can
00:49:07.000 have another div with a class name off
00:49:09.640 relative within which we can render a
00:49:11.760 new component called book cover so let's
00:49:14.760 head over to the components folder and
00:49:16.640 create a new component called book
00:49:20.319 cover. TSX run rafc and now we can
00:49:24.760 import it right here into the book
00:49:26.280 overview
00:49:27.680 by saying book cover and to it we can
00:49:31.760 pass a couple of props we can first pass
00:49:34.400 a variant will this be a wide or not
00:49:37.359 wide we can then pass a class name
00:49:40.200 should it appear above or below other
00:49:42.319 elements in this case like a z index of
00:49:44.799 10 so it appears above we can pass a
00:49:47.839 cover color equal to color as well as a
00:49:51.280 cover
00:49:52.599 image equal to cover of course this is
00:49:56.160 the UI we're trying to implement so
00:49:57.920 we'll have two different covers one
00:50:00.200 above and one below so right below this
00:50:03.160 one let's create another div which we
00:50:05.760 can absolutely position a bit away from
00:50:07.680 the original one by giving it a position
00:50:10.319 of absolute left of 16 top of 10 rotate
00:50:16.559 of 12 opacity of 40 and a Max small
00:50:21.280 devices hidden because we don't have
00:50:23.319 enough space to show it and within here
00:50:25.799 we can also render the book cover it'll
00:50:28.640 be very similar but in this case it
00:50:30.799 won't have any additional class names
00:50:32.880 because we want it to appear below the
00:50:34.440 top one so now we can dive into the book
00:50:36.400 cover and implement it within here we
00:50:39.079 want to accept all the props we've
00:50:41.160 passed into this component so we can do
00:50:43.319 that right here at the top and say we'll
00:50:46.079 be accepting a class name let's also get
00:50:49.200 a variant of the book cover a cover
00:50:53.160 color as well as a cover URL and and we
00:50:56.920 can define those as props so now right
00:51:00.000 here at the top we can create a new
00:51:01.799 interface of props we can Define the
00:51:04.359 class name which will be an optional and
00:51:06.520 a type of string we can define a variant
00:51:09.319 which actually will make a bit more
00:51:11.400 complex by creating a new object of
00:51:14.079 different variant Styles such as con
00:51:16.920 variant Styles is equal to an object
00:51:20.440 where we have extra small which will
00:51:23.200 correspond to the class name of book-
00:51:26.119 cover underscore extra underscore
00:51:30.839 small now we can repeat this over for
00:51:33.880 small medium regular and wide so let's
00:51:37.079 rename them appropriately we have small
00:51:39.920 which is going to be book cover
00:51:41.760 underscore small next we have medium so
00:51:45.599 we can rename this one to medium and
00:51:48.760 book cover medium after that we can have
00:51:51.760 regular which is going to be book cover
00:51:55.359 regular and and finally we'll have wide
00:51:59.559 which is going to be book cover wide
00:52:02.799 there we go and just to make sure tab
00:52:04.960 script is safe we can Define the type of
00:52:07.280 this as record of book cover variant so
00:52:13.440 that'll look something like this book
00:52:15.920 cover variant and then a string for the
00:52:19.240 second part of it so what is this book
00:52:21.799 cover variant well it'll simply be
00:52:24.119 another tab script type so we can Define
00:52:26.240 it by by saying book cover variant and
00:52:29.119 it'll be one of these few different
00:52:31.359 things so let's call it variant variant
00:52:34.720 here as well and it'll either be extra
00:52:37.160 small or small or medium or regular or Y
00:52:42.079 so now we always know that we can use
00:52:43.920 one of these variant Styles and within
00:52:46.000 our interface we can Define that the
00:52:47.680 variant will actually be of a type book
00:52:51.960 cover variant after that we have a cover
00:52:55.040 color and a cover URL the variant will
00:52:58.559 be optional because we can Define some
00:53:00.440 default book cover variant with that
00:53:02.760 said let's provide those default values
00:53:05.720 for example the default variant can be
00:53:07.880 regular if we don't pass any other one
00:53:10.640 through props the default cover color
00:53:13.359 can be something like hash 012 b48 and
00:53:18.079 then a default cover URL can be a
00:53:20.960 placeholder photo like https Colin SL
00:53:25.559 placehold Co 400 over 600. BNG this is
00:53:31.200 just some placeholder image great and
00:53:33.839 now we can put those props to use so
00:53:36.040 instead of simply saying book cover
00:53:38.160 right here let's actually return a div
00:53:41.359 with a class
00:53:42.839 name equal to first I'll wrap it into CN
00:53:47.359 which stands for class names and pass in
00:53:49.799 the classes that it'll always have such
00:53:51.839 as relative transition Dall and duration
00:53:55.839 of 300 so it will have a slight
00:53:58.720 animation after that we can pass the
00:54:01.200 variant Styles and then get into a
00:54:04.000 specific variant for passing through
00:54:05.880 props so what this means is that if a
00:54:08.480 variant is regular it'll go into the
00:54:10.520 variant Styles and apply a variant book
00:54:14.520 cover regular class name and finally we
00:54:17.640 can provide additional class names that
00:54:19.640 we pass through props after that within
00:54:22.319 this div we can render a book cover SVG
00:54:25.359 so let's write something like book side
00:54:28.640 SVG which later on will turn into a new
00:54:31.480 component and then below it we can
00:54:33.599 render another div this div will have a
00:54:36.920 class name of absolute and a zindex of
00:54:40.440 10 to appear on top of other
00:54:43.000 elements it'll also have some additional
00:54:45.640 Styles which we will write in line such
00:54:48.799 as left will be 12% the width will be
00:54:52.520 set to
00:54:54.119 87.5% I found that value to work the
00:54:56.720 best and of course we have to put it
00:54:58.799 within a string and then after that
00:55:01.000 we'll have the height which we can put
00:55:02.760 to about
00:55:05.040 88% here we go and now within this div
00:55:08.599 we can render a xgs image so let's just
00:55:11.599 say image right
00:55:13.359 here with a source of cover URL so the
00:55:17.119 one we're passing through props and an
00:55:19.319 I'll tag of something like book
00:55:23.240 cover and close it right here this image
00:55:27.280 also needs to have a fill property as we
00:55:29.640 wanted to fill the entire space of the
00:55:31.359 div a class name equal to rounded DSM as
00:55:37.240 well as object dill and I think that
00:55:39.920 should be good but as soon as I try to
00:55:42.440 actually showcase that image it looks
00:55:44.599 like it picked up a placeholder image so
00:55:47.000 it wasn't able to show it right here
00:55:49.520 because it's not added to the next
00:55:51.319 config so we have to head over to next
00:55:54.240 config JS and add place told that Co
00:55:57.559 right there so let's do that right now
00:55:59.920 by heading over to next config and here
00:56:02.520 you'll have to define the images object
00:56:06.520 which will contain a remote patterns
00:56:08.880 array which will contain different
00:56:11.240 places from where you want to get access
00:56:13.200 to images the first one will be a
00:56:15.960 protocol of https and it'll have a host
00:56:20.000 name of the one you just copied
00:56:22.119 placehold doco later on we'll be able to
00:56:25.599 add some other places from which we
00:56:27.440 might want to get our images for now we
00:56:29.400 have the placeholder so if I reload you
00:56:31.559 should be able to see our placeholder
00:56:33.039 image but wait why are we getting a
00:56:35.319 placeholder image and not this image
00:56:37.319 we're passing right here well that's
00:56:39.559 because here I called it cover image and
00:56:42.200 back in the book cover I called it cover
00:56:44.160 URL so let's actually change this over
00:56:46.319 to cover image so it appears nicely and
00:56:49.319 then we can also refer to it right here
00:56:51.400 as cover image now you'll see the host
00:56:54.400 name will change because now it's
00:56:56.319 picking up the image from our constants
00:56:58.920 index. DSX or DS where the image is
00:57:03.039 coming from Amazon so let's actually
00:57:06.039 head over to our next config and now you
00:57:08.480 know what we need to do we have to add
00:57:10.640 another remote pattern with a protocol
00:57:13.839 of
00:57:16.319 https as well as a host
00:57:19.000 name equal to and we can copy it from
00:57:22.079 here from the error message m.m media
00:57:24.920 amazon.com
00:57:26.920 it'll look something like this so if you
00:57:29.359 do that and reload you should be able to
00:57:31.640 see a great looking cover photo but we
00:57:34.520 won't stop there we'll actually turn it
00:57:37.240 into this very interesting 3D look where
00:57:40.119 we'll wrap it with some kind of an SVG
00:57:42.960 container and then put another version
00:57:45.039 of that image right behind it for this
00:57:47.119 more complete look so to achieve that
00:57:49.920 let's render a new component by heading
00:57:52.119 over to our components folder and
00:57:53.839 creating it and I'll call it
00:57:57.039 book cover SVG do DSX this is going to
00:58:02.280 be just the regular SVG image so think
00:58:05.160 of this as an image file you cannot
00:58:07.039 really code this out so I'll provide it
00:58:08.960 to you alongside the other files simply
00:58:11.440 find the book cover SVG copy it and
00:58:13.839 paste it here as you can see these are
00:58:16.119 the different paths that create this SVG
00:58:19.160 image the reason why we had to have it
00:58:21.280 as a separate component is so we can
00:58:23.280 pass the cover color of the image and
00:58:25.319 match it with the rest rest of the book
00:58:27.119 so now let's head back over to book
00:58:28.799 cover and let's render this book cover
00:58:32.400 SVG and pass the cover color of cover
00:58:35.400 color right into it and you can see that
00:58:37.599 now even in Mobile we have this more
00:58:39.640 completed look there's one thing we have
00:58:41.559 to fix and that is that in the interface
00:58:44.319 props we're still calling it a cover URL
00:58:47.000 but here it's called a cover image so
00:58:49.280 let's actually fix the name right here
00:58:52.280 in the interface of props to be cover
00:58:54.400 image as well just so our book overview
00:58:56.799 doesn't
00:58:57.720 complain now let's check it out on
00:59:00.039 desktop you can now see that the
00:59:01.920 Midnight Library is appearing we have
00:59:04.319 two books so it appears like one is
00:59:06.440 stack on top of the other and we also
00:59:08.799 have this nice looking SVG which is in
00:59:11.280 the color of the cover pretty cool if I
00:59:14.079 may say so myself now with that in mind
00:59:16.760 the hero section is now done so the next
00:59:19.559 thing we have to do will be the popular
00:59:22.079 or the latest book section right below
00:59:24.319 the hero for that we can close the
00:59:27.400 overview and the cover and we can go
00:59:29.920 back over to page. DSX and head into the
00:59:33.119 book list to accept all of the props and
00:59:36.119 start implementing it so let's
00:59:38.039 immediately access the props we're
00:59:39.839 passing from the Page by these
00:59:42.000 structuring the title the books as well
00:59:45.640 as the additional container class name
00:59:48.599 that'll look something like
00:59:51.000 this and we can set it to be of a type
00:59:54.359 which is called props and we can Define
00:59:56.839 that interface right here above by
00:59:58.640 saying interface
01:00:00.760 props and it'll contain a title of a
01:00:03.760 type string a books property which will
01:00:07.319 be of a type book array remember we
01:00:10.359 already created that Global typescript
01:00:12.920 interface right here and then finally
01:00:15.680 we'll have a container class name which
01:00:18.599 will be optional of a typ string so now
01:00:21.240 let's put those to use by giving this
01:00:23.760 section A Class name equal to container
01:00:28.359 class name below it we have an H2
01:00:31.160 that'll simply render the title so
01:00:33.319 that'll look something like this it'll
01:00:35.960 say latest books and finally we can
01:00:38.319 render a UL an unordered list right here
01:00:41.599 below and it'll have a class name equal
01:00:44.920 to book
01:00:47.640 list and right here within it we can map
01:00:50.799 over those books by saying books. map we
01:00:54.520 can map over each book and for each book
01:00:57.599 we can render a new component so let's
01:01:00.039 actually head over to the components
01:01:01.680 folder and create a new component called
01:01:05.160 bookc card. TSX run rce right within it
01:01:11.440 and then we can just import it and
01:01:13.039 render it right here by calling the book
01:01:15.520 card for each one of the books we map
01:01:18.160 over of course since we're mapping over
01:01:20.599 it we also have to provide it a key and
01:01:23.240 a key can be equal to book. tile because
01:01:26.599 in this case all of our books are going
01:01:28.039 to have distinct titles and then we can
01:01:30.839 also spread the rest of the properties
01:01:33.359 of the book so we can very quickly use
01:01:35.559 them within the book card oh looks like
01:01:37.680 I misspelled this container class name
01:01:39.640 right here see how useful it is to have
01:01:41.440 typescript because it's telling us that
01:01:43.119 it doesn't exist on the props above so I
01:01:46.280 will just fix it right here and now
01:01:48.160 it'll get moved a bit down so with that
01:01:51.240 said let's move over into the book card
01:01:53.720 component and let's implement it I think
01:01:56.200 you can start seeing how we're moving
01:01:57.960 from pages to then smaller pieces of UI
01:02:00.960 that we can then reuse across different
01:02:03.039 pages also this borrow button is looking
01:02:05.400 a bit weird to me so if I head over to
01:02:07.480 book
01:02:08.400 overview let's check it out it is right
01:02:11.559 here oh I think I misspelled overview so
01:02:15.079 if I fix overview right here yep now it
01:02:18.920 has a bit more weight to it and it's
01:02:20.720 also looking a bit better on desktop
01:02:22.599 devices perfect so let's go back to the
01:02:24.839 book card
01:02:26.760 and let's implement it first we can
01:02:28.799 accept all of the props such as the ID
01:02:32.079 title genre color cover and is loaned
01:02:38.079 book which can be set to false for now
01:02:41.480 by default and those will be of a type
01:02:44.480 book how useful it is to just be able to
01:02:46.920 reuse the book type now that we have
01:02:49.480 that let's actually turn this return
01:02:51.599 statement into an Li and what you can do
01:02:54.319 is if you just have a return statement
01:02:56.000 and nothing else you can just
01:02:57.640 immediately return it without specifying
01:03:00.160 the return statement so that'll look
01:03:02.400 something like this within this Li I
01:03:04.520 will render a link component because
01:03:06.880 each of these cards will actually be
01:03:09.039 clickable and It'll point to forward SL
01:03:11.680 books forward slash and then the ID of
01:03:14.559 that specific book that'll look
01:03:16.520 something like this and we can close
01:03:18.480 that link right
01:03:20.119 here and within it we can try to render
01:03:22.720 the book cover see how cool this is we
01:03:25.000 will reuse the book cover component that
01:03:27.799 we created before by passing a cover
01:03:30.559 color equal to color as well as passing
01:03:33.960 a cover image equal to just cover let's
01:03:37.160 not forget to import this book cover
01:03:40.559 from the top and would you look at that
01:03:43.039 immediately we get back all the dummy
01:03:45.119 books that I created before so this is
01:03:47.520 already looking so much better I think
01:03:49.359 typescript is letting us know that we're
01:03:51.079 missing the variant prop in the book so
01:03:53.480 let's see how we have defined it we said
01:03:55.920 if no variant is passed it'll equal to
01:03:58.200 default so since we have the default
01:04:00.400 value I think we can make this variant
01:04:02.880 optional and in that case it'll be good
01:04:05.200 because it'll just take the default
01:04:06.559 variant this is pretty useful to be able
01:04:08.680 to use the default values for props in
01:04:11.760 situations where the most common type of
01:04:14.039 prop you will pass will be the one that
01:04:15.920 you set to the default value but when it
01:04:18.000 changes you can then easily override it
01:04:20.559 by passing some kind of a different
01:04:22.000 variant like wide now let's give this Li
01:04:25.319 a class
01:04:26.680 name I will set it to be equal to I'll
01:04:30.559 do a CN property and then I'll check if
01:04:33.240 is loaned book and only if it's loaned
01:04:36.480 then on extra small devices we'll do a w
01:04:39.520 of 52 and W of FO you'll see what this
01:04:43.559 will do soon to this link we can also
01:04:45.799 pass a class name we'll do the same
01:04:47.839 thing CN and then if is loan book we
01:04:52.520 will give it a w- fo
01:04:56.680 a flex property
01:04:58.680 flex-all and items D center now let's go
01:05:01.960 below the book cover and let's render a
01:05:04.520 div that'll render two different P tags
01:05:07.480 the first one will have a class name of
01:05:10.119 book- title and you can guess it it'll
01:05:13.520 render the title and the second one will
01:05:16.480 have a P tag of
01:05:18.720 book genre so that'll look something
01:05:21.400 like this and right within it we can
01:05:23.839 render the genre okay this is looking a
01:05:26.680 bit better let's also style this div by
01:05:29.359 giving it a class name of CN it'll
01:05:32.920 always have a margin top of four but
01:05:35.680 then only if it is not loan book in that
01:05:39.400 case we can give it an extra small of
01:05:41.760 Max W 40 and typically a Max W of 28 so
01:05:47.160 in this case since they're not loaned
01:05:49.119 they will all be able to fit in this
01:05:50.599 nice layout but now if it is loaned we
01:05:53.119 can go below this div and say if it is
01:05:55.799 loan book in that case we can render
01:05:58.720 another div with a class name of margin
01:06:02.640 top of three with a W of
01:06:05.680 fool and we can render another div with
01:06:08.599 a class name of book- loaned and within
01:06:13.039 it we can render an image coming from
01:06:15.359 next image with a source of SL ions SL
01:06:20.960 calendar.
01:06:23.160 SVG with an Al tag of calendar a width
01:06:26.559 of about 18 a height of 18 and a class
01:06:30.720 name of object Das contain right below
01:06:34.039 it we can also put a P tag that will say
01:06:36.200 something
01:06:37.319 like 11 days left
01:06:41.839 to
01:06:43.839 return and we can give it a class name
01:06:47.000 equal to text- light 100 oh and let's
01:06:50.319 put this P tag right in this div and
01:06:52.799 then we can exit one div and render a
01:06:55.960 button and that button will simply have
01:06:58.640 a class name equal to book BTN and we
01:07:03.000 can say
01:07:04.640 download receipt there we go so right
01:07:07.359 now we don't have any loan books but I
01:07:09.920 think if we head over to
01:07:11.720 constants which is right here index. TSX
01:07:15.240 and add the is
01:07:17.200 loaned book property and set it to true
01:07:21.400 you can now see that this will take more
01:07:23.319 space and it'll say download receipt so
01:07:26.039 as we actually expand this you can see
01:07:28.000 how that will look
01:07:29.279 like there we go so here it looks
01:07:31.839 similar because we have more space to
01:07:33.680 show all the data but on mobile devices
01:07:36.359 it actually takes the full row so we can
01:07:38.319 properly show everything for now I will
01:07:40.240 remove that is loan book property from
01:07:42.839 these fake dummy books believe it or not
01:07:45.039 we have completed our book card it was a
01:07:47.559 pretty simple component so now it's
01:07:49.799 looking something like this we can now
01:07:51.520 close the book card the book list where
01:07:53.880 the book card is used as well the book
01:07:55.960 covered and with it we have implemented
01:07:58.119 the two components that our homepage is
01:08:00.520 made up of so let's open it up in the
01:08:02.520 full screen there we go we have a nice
01:08:05.119 looking hero section with this SVG book
01:08:07.960 cover and then we have some latest books
01:08:10.440 right here falling nicely into line with
01:08:12.920 that in mind our homepage UI is now
01:08:15.160 complete so we are ready to move to
01:08:17.479 pages that users need to visit before
01:08:20.399 they can visit the homepage or borrow
01:08:22.759 any books and that is of course the o we
01:08:26.158 have two beautifully designed o pages
01:08:28.719 with the form on the left and then the
01:08:30.719 cover image on the right same thing
01:08:32.920 right here for the signin it has less
01:08:35.399 Fields but the same structure so in the
01:08:37.759 next lesson I'll teach you how we can do
01:08:39.520 those two in a way that we can reach
01:08:41.560 full reusability of all of these forms
01:08:44.560 and components that make them great work
01:08:46.920 on completing the
01:08:49.359 homepage to get started creating our
01:08:52.120 authentication Pages let's first create
01:08:54.640 the routes
01:08:56.000 we can do that by heading over to our
01:08:58.238 app folder and creating a new route
01:09:01.640 group that's going to be a folder which
01:09:04.560 I'll call O and make sure to wrap it in
01:09:07.359 parentheses to make it an O group within
01:09:09.479 it I'll create a new layout which will
01:09:12.040 only serve the odd group routes this
01:09:15.000 time we won't have the nav bar so let's
01:09:17.439 create it layout. TSX run
01:09:22.238 RFC and as you know with every layout it
01:09:25.560 must get children as props and children
01:09:28.679 are of a
01:09:30.158 type react
01:09:32.839 node and then it simply can return that
01:09:35.439 children for now so now whatever other
01:09:37.679 Pages we create it will simply show
01:09:40.040 those pages let me show you I'll create
01:09:42.960 two new folders within o one will be
01:09:46.158 called sign-
01:09:49.120 in and the other one will be called sign
01:09:52.679 Dash up
01:09:55.440 within both of these we'll create a new
01:09:57.920 page. TSX to create a route within which
01:10:01.679 I will run
01:10:03.440 rafc so in both of these Pages just
01:10:06.320 create a new page. TSX and run
01:10:10.600 RFC if you do that we can now manually
01:10:13.320 move over to both of these Pages by
01:10:16.199 heading to forward slash sign- in or
01:10:20.719 just sign Dash up there we go so let's
01:10:25.000 first focus on the layout as it is a bit
01:10:27.440 Bland and both of these pages will share
01:10:29.880 it so I'll move over to layout belonging
01:10:32.920 to O first things first I'll wrap
01:10:35.800 everything in an HTML 5 semantic main
01:10:38.280 tag with a class name equal to o dash
01:10:44.400 container for now I will remove the
01:10:46.360 children within it we'll have another
01:10:49.640 section which we'll use for the form so
01:10:52.199 it'll have a class name equal to Au Dash
01:10:56.600 form there we go so now we get that nice
01:10:59.159 looking background we'll also render a
01:11:01.800 div with a class name equal to
01:11:05.800 off-box so this is the box for the form
01:11:08.960 and then within it we can render an
01:11:10.480 image belonging to next image with a
01:11:13.360 source of SL iicons SL
01:11:17.320 logo.svg with an ALT tag of logo a width
01:11:21.480 of about 37 and a height of about 37 as
01:11:25.920 well if we close it we get this nice
01:11:28.560 looking logo and we can render an H1
01:11:31.159 that'll simply say bookwise which is the
01:11:33.280 name of our application with a class
01:11:35.920 name equal to text- toxel with a font
01:11:39.800 semi bold and text- white there we go
01:11:43.400 let's also wrap those two in an
01:11:44.920 additional div so both the image and the
01:11:47.719 H1 that'll have a class name equal to
01:11:51.239 flex Flex D row and the gap of two just
01:11:55.040 to to make them look a bit nicer now we
01:11:56.880 can go below that div and we can render
01:11:59.400 another div that will render the
01:12:01.480 children meaning whatever is appearing
01:12:03.800 on both of these pages so now if I
01:12:06.239 change this text on the signin page to
01:12:09.360 signin form I think you'll start getting
01:12:11.880 the idea of where we're going and I'll
01:12:14.360 change it to sign up form here so now if
01:12:18.440 I manually move to sign in you can see
01:12:20.760 that even though the layout Remains the
01:12:22.639 Same here we have the signin form and
01:12:25.880 here we have the sign up form and
01:12:27.840 finally both of these will actually
01:12:29.719 share the right side of the screen as
01:12:31.520 well so I can create another section
01:12:33.760 which will have a class name equal to O
01:12:37.320 illustration and within it we can render
01:12:39.600 an image that will have a source of SL
01:12:43.760 images SL
01:12:45.880 off-
01:12:47.920 illustration.png with an Al tag of O
01:12:54.120 illustration with a height of about
01:12:56.239 1,000 a width of about 1,000 as well and
01:13:00.360 finally a class name equal to size- full
01:13:04.639 and object Das
01:13:07.960 cover so you can see on mobile devices
01:13:10.719 it's going to show up at the top and on
01:13:12.560 desktop devices it'll take half the
01:13:14.400 screen because we don't really need much
01:13:16.080 more for a simple form how do we make
01:13:18.320 that happen well if you look into the O
01:13:20.880 illustration you'll notice that we're
01:13:22.760 setting it to Sticky with the height of
01:13:24.760 40 W fo so it takes the full width and
01:13:28.280 then in small devices we're positioning
01:13:30.199 it at the top zero and in small devices
01:13:32.440 we're making it take the full screen so
01:13:34.239 it's going to Simply depend on the
01:13:35.840 screen size of how it's going to behave
01:13:38.159 as soon as we go over the small it'll
01:13:40.000 take the full height and then expand and
01:13:42.159 an extra small it'll look like this with
01:13:44.440 that in mind we're now done with the
01:13:46.239 layout and we are ready to start
01:13:47.840 implementing both of these pages but we
01:13:50.440 won't just create a form here and then
01:13:53.239 just copy it over and do do the same
01:13:55.520 thing here with a couple of different
01:13:56.880 inputs not at all we'll create a single
01:14:00.679 o form component that will'll be able to
01:14:02.920 then switch between when we move from
01:14:05.239 sign in to sign up let me show you how
01:14:08.040 we can do that I'll head over to
01:14:09.920 components and create a new component
01:14:12.880 called o
01:14:14.639 form right here.
01:14:17.880 TSX run rafc within it and now we have
01:14:22.280 the OD form now this OD form will accept
01:14:25.719 a couple of different props such as the
01:14:28.719 type of the form is it sign in or sign
01:14:31.400 up it can also accept something known as
01:14:33.480 a schema meaning schema validation for
01:14:35.840 the fields within that specific type of
01:14:38.280 the form as well as the default values
01:14:41.600 for the fields within the form and
01:14:44.199 finally it'll accept a different
01:14:46.080 onsubmit function because depending on
01:14:48.520 which one we're submitting we want to
01:14:49.920 either log the user in or create a new
01:14:52.760 user so these will be of a type type
01:14:55.440 props so let's define them right here at
01:14:57.520 the top by saying interface props and
01:15:00.560 here for the first time we're dealing
01:15:02.239 with a bit more complex typescript
01:15:04.199 values where we're going to have a
01:15:06.360 generic parameter of T what t means is
01:15:10.280 that it's generic so it can take in the
01:15:13.080 type of whatever we pass into it because
01:15:15.560 we don't yet know how the exact
01:15:17.360 structure will look like rather we'll
01:15:19.719 take in the fields or the inputs that
01:15:22.000 we're going to have by extending the
01:15:24.639 field field values so we can say extend
01:15:27.639 field values and this will come in from
01:15:30.920 react hook form but we cannot use this
01:15:33.080 yet because we haven't yet installed a
01:15:35.360 shaten form component that contains the
01:15:37.719 Imports for react hook form as well as
01:15:40.199 Zod so head over to shaten and search
01:15:43.159 for form and it'll tell you here that
01:15:45.360 forms are tricky one of the most common
01:15:47.679 things you'll build in a web application
01:15:49.400 but also one of the most complex in this
01:15:51.719 guide we'll take a look at building
01:15:53.000 forms with react hook form and Zod so
01:15:56.600 let's actually go through the
01:15:57.840 installation process we first have to
01:16:00.600 add it by copying this command and then
01:16:03.199 pasting it into the terminal we'll have
01:16:05.000 to press enter to force install it since
01:16:07.480 we're using newer versions of nextjs and
01:16:09.440 react and it'll install it into our
01:16:11.600 components folder after that we are
01:16:13.840 ready to create a schema the schema
01:16:16.480 defines the shape of our form so let's
01:16:18.800 actually head over to our lib folder and
01:16:21.760 within it create a new file called
01:16:24.320 validation
01:16:27.320 dots within there we can do something
01:16:29.760 like this export const sign up schema is
01:16:34.920 equal to Z doob and then we can pass all
01:16:37.920 the fields that we want to have Z we
01:16:40.520 have to import like this by saying
01:16:42.760 import Z from Zod and this is coming
01:16:45.800 with the installation of a component
01:16:48.400 it's also asking us whether we want to
01:16:49.840 override the button let's say sure yeah
01:16:53.480 and now it'll update it and the form
01:16:55.639 will be installed so which types of
01:16:57.719 fields will we have on our signup form
01:17:00.560 well we'll have a full name so let's say
01:17:03.199 full name and actually I won't use camel
01:17:06.719 case here because later on once we store
01:17:08.600 it in the database we have to keep it
01:17:10.760 all lowercase like this and that'll be a
01:17:13.400 z. string do Min characters of three so
01:17:18.000 a string of a minimum of three
01:17:20.360 characters after that we can have an
01:17:22.080 email which will be a z. string
01:17:25.520 email next we can have a
01:17:27.520 University ID and you know what
01:17:30.520 typically we would have to have it as
01:17:32.199 all lowercase or maybe something like an
01:17:35.239 underscore in between but this is not
01:17:37.480 really a standard JavaScript practice
01:17:39.639 even though it is a good SQL practice
01:17:42.280 and even my webstorm is telling me right
01:17:44.120 here that there is a typo here this
01:17:46.400 should have been full name so let's
01:17:49.280 actually keep it camel case like this
01:17:51.520 for our front end code and then when we
01:17:53.960 pass it over to our back back end we can
01:17:55.800 then switch it over to snake case with
01:17:59.000 underscores but for now I'll leave it
01:18:01.080 like this University ID that'll have a
01:18:04.520 z. coer number so it'll actually take a
01:18:08.360 string and turn it into a number we do
01:18:10.440 it like that then we're going to have a
01:18:12.600 university card which will be of a type
01:18:14.679 z.
01:18:15.960 string do nonempty and we'll say
01:18:21.199 University card is required
01:18:26.280 perfect and finally we of course need a
01:18:28.800 password so let's put a password Here of
01:18:31.360 a type z. string. M length of eight
01:18:35.040 characters and let's define the schema
01:18:37.159 for the signin by saying export const
01:18:40.120 sign in schema is z. object where we get
01:18:43.840 an email and a password and that is it
01:18:47.239 and now we can use those two schemas as
01:18:49.320 we pass them into corresponding
01:18:50.960 components so let's head back over to
01:18:53.040 our odd form and now we're accepting
01:18:55.400 those different types of props so what I
01:18:57.520 wanted to show you is how we can
01:18:59.239 actually call this odd form depending on
01:19:01.400 the type from the two different pages
01:19:03.840 that'll look something like this I'll
01:19:05.840 say Au form Das Dash and then I'll
01:19:08.800 render the type which we dynamically
01:19:11.080 pass as a prop and then in both of these
01:19:14.000 components the only thing I will render
01:19:16.719 is a self-closing OD form component so
01:19:20.000 that'll look something like this OD form
01:19:22.600 to which we can now pass a type
01:19:25.239 equal to signore n we can also pass a
01:19:29.800 schema coming from validations equal to
01:19:33.400 sign in schema which will import it from
01:19:36.280 validations as well as default values
01:19:39.560 equal to email and password both at the
01:19:42.920 start equal to an empty string and now
01:19:44.880 if we save it and head over to sign in
01:19:47.199 you can see that it says off form sign
01:19:49.159 in and it has the sign-in schema so it
01:19:51.760 knows which Fields it has it has the
01:19:53.840 type as well as the the default values
01:19:56.560 finally it also needs an onsubmit
01:19:58.719 function which for now I will leave as
01:20:00.960 an empty callback function and later on
01:20:03.199 we can Implement its logic so let me
01:20:05.840 actually copy this entire code and paste
01:20:09.120 it to the sign up form as well but this
01:20:12.080 time I will change the type to sign up
01:20:15.400 I'll change the schema to sign up schema
01:20:18.760 so we have to get it from
01:20:20.639 validations and under default values
01:20:23.320 we'll have to pass a few more values
01:20:25.239 like email password as well as full name
01:20:29.639 which will start as an empty string
01:20:32.080 University ID which will start as an
01:20:34.480 empty string and a university card which
01:20:38.040 will also start as an empty string great
01:20:41.080 and now you can see as we're switching
01:20:42.440 between those both of these will be the
01:20:44.280 odd form but their logic and the fields
01:20:46.960 will show will change depending on the
01:20:49.000 type now we can turn this component into
01:20:51.480 a use client component right here at the
01:20:53.840 top because it is a form and we're
01:20:56.159 managing a lot of States here so it has
01:20:58.040 to be rendered on the client side then
01:21:00.239 we have to define the form by importing
01:21:02.760 a few things such as Zod resolver as
01:21:05.560 well as use form from react hook form
01:21:08.719 that'll look like this and we can Define
01:21:11.080 the form as well as the onsubmit
01:21:13.560 function so let's put that right here at
01:21:15.639 the top of our component that'll be con
01:21:18.679 form is equal to use form Z coming from
01:21:23.679 Zod so you have to import it that'll be
01:21:26.199 form and then we can Define the type of
01:21:28.400 that form to be use form return coming
01:21:33.280 from react hook form to which we can
01:21:35.639 pass the T generic type and then I don't
01:21:39.280 think we actually have to have this type
01:21:40.880 because we're defining it in a different
01:21:42.440 way we can just call the Ed form and
01:21:44.520 then Define the Zod resolver to which we
01:21:47.480 can pass our Dynamic schema so it's no
01:21:49.679 longer just a singular form schema it is
01:21:52.080 the schema coming from params right here
01:21:54.560 so it'll depend sometimes it'll be
01:21:56.199 signed in and sometimes it'll be signed
01:21:58.159 up and the same thing happens for
01:22:00.159 default values we won't just Define them
01:22:02.280 here manually we'll say default values
01:22:05.040 is equal to default values as default
01:22:08.880 values of a type T coming through props
01:22:12.239 and then we have a submit Handler which
01:22:14.159 we can call const we can rename it to
01:22:17.040 handle submit which will be of a type
01:22:20.840 submit
01:22:22.159 Handler that accepts the type t
01:22:25.480 and it'll be equal to a callback
01:22:27.520 function that is asynchronous and simply
01:22:30.639 takes in the data so I will rename these
01:22:33.159 values in the type to data and just make
01:22:36.120 it look like this so now we have a clean
01:22:38.000 slate to work with which will work for
01:22:40.040 both forms of course we have to define
01:22:42.320 the props so let's do that right now
01:22:44.800 interface props will take in that t that
01:22:47.920 extends the field values which are
01:22:50.440 coming from react hook form and it'll
01:22:52.400 have a schema of a type Zod
01:22:55.000 type which will take in that generic T
01:22:58.360 parameter the default values which will
01:23:01.280 be of a type T so I think now we can
01:23:03.719 understand what the t is T is actually
01:23:05.920 the default values that we're passing
01:23:07.600 into the function and this Zod type also
01:23:11.120 has to be
01:23:12.480 imported from Zod onsubmit will be equal
01:23:15.960 to a callback function where we get the
01:23:17.760 data of a type T which returns a promise
01:23:21.199 that will result in a success Boolean as
01:23:25.040 well as a potential error which is
01:23:27.120 optional of a type string if it fails
01:23:29.960 and finally a type which will be either
01:23:33.360 signore in or signore up so now we're
01:23:37.920 setting our form up for Success because
01:23:40.719 we're telling it that it can be one of
01:23:42.239 those two types and we're defining all
01:23:44.199 of the props we're passing into it to
01:23:45.880 make it reusable without any problems
01:23:48.679 these props will have to accept the
01:23:50.560 dynamic T generic parameter and when we
01:23:54.159 Define find the odd form we also have to
01:23:55.920 specify it here that t extends field
01:24:01.159 values it should be done like this so
01:24:03.800 now prettyer nicely put this into
01:24:05.400 multiple lines so it's easier to
01:24:07.040 understand we first have this interface
01:24:09.360 where we Define the types of props that
01:24:11.840 we accept into these function and saying
01:24:14.320 that we're also passing a t generic
01:24:16.520 parameter that extends the field values
01:24:19.560 we have a schema default values onsubmit
01:24:22.120 and type submit and then we Define it
01:24:25.800 and now if you hover over each one of
01:24:27.560 these things you know exactly what it is
01:24:29.840 not only that you know what it is type
01:24:32.480 script as well as Zod and react hook
01:24:34.600 form and everyone knows what each one of
01:24:36.880 these things are which will make her
01:24:38.520 debugging and turning this form to be
01:24:40.400 reusable super simple let's move over to
01:24:43.000 the Second Step which is to build out
01:24:44.920 our form by importing the necessary
01:24:47.719 components for it such as the input and
01:24:49.920 the button we can do that right here at
01:24:52.639 the top and then we can use use it
01:24:54.800 within the form right here by copying
01:24:56.920 the form and putting it as the return
01:25:00.480 statement that should look something
01:25:02.679 like this if we save this we're done and
01:25:06.000 we should have something that looks like
01:25:07.320 this but instead we have something that
01:25:09.679 looks more like this don't worry it's
01:25:11.880 just an error saying that we haven't yet
01:25:13.440 installed the input component from
01:25:15.119 shaten so let's do that by saying MPX
01:25:18.600 shaten add input you can see how simple
01:25:21.800 it is now you don't even have to visit
01:25:23.520 the docs you just say the component name
01:25:26.040 and you add it there we go the input got
01:25:28.400 added but we got another error this one
01:25:31.679 is saying that only plain objects and a
01:25:33.719 few built-ins can be passed to client
01:25:36.000 components from server components but if
01:25:38.040 you check out some of our Pages like the
01:25:39.800 signin page we're actually passing some
01:25:42.239 more complicated objects as well as
01:25:44.679 functions so that is not allowed which
01:25:47.119 means that we'll have to turn these two
01:25:48.800 components into use client components as
01:25:51.080 well so just add the use client
01:25:53.400 directive to the top of the sign in page
01:25:56.159 as well as to the top of the sign up
01:25:58.080 page so let's head over there and let's
01:26:00.719 add the used
01:26:03.159 client when you do that you'll notice
01:26:05.440 that it will no longer complain and
01:26:07.119 we'll be able to see our very simple
01:26:09.440 form right now so now let's implement
01:26:11.960 the rest of the form now that we have
01:26:13.760 the structure and the skeleton for what
01:26:15.800 this form will become we can head to the
01:26:17.840 form and add some information that goes
01:26:20.080 around the form letting us know whether
01:26:22.000 we're on the signin or signup form now
01:26:24.920 you will start seeing how reusable it
01:26:26.920 can get I'll do that by first wrapping
01:26:29.239 this form in a div and then I'll pull it
01:26:32.119 within that div next let's give that div
01:26:35.440 a class
01:26:37.280 name equal to flex Flex Dash call and a
01:26:41.560 gap of four and then within it create a
01:26:43.600 new
01:26:44.400 H1 that'll have a class name equal to
01:26:47.920 text- 2XL font D semi bold and text-
01:26:53.040 white and and within it we can check if
01:26:56.280 is sign in is true which is one of the
01:26:59.080 props for passing in that case we can
01:27:01.600 say welcome back to bookwise but if it's
01:27:05.800 not sign in we can say create your
01:27:10.600 library account something like that and
01:27:13.480 of course this is sign in is actually a
01:27:15.600 new field which we can create based on
01:27:18.000 the prop of the type so right here at
01:27:20.920 the top I can say something like const
01:27:25.560 is sign in and that'll be true if the
01:27:28.600 type is triple equal to sign in so now
01:27:32.239 it says create your library account and
01:27:34.400 of course on signin it'll say something
01:27:36.719 else we can do another piece of text
01:27:39.199 below this AG one may be a P
01:27:42.520 tag with a class name equal to text-
01:27:47.119 light 100 and there we can say if is
01:27:51.960 sign in then we can render a piece of
01:27:55.280 text of well let's try to find it from
01:27:58.159 the design something like let's see
01:28:01.280 access the vast collection of resources
01:28:03.840 and stay updated and then if it's create
01:28:07.000 we can do something like please complete
01:28:08.719 all fields and upload a valid University
01:28:11.159 ID to gain access to the library there
01:28:13.960 we go so now if I get back you can see
01:28:16.360 both the heading and the subheading
01:28:17.960 right here we can do something similar
01:28:20.000 below the form okay so here we have the
01:28:22.560 form and then below
01:28:25.040 we can have a P tag with a class name
01:28:28.600 equal to text- Center
01:28:31.280 text-base and font Das medium where we
01:28:34.119 can check if is sign in in that case we
01:28:36.719 can say something like new to bookwise
01:28:39.239 else we'll say already have an account
01:28:41.760 we can also render a link that'll say a
01:28:44.280 similar thing if is sign in it'll say
01:28:47.560 create an account else it'll say sign in
01:28:50.480 and of course we have to give this href
01:28:52.280 a link so that'll be something something
01:28:54.360 like this if is sign in then we can
01:28:57.560 point it to for/
01:29:00.360 signup else we'll point it to slash sign
01:29:04.320 in and of course make sure to import the
01:29:06.480 link from next link let's also give a
01:29:08.840 class name to this link equal to font
01:29:11.239 Das bold and text- primary and let's put
01:29:14.119 a space after both of these two texts so
01:29:17.000 we can nicely see them so currently we
01:29:19.480 are on the Creator account and it's
01:29:21.600 saying if you already have an account
01:29:23.639 head over to to sign in and if we're
01:29:26.080 welcome back to bookwise if you're new
01:29:28.480 create an account and now we have linked
01:29:30.880 in between those two forms which share
01:29:33.119 the same layout as you can see but later
01:29:35.639 on based on these we can change the
01:29:37.560 inner content of the form so with that
01:29:39.800 in mind let's create those different
01:29:41.400 form Fields first we have a form where
01:29:43.840 we call a handle submit and then we can
01:29:46.080 pass in a handle submit because we
01:29:48.360 rename that function we can give it a
01:29:51.400 space- y of six as well as a w fo so it
01:29:56.000 takes more space and then this is super
01:29:58.040 interesting we will make this so
01:29:59.920 reusable that you will actually doubt
01:30:02.199 the way it's working let me show you
01:30:04.600 instead of just manually duplicating
01:30:06.480 different form Fields like this which
01:30:08.280 would leave us with having hundreds of
01:30:09.800 lines of code and then on top of that
01:30:12.080 you would also have to add checks like
01:30:14.119 if is sign up then actually include this
01:30:17.480 form and so on no we won't do that we
01:30:20.800 will simply utilize the fields that we
01:30:23.040 have above the default values So based
01:30:26.360 on those default values we can show
01:30:28.639 different form Fields I will first wrap
01:30:31.679 everything in a dynamic block of code
01:30:34.360 and then say object. keys of default
01:30:37.480 values so I just want to grab their
01:30:39.239 names and the map over them where I'm
01:30:41.840 going to get each individual field and
01:30:44.159 for each field I want to return a what
01:30:48.199 well a form field so now I will put this
01:30:51.360 a bit up within the map
01:30:54.560 function and you can see this
01:30:56.239 immediately created as many fields as
01:30:58.920 many we have added in our validation so
01:31:01.360 if you head over to validations dots you
01:31:04.239 can see that for the sign up we have 1 2
01:31:06.480 3 4 5 and here we have just two so if
01:31:09.159 you switch over between them you can see
01:31:10.840 that's already working but definitely
01:31:13.320 not all of them are just supposed to say
01:31:15.040 username right so let's now make them
01:31:17.679 unique first we need to pass a key to
01:31:20.320 each one of these because we're mapping
01:31:21.840 over them and the key will be fielded
01:31:25.119 the name will be equal to field and just
01:31:28.679 to make typescript happy we can say as
01:31:31.600 path of T and then we are rendering that
01:31:34.159 field where we have a form item we have
01:31:36.920 a form label to which I'll pass a class
01:31:39.719 name of capitalize and I will select the
01:31:42.520 right form field by accessing the field
01:31:46.119 names coming from index.ts of constants
01:31:50.159 and then we'll get a field name for that
01:31:52.520 specific field by saying field. name and
01:31:55.440 that'll look something like this now we
01:31:57.119 can see that it says email password Here
01:31:59.760 We have nothing for some reason
01:32:01.280 University ID number and upload
01:32:03.360 University ID card so it's pulling them
01:32:06.080 from our constants where we have defined
01:32:08.679 what each one of these fields should say
01:32:10.800 and make sure to rename full name to use
01:32:13.040 camel case there we go you can do the
01:32:15.159 same thing for the field types below now
01:32:17.520 just to make tab script safe one more
01:32:19.239 time we can say field name will be as
01:32:23.360 key off type off
01:32:27.280 field names like this so basically with
01:32:30.880 all of this what we're doing is we're
01:32:32.320 saying that these form labels will
01:32:34.800 belong to one of these things right here
01:32:37.000 after the label we have the form control
01:32:39.320 and here we can choose whether we want
01:32:40.679 to display it as an input or as
01:32:42.639 something else most of them will be
01:32:44.360 inputs besides for the University card
01:32:47.119 which will be an image upload so that'll
01:32:49.080 be a new component which we have to
01:32:50.639 create so let's create it in the
01:32:52.239 components folder I'll call it
01:32:54.719 image upload. TSX run
01:32:59.600 rafc and now back in the odd form we can
01:33:02.880 check if field. name is triple equal to
01:33:07.840 University card in that case we want to
01:33:11.239 render the image upload component else
01:33:16.119 we want to render a regular input
01:33:18.320 component so that'll look something like
01:33:20.719 this and of course this was supposed to
01:33:22.719 be a string we're checking for the field
01:33:24.760 name of University card so now you can
01:33:27.920 see that everything is the same but here
01:33:30.080 it says upload University card that'll
01:33:32.080 be an image upload which we'll Implement
01:33:34.239 soon let's also style our input to make
01:33:37.159 it required and we can also remove the
01:33:40.679 placeholder and instead give it a type
01:33:44.239 which will be equal to this part right
01:33:46.600 here where we are mapping over the field
01:33:49.119 names so I will copy that and paste it
01:33:52.199 here but instead of of mapping over the
01:33:54.480 field names we'll map over the field
01:33:57.400 types like this and then say field. name
01:34:00.920 as key off field types right here and of
01:34:04.000 course we have to import the field types
01:34:05.920 coming from constants those are these
01:34:08.480 right here which tell us should they be
01:34:09.920 text email number or password if we
01:34:12.719 structure it properly it should look
01:34:14.239 something like this and then we spread
01:34:16.040 all of the other field properties and
01:34:18.480 render the class name equal to form
01:34:22.719 input and that'll make them look just a
01:34:25.360 tiny bit nicer like
01:34:27.679 this and now check this out this one
01:34:30.159 immediately knows that it is an email
01:34:31.800 field this one will hide it because it's
01:34:34.040 a password this one provides me with the
01:34:36.400 number information because it's a number
01:34:38.280 and this one is just a string and if we
01:34:40.560 switch over to signin you can see that
01:34:42.520 it only has the email and password and
01:34:45.119 we did all of this by just rendering a
01:34:47.920 single form field which is then being
01:34:49.880 created for each one of the mapped
01:34:52.080 default values pretty cool
01:34:54.320 right and finally we have the form
01:34:56.760 description which I believe we can
01:34:58.719 remove we already have enough
01:35:00.440 information right here we render the
01:35:02.400 form message and then we can go here
01:35:04.360 below the form to display a button of a
01:35:07.040 type submit a class name equal to form
01:35:11.760 BTN and we can say something like if is
01:35:14.920 sign in then we can say let's do sign
01:35:19.960 in else we'll do something like sign up
01:35:24.360 there we go so now this is looking like
01:35:26.480 a real form finally right there we go
01:35:30.440 and with that the UI of the form is now
01:35:33.119 more or less
01:35:34.719 complete the only thing we have to do is
01:35:37.360 implement the upload image for the
01:35:39.480 University card which we'll do soon but
01:35:42.000 for now you can see most of the general
01:35:43.560 Fields have been completed we can also
01:35:45.639 check it out on desktop devices in my
01:35:47.960 opinion this is looking much much better
01:35:49.880 it's looking like a real professional
01:35:51.679 slick form where users can sign in in
01:35:53.960 with complete validation as well as sign
01:35:56.639 up this path right here right now has a
01:35:59.440 red squiggly line so we can actually
01:36:01.679 import it from react hook form so let's
01:36:04.400 do that there we go so now we're good we
01:36:06.840 no longer have any errors and I mean
01:36:09.159 just look at how clean this form is
01:36:12.040 we're defining it to be fully reusable
01:36:14.480 we Define what the default values are
01:36:17.040 what the submit function is and then we
01:36:19.040 specify how it should be rendered so
01:36:21.119 with that in mind we are now ready to
01:36:23.119 start setting up the back end of our
01:36:24.800 application including the database and
01:36:27.560 more so we can actually fill in the
01:36:29.719 information of this form and then submit
01:36:32.440 it through the handle submit function
01:36:34.320 and create a record in our database
01:36:36.440 which will of course be our user so
01:36:38.840 let's do that next great work on
01:36:41.119 completing the odd
01:36:43.760 form just before we can create users
01:36:46.159 iner database we need to deal with the
01:36:48.199 last piece of UI and logic to be able to
01:36:50.920 submit the signup form and that is the
01:36:52.840 ability to upload the University ID card
01:36:55.480 image and to make that happen we'll use
01:36:57.800 image kit actually we'll use image kit
01:37:00.280 for all of the image and video handling
01:37:02.679 in our entire application as it'll
01:37:04.800 always remain completely free and give
01:37:06.920 you 5 GB of free storage with 25 GB of
01:37:10.800 media delivery bandwidth and not only
01:37:13.119 that you'll also get a ton of image and
01:37:15.679 video processing features from
01:37:17.719 Transformations AI Generations
01:37:20.880 optimizations streaming features and
01:37:23.080 more of all the image upload services
01:37:25.600 that I've used I found this one to be
01:37:27.639 the best both in terms of features that
01:37:29.679 it has to offer as well as the amount of
01:37:31.880 free stuff that they provide so click
01:37:33.800 the link down in the description to be
01:37:35.440 able to follow along and see exactly
01:37:37.400 what I'm seeing and create a new account
01:37:39.920 I'll sign up with Google then you'll get
01:37:42.159 redirected to the onboarding so you can
01:37:44.480 select your position and choose what's
01:37:46.560 your main objective in this course I'll
01:37:48.639 teach you how to use image kit to
01:37:50.520 optimize and transfer your images as
01:37:53.239 well well as videos as well as create
01:37:55.400 some personalized media assets and
01:37:57.320 overlays how to manage your content and
01:38:00.040 how to use apis to uploaded in more so
01:38:02.760 we'll cover all of it finally you'll get
01:38:05.000 your image kit ID in this case you can
01:38:07.320 do something like JS Mastery and then
01:38:09.599 you can put your name after it like
01:38:11.679 Adrien and you can choose the region
01:38:13.360 that is closest to you and click submit
01:38:15.520 after that you'll get redirected to
01:38:17.719 image kids dashboard you can hide the
01:38:19.480 checklist as I'll show you how to do
01:38:21.000 everything first head over to developer
01:38:23.159 options
01:38:24.080 and now we'll have to extract the keys
01:38:26.000 for everything we need let's get the URL
01:38:28.360 endpoint and then head back over to your
01:38:30.280 code and let's put those in our
01:38:32.119 environment variables by creating a new
01:38:34.920 file called env.
01:38:37.960 local and let's call it
01:38:41.320 nextore Public uncore Image kit uncore
01:38:45.400 URL uncore endpoint and make that equal
01:38:48.480 to the endpoint that we just copied
01:38:51.159 after that we can get our public key so
01:38:53.440 so we can put that as next Public Image
01:38:56.800 kit public key and finally we'll also
01:39:00.239 need our private key so copy it from
01:39:02.719 here and first you must set a password
01:39:04.760 to do that so once you add a password
01:39:07.040 head back over here you'll have to
01:39:09.080 reenter that password and then you'll be
01:39:11.400 able to copy that key head back to your
01:39:14.480 envs and just say image kit private key
01:39:19.239 and for this one you won't add the
01:39:21.080 nextore public because this one will be
01:39:23.400 used only on the server side now since
01:39:25.480 there will be many envs we'll be using
01:39:27.639 and their names are pretty long let's go
01:39:29.639 ahead and create a new file called
01:39:31.400 config within the lib folder so that's a
01:39:34.159 new
01:39:35.599 config dots
01:39:38.280 file and within it we can create a new
01:39:41.440 config
01:39:42.840 object that'll have the EnV object
01:39:45.480 within it that will then have the imag
01:39:47.639 kit object and here we can keep track of
01:39:50.560 all of those envs such as a public key
01:39:54.159 which will be equal to process. EnV do
01:39:58.040 nextore Public Image kit undoru key you
01:40:04.000 get the idea right and now we can add
01:40:06.040 the other two as well so I'll simply
01:40:07.880 copy their names so that'll be URL
01:40:11.560 endpoint is
01:40:13.800 process. env. nexu image kit URL
01:40:17.199 endpoint and finally we'll have the
01:40:19.159 private key as well so let's define it
01:40:22.280 as private key which is process. env.
01:40:26.040 imagit private key and now we can export
01:40:29.800 default. configuration so it's easier
01:40:32.480 for us to get access to these
01:40:33.880 environment variables later on great now
01:40:36.639 that we have those envs from the
01:40:38.040 dashboard we'll have to head over to
01:40:40.000 image kits documentation specifically on
01:40:42.239 the next GS installation part so let's
01:40:45.000 scroll through the steps first things
01:40:47.040 first we have to set up image kit next
01:40:48.840 gssd K so we can skip the steps where
01:40:51.320 we're creating the app and we can head
01:40:53.440 over straight to the installation of the
01:40:55.400 package npm install image kit IO next
01:40:58.679 I'll do that in our second terminal and
01:41:00.520 it's telling you here that we need to
01:41:01.760 get a couple of envs which we have
01:41:03.520 already set up after that it's telling
01:41:05.639 us a bit about different components that
01:41:07.360 we can use such as the image kit image
01:41:11.520 which utilizes the next image and
01:41:13.119 renders an image tag and others so let's
01:41:16.159 go ahead and import a few of these into
01:41:17.960 one of our components so I'll copy
01:41:21.080 this and we'll move over to a new file
01:41:26.080 which is going to be under components
01:41:27.679 image upload and I will paste those
01:41:30.760 Imports right here we won't need all of
01:41:33.119 them right now we'll just need the image
01:41:35.280 kit image the image kit provider and the
01:41:37.800 image kit upload and these are of course
01:41:40.199 client side components so we'll have to
01:41:42.639 turn the use client directive on right
01:41:45.080 here at the top next we need to
01:41:46.880 configure the app for image kit we'll
01:41:49.080 have to do some styling and then render
01:41:50.840 the images this is all looking great I
01:41:53.480 think the documentation is very detailed
01:41:55.520 but I'll teach you how to do that from
01:41:57.239 scratch so let's go ahead and do it
01:41:59.480 together first things first we'll create
01:42:01.360 an additional function which will
01:42:02.960 authenticate us to be able to upload
01:42:05.119 images securely I can do that by saying
01:42:08.199 const authenticator is equal to an async
01:42:11.239 function here we can open up a try and
01:42:14.119 catch block where we get the error if
01:42:16.880 there is an error we're going to Simply
01:42:18.480 throw it by saying throw new error and
01:42:21.480 then we can say something like authentic
01:42:24.239 ation request failed and then at the end
01:42:27.800 we can render the actual message in a
01:42:30.199 template string and rendering the error.
01:42:33.520 message this error for now can be of a
01:42:36.080 type any as we don't yet know how it
01:42:37.960 looks like now in the tri block we can
01:42:40.280 try to authenticate our users by making
01:42:42.800 a request to a function which will
01:42:44.840 execute on the server side so let's say
01:42:47.320 const response is equal to await Fetch
01:42:52.800 and now we have to make a fetch request
01:42:54.560 to a specific domain name first of all
01:42:57.360 I'll head over to our
01:42:59.440 envs and I'll add an additional
01:43:01.800 environment variable called nextore
01:43:04.679 public undor API uncore endpoint we'll
01:43:08.840 change this later on in production but
01:43:10.800 for now it can be HTTP
01:43:14.040 Colin localhost 3000 and we can also add
01:43:18.000 it to our config so head over to config
01:43:21.199 and do it right here above image kit so
01:43:24.239 that'll be API endpoint and it'll be
01:43:26.639 equal to process. env. nextore public _
01:43:32.440 API uncore endpoint and also typescript
01:43:35.599 might not know whether we have
01:43:37.000 successfully provided these environment
01:43:38.560 variables but we do know that so I
01:43:40.880 believe if we add an exclamation mark at
01:43:42.760 the end it'll actually consider it as
01:43:44.800 given that there will be a string for
01:43:46.679 each one of these enbs so now let's head
01:43:49.360 back over to here and let's make a
01:43:51.239 request to a dynamic route of config
01:43:54.480 coming from lib
01:43:57.199 config
01:43:59.480 env. API
01:44:02.239 endpoint then we can do a forward slash
01:44:05.480 API SLO and slash image kit then we can
01:44:10.159 check if not response. okay we can
01:44:13.639 simply open up a new block and get
01:44:16.080 access to the error text by making it
01:44:19.000 equal to a wait response. text and then
01:44:22.560 we can throw a new error where we can
01:44:24.880 say something like request failed with
01:44:29.960 status and then we can just render the
01:44:32.320 response Das status and after that we
01:44:34.679 can render the error text perfect
01:44:38.040 outside of the if if everything goes
01:44:40.000 right we can get access to the data by
01:44:42.800 saying data is equal to await response.
01:44:46.280 Json so what is our server returning to
01:44:48.199 us and then we can destructure some of
01:44:50.000 the things from the data such as the
01:44:52.320 signature the expiration which is expire
01:44:55.400 and then the token and these will come
01:44:58.239 from the data object and finally we can
01:45:00.679 return an object consisting of just
01:45:02.880 these three properties that'll be token
01:45:06.040 expire and signature so now how can we
01:45:08.719 create this function that will actually
01:45:10.480 authenticate us well it is super simple
01:45:13.400 we just have to create this route by
01:45:15.280 heading over to app create a new folder
01:45:18.159 called API within API create another
01:45:21.320 folder called o
01:45:24.719 within o create yet another folder
01:45:27.560 called image
01:45:29.239 kit and within image kit create a new
01:45:32.560 route. DS within it we can say const
01:45:35.840 image kit is equal to new instance of
01:45:39.040 image kit which is coming just from
01:45:41.560 image kit so that means that we have to
01:45:43.320 install this as well because so far we
01:45:45.280 have just installed the next GSS DK so
01:45:47.599 let me just run mpm install image kit on
01:45:50.320 its own as well and then we can pass
01:45:52.080 some configuration op options such as
01:45:54.440 the public key and now we can very
01:45:56.280 easily get access to this public key
01:45:58.760 since we created the config object
01:46:00.560 coming from lib config env. imagit dopu
01:46:06.320 key like so we can repeat that for
01:46:09.320 private key so I'll just rename it here
01:46:11.880 and here to private key and finally we
01:46:15.440 need to do the same thing for the URL
01:46:17.800 endpoint so I'll just do it here URL
01:46:21.520 endpoint perfect
01:46:24.000 now there is some code duplication here
01:46:26.239 so if you want to destructure these
01:46:28.000 fields you can you can do that by saying
01:46:30.520 cons destructure the environment
01:46:32.760 variable key and then from it
01:46:35.040 destructure image kit and then from it
01:46:37.760 destructure these three keys so now we
01:46:40.360 have kind of fully destructured that
01:46:42.040 config object and now we can just use
01:46:44.639 the variables themselves like so and if
01:46:47.719 you have both the key and the value of
01:46:49.320 the same name that means that you can
01:46:51.119 just Omid the ladder and and it'll
01:46:53.440 actually look just like this either way
01:46:56.440 is totally fine once we create a new
01:46:58.440 instance of image kit we can create a
01:47:00.639 function that we're calling by saying
01:47:03.320 export async function get yep it is that
01:47:06.520 easy to create backend API routes in
01:47:08.560 next GS so let's return next
01:47:12.320 responsejson and then pass over the
01:47:15.040 image kit dot get authentication
01:47:18.560 parameters and believe it or not that's
01:47:20.800 it we have to add this to our server
01:47:23.360 and it will return all the information
01:47:25.159 we need to authenticate so now we can
01:47:27.679 head back over to our image
01:47:30.080 upload and we can call this
01:47:32.080 authenticator within our image upload
01:47:34.280 component pretty straightforward right
01:47:36.560 but now let's see how we can use some of
01:47:38.320 these image kit next GSS DEC components
01:47:41.119 I'll first wrap everything into an image
01:47:44.159 kit provider to which we have to feed
01:47:47.119 all of this information such as the
01:47:49.080 public key equal to and now once again
01:47:51.920 we need to get access to the same
01:47:53.760 configuration options so we can just
01:47:55.880 head over to our route and we can
01:47:58.639 actually extract all of these because
01:48:00.239 we'll have to reuse them again so I'll
01:48:02.280 paste them right here at the top so the
01:48:03.960 public key will be equal to public key
01:48:06.320 next we have the URL endpoint equal to
01:48:09.159 you can guess it URL endpoint and
01:48:11.400 finally we have the authenticator this
01:48:13.520 time equal to authenticator which is the
01:48:16.520 actual function that calls our backend
01:48:18.480 to authenticate our user in this case we
01:48:20.560 must not get access to the private key
01:48:23.480 because this private key is available
01:48:25.320 only on the server side and we'll
01:48:27.119 actually get an error if we try to call
01:48:28.800 it right here on the client side and we
01:48:30.639 also don't need to initialize the image
01:48:32.320 kit right here as we're initializing it
01:48:34.639 in that server action where we
01:48:35.840 authenticate perfect so now we're
01:48:38.440 wrapping everything with the image kit
01:48:40.679 provider and within it we can render the
01:48:43.560 image kit upload component that allows
01:48:45.840 us to handle image upload I'll render it
01:48:48.119 like so i k upload it'll be a closing
01:48:53.280 component and to it we need to pass a
01:48:55.520 ref so let's declare that reference
01:48:57.639 right here at the top by saying cons ik
01:49:01.239 upload ref is equal to use ref this is
01:49:05.239 of course coming from react and at the
01:49:07.199 start it'll be equal to null later on
01:49:09.320 we'll also have to have a state that'll
01:49:11.080 help us keep track of the file we're
01:49:12.760 uploading so let's create it immediately
01:49:15.199 by creating a new use State snippet I'll
01:49:18.920 call it file and set file at the start
01:49:22.760 equal to null we can also Define the
01:49:26.320 type of that state right here by saying
01:49:29.880 that it'll have access to a file path of
01:49:32.639 a type string or the entire thing will
01:49:35.480 just be null at the start this is just
01:49:37.159 to help typescript make sense of what it
01:49:38.840 is and you can already see this choose
01:49:41.040 file upload right below for the time
01:49:43.199 being I will actually provide a class
01:49:45.560 name of hidden to this upload because it
01:49:49.000 doesn't look best let's be honest so for
01:49:52.199 that reason I'll provide it a ref of ik
01:49:55.440 upload ref which will allow us to then
01:49:57.840 render a nicer version of that same
01:50:00.000 component very soon it also needs two
01:50:02.159 additional things which are going to be
01:50:04.199 handlers for error and success so I'll
01:50:07.040 say const on
01:50:09.000 error will be equal to just an empty
01:50:12.000 callback function for
01:50:13.480 now and we need to do the same thing for
01:50:16.360 on success so I'll just create it and
01:50:19.560 rename it perfect and we can now pass
01:50:21.840 them to this component by saying on
01:50:24.400 error is equal to on error and on
01:50:28.920 success is equal to on success finally
01:50:33.159 we can also pass the file name and we
01:50:35.880 can say something like test upload. PNG
01:50:38.800 at least for now later on we can change
01:50:40.560 that dynamically now given that we're
01:50:42.599 providing that reference we can actually
01:50:44.840 trigger the click on this upload but
01:50:47.119 when a bit of a nicer looking component
01:50:48.920 gets clicked that we can style properly
01:50:51.480 so let's actually run the under a button
01:50:54.280 and this button will have a class name
01:50:57.920 equal to upload D
01:51:00.599 BTN there we go it's looking similar to
01:51:03.159 all of the other inputs within it we can
01:51:06.000 render an image coming from next image
01:51:09.880 with a source of Slash ions SL upload.
01:51:14.719 SVG with an Al tag of upload
01:51:18.840 icon with a width of about 20 a height
01:51:23.440 of about 20 and a class name equal to
01:51:27.320 object D contain so now we have a little
01:51:29.800 upload icon and below it we can render a
01:51:33.040 P tag that will say upload a
01:51:36.440 file and we can style it a bit by giving
01:51:39.280 it a class name of
01:51:41.920 text-base and text- light 100 and right
01:51:45.920 below it if we have successfully
01:51:47.920 uploaded a file so if file exists then
01:51:51.199 we can render a p tag with a class name
01:51:55.079 equal to upload Das file name and within
01:51:58.119 it we can render the file do file path
01:52:01.760 for now we of course cannot see it but
01:52:03.520 if it's there it would appear right here
01:52:05.520 finally once it gets uploaded if it's
01:52:07.800 there we can show it to the user by
01:52:09.639 saying if file exists then render the
01:52:13.920 ik image component this is actually a
01:52:17.119 wrapper around the nextjs as image
01:52:19.239 component so you can have all of the
01:52:21.000 buil-in nextjs features as well as well
01:52:22.880 it can accept things like the alt tag as
01:52:25.079 all images do which can be equal to
01:52:27.560 file. file path it can accept the path
01:52:30.560 to the image equal to file. file path
01:52:33.079 and a width of 500 as well as the height
01:52:36.119 of 500 as well now of course we cannot
01:52:39.119 see it yet because we haven't uploaded
01:52:40.920 anything but later on we should be able
01:52:43.000 to see the uploaded file so let me try
01:52:45.480 to fill out this form by first filling
01:52:47.520 in my email I'll do some password as
01:52:49.679 well let's enter a full name we can
01:52:52.599 enter some kind of a University ID and
01:52:54.679 then you can upload a file and then we
01:52:56.679 can upload a file by providing an
01:52:58.599 onclick function to this button I'll say
01:53:01.320 onclick is equal to a callback function
01:53:03.719 where we get access to the click event I
01:53:06.199 will run the e. prevent default to
01:53:08.880 prevent the default behavior of the
01:53:10.280 browser to reload on click and onclick
01:53:13.599 I'll call the ik upload component to
01:53:15.920 upload images by saying if ik upload ref
01:53:20.320 exists or that current so if it has some
01:53:22.560 kind of value in that case we can simply
01:53:25.639 call ik upload ref.
01:53:29.280 current question mark dot click so it's
01:53:32.480 like we're clicking this above component
01:53:34.320 right here but rather we're clicking a
01:53:36.000 bit of a nicer looking button I think
01:53:37.920 there's a typescript issue right here
01:53:39.520 saying that click does not exist on type
01:53:41.320 never for the time being I think we can
01:53:43.119 just suppress this by using the DS
01:53:44.960 ignore on the line above so now if you
01:53:47.400 click right here to upload a file your
01:53:49.480 users will be able to find their
01:53:51.000 University ID and double click to upload
01:53:54.119 it currently we're not seeing anything
01:53:56.239 happen because once we click and start
01:53:58.280 uploading the file now is the time to
01:54:00.719 handle our on success and on error
01:54:03.119 functionalities so let's do on success
01:54:05.520 first we get a response of a type any
01:54:08.560 and we can set file to be equal to the
01:54:10.960 response that we're getting and we'll
01:54:12.639 have to also modify the form values so
01:54:15.840 we have to head back over to OD form and
01:54:19.119 to this image upload component right
01:54:21.679 here provide a prop of
01:54:25.280 on file change is equal to field.on
01:54:30.400 change in a similar way how we're
01:54:32.320 changing these input fields we also have
01:54:34.199 to change the image upload field so now
01:54:36.840 we can get into it these structure it
01:54:38.840 from props by getting the on file
01:54:41.599 change and let typescript know that on
01:54:44.760 file change is of a type callback
01:54:47.360 function that accepts a file path of a
01:54:50.040 type string and returns void means
01:54:53.800 nothing so now on success on top of
01:54:57.000 setting the current state of the file we
01:54:59.040 can also set the on file change and set
01:55:02.560 it to rest that file path and on error
01:55:05.040 we can simply consol log that error by
01:55:07.679 saying conso log we're going to get the
01:55:10.560 error right here of a type any and we
01:55:13.960 can just conso log it now of course
01:55:16.440 users are not going to really notice
01:55:17.920 those conso logs so it might be good to
01:55:19.800 give them some kind of feedback on the
01:55:21.119 screen like some kind of a toast at the
01:55:22.920 bottom right so with that in mind we can
01:55:24.840 quickly set up chatsi and toast
01:55:26.400 component like this little popup that
01:55:28.440 can appear by installing the chatsi and
01:55:31.760 toast I'll add it right into the
01:55:33.520 terminal say use Force sure go ahead and
01:55:37.719 now we have to add that toaster
01:55:39.520 component to our main layout so let's
01:55:42.520 just copy its import that'll be under
01:55:44.679 our first
01:55:46.440 layout we can import it right here at
01:55:49.320 the top and then we can add it right
01:55:51.719 here I I think they do it below the main
01:55:54.079 within the body so that's below HTML but
01:55:56.960 within the body
01:55:58.960 toaster perfect and now how do we use it
01:56:02.639 well we just say use toast coming from
01:56:04.400 hooks use toast and then we call it like
01:56:07.239 this so let's do that by heading over to
01:56:09.599 our image upload on success we'll do
01:56:12.360 something like this Toast of course we
01:56:14.920 have to import it right at the top so we
01:56:17.040 can do that toast coming from hooks use
01:56:19.639 toast and we won't say scheduled catch
01:56:22.040 up rather we'll say something like image
01:56:24.880 uploaded successfully and for the
01:56:26.960 description we can say something like
01:56:29.199 let's do Dynamic and then say rest. file
01:56:32.760 path uploaded perfect I can also
01:56:36.760 duplicate this and add it on error so if
01:56:39.520 something goes wrong we can say image
01:56:42.000 upload failed your image could not be
01:56:47.560 uploaded please try again and the
01:56:50.400 variant will be set to the instructive
01:56:53.199 perfect let's go ahead and give it a
01:56:54.800 shot I'll try to upload a new file I'll
01:56:57.760 choose my University ID and it
01:56:59.760 immediately appears right here at the
01:57:01.760 bottom I think a driver's license should
01:57:03.960 be fine with that in mind we have very
01:57:06.119 easily integrated image kits image
01:57:08.320 upload as well as image display
01:57:10.239 properties now if you experienced an
01:57:12.079 error while trying to show this image
01:57:14.079 you might need to head over to next.
01:57:21.159 config.sys another host name so that'll
01:57:23.840 be protocol
01:57:25.119 https and in this case the images will
01:57:28.440 be coming from ik image kit. imagekit
01:57:31.880 doio and we can leave the port as empty
01:57:35.400 perfect and with that in mind our form
01:57:37.880 has now successfully been completed not
01:57:40.400 only can we import all of the
01:57:41.920 information like here like the email
01:57:44.040 password and more all of it is of course
01:57:46.440 fully validated we can switch to
01:57:48.840 different types of forms and we can
01:57:50.360 upload our University ID card
01:57:52.719 since most IDs have more width than they
01:57:54.920 do height you can lower the height to
01:57:56.599 about 300 so it looks better and then we
01:57:59.159 can successfully upload and see the IDS
01:58:02.239 before we go ahead and create our
01:58:03.719 database and finally create our users
01:58:05.960 within that database I want to show you
01:58:07.960 how we can further optimize our images
01:58:10.440 by heading over to our image kit
01:58:11.960 dashboard head over to settings and
01:58:14.560 under images you can see many different
01:58:16.840 optimizations many of which have been
01:58:18.920 pre-selected by default use the best
01:58:21.320 format for image image delivery so it
01:58:23.639 automatically selects it based on the
01:58:25.320 image optimize image quality before
01:58:27.760 delivery changes the image quality to
01:58:29.920 reduce the image size without any visual
01:58:32.040 difference you can leave it at about 80
01:58:34.520 or you can decrease it much more and we
01:58:37.000 can also do similar things with video as
01:58:39.639 well as create different Transformations
01:58:41.480 I'll show you how to use most of these
01:58:43.199 later on with that in mind great work on
01:58:46.440 completing the UI of the odd form in the
01:58:48.840 next few lessons we'll focus on creating
01:58:51.040 our own database and finally we'll
01:58:53.400 connect the
01:58:56.040 two this is the exciting part of the
01:58:58.480 course let's create our serverless
01:59:00.920 postgress database click the neon link
01:59:03.159 down in the description to be able to
01:59:04.920 follow along and see exactly what I'm
01:59:06.840 seeing and go ahead and create a new
01:59:09.280 account you can use whatever either
01:59:11.320 Google or GitHub is totally fine in this
01:59:13.679 case I'll proceed with Google and
01:59:15.560 immediately you'll be redirected to the
01:59:17.480 on boarding where you can get started
01:59:19.239 with neon for free you can start by
01:59:20.840 choosing your project name
01:59:22.679 start with JSM uncore and then we can do
01:59:26.520 university- library or feel free to
01:59:28.920 choose your own name after that you can
01:59:30.560 choose the database name as well I'll
01:59:32.480 call it simply library and it also
01:59:34.679 allows you to choose your cloud service
01:59:36.280 provider as well as the region in my
01:59:38.480 case I'll go with Europe but you can
01:59:40.320 choose the region that is closest to you
01:59:42.520 and click create project now the second
01:59:44.960 step is interesting you can choose your
01:59:46.639 own compute size which refers to the
01:59:48.520 resources allocated for running the
01:59:50.119 database server the vcp or virtual CPUs
01:59:53.800 determines the number of virtual
01:59:55.320 processors available for the database
01:59:57.679 and memory just means Ram in this case
02:00:00.280 I'll let my Autos scaling range from
02:00:02.119 zero all the way to two in this case
02:00:04.520 I'll just say use recommended and just
02:00:06.679 like that we are redirected to our neon
02:00:08.800 dashboard but before we go ahead and set
02:00:11.040 it up I want to tell you a couple of
02:00:12.719 reasons of why I decided to proceed with
02:00:14.960 neon for setting up our postcourse
02:00:16.880 database see neon allows you to run a
02:00:19.679 serverless database meaning that every
02:00:22.400 from setup to your servers autoscaling
02:00:24.800 and much more is in a serverless
02:00:27.040 environment without it you would have to
02:00:29.000 do a hell of a lot of setup for creating
02:00:31.719 servers using Cloud providers installing
02:00:33.920 postgress there learning about
02:00:35.560 permissions and roles and you would also
02:00:37.800 have to give out your credit card before
02:00:39.639 you can even understand how things work
02:00:41.840 so if you have enough money to pay just
02:00:43.800 to learn how to use postgress and you
02:00:46.000 want to do everything on your own sure
02:00:48.000 you can do that but if you're anyone
02:00:50.159 like me who wants to share things faster
02:00:53.239 while learning new things then together
02:00:55.639 we can use neon postgress for free as
02:00:58.280 you saw we were able to set up a whole
02:01:00.159 project in a matter of seconds you can
02:01:02.440 have 10 of those with half a gigabyte of
02:01:04.639 storage and 190 computer hours and on
02:01:08.040 top of that you also get a lot of
02:01:09.880 additional features like autoscaling
02:01:12.199 doing database branching like you're
02:01:14.040 doing branching on git great apis
02:01:17.079 authorization levels and more but with
02:01:19.159 that in mind let's see how we can set
02:01:20.760 all of this up go ahead and copy your
02:01:22.920 post connection string go back to your
02:01:26.079 env. looc and add your database URL
02:01:30.800 right here perfect finally head over to
02:01:33.800 our config and modify it to also include
02:01:37.360 the database URL equal to process.
02:01:41.480 env. database URL and now that all of
02:01:45.079 that is set up in the next lesson we'll
02:01:47.440 also hook it up with an omm known as
02:01:50.360 drizzle
02:01:53.599 what is an or object relational mapping
02:01:57.480 tool allows you to make your app more
02:01:59.880 scalable typically it slows your process
02:02:02.440 down while you set it up but drizzle on
02:02:04.760 the other hand is made to ship ship ship
02:02:07.960 so as with neon I have a lot of reasons
02:02:10.560 of why we're using it it's designed for
02:02:13.480 modern typescript developers type safe
02:02:16.560 clean and Incredibly easy to use it
02:02:19.280 allows you to connect to any database
02:02:21.440 has a pretty pretty cool Studio where
02:02:22.840 you can explore and manipulate your data
02:02:24.880 not within an ugly postgress admin
02:02:27.280 interface and it is a developer favorite
02:02:29.920 so let's set it up click the link down
02:02:31.880 in the description and let's follow the
02:02:33.920 tutorial for integrating drizzle with
02:02:36.440 neon pogress we already have an existing
02:02:38.840 xgs project so we can go ahead and
02:02:41.400 install and set up drizzle orm and
02:02:43.840 drizzle kit we can copy those two
02:02:46.079 commands and paste them into the
02:02:48.119 terminal mpmi dzm and mpmi D drizzle kit
02:02:53.000 once those get installed we can also
02:02:55.119 install the neon serverless driver and
02:02:57.520 if we want to we can also have a package
02:02:59.560 that helps us manage our envs but we
02:03:01.679 have already created our EnV
02:03:03.400 configuration and it says here in case
02:03:05.599 you face the issues with resolving
02:03:07.000 dependencies during installation if
02:03:08.960 you're not using react native Force the
02:03:11.040 installation with force or Legacy peps
02:03:14.360 and now we have a couple of steps to set
02:03:16.440 everything up log into neon console and
02:03:18.840 create a new project and create a new
02:03:21.040 project we've already done that I
02:03:23.159 believe I called my database Library set
02:03:25.880 up the connection string variable we
02:03:27.719 have already done that as well and added
02:03:29.760 it to our EnV local in the previous
02:03:32.000 lesson finally we have to connect our
02:03:34.560 jel orm to our database by creating a
02:03:37.560 new drizzle. TS file so let's copy this
02:03:40.599 code head back to our code and create a
02:03:43.320 new folder in the road over application
02:03:45.400 called
02:03:46.760 database within database create a new
02:03:49.440 file called drizzle.
02:03:52.559 DS and within it you can paste the code
02:03:55.079 that we copied we'll be getting the
02:03:56.480 config object not from EnV but from add
02:03:59.520 for/
02:04:01.000 libconfig here are all of our
02:04:03.840 environment variables and it is a
02:04:05.719 default import so we can remove those
02:04:07.760 curly braces then we import drizzle and
02:04:10.639 then we can say something like
02:04:12.400 this const SQL is equal to Neon which we
02:04:16.920 can import from neon DB serverless
02:04:18.719 database and to it we can pass the
02:04:20.920 config
02:04:23.440 env. database URL finally we export that
02:04:27.239 database by calling drizzle and then we
02:04:29.679 can set the client to be equal to this
02:04:32.800 SQL database the next step is to declare
02:04:35.800 schemas in this case drizzle is
02:04:37.920 insulting us and telling us that we're
02:04:39.559 building a to-do application but as you
02:04:41.880 know we're building a University Library
02:04:43.679 management system but still we'll take
02:04:45.880 what they give us and then modify it so
02:04:47.880 let's create a new file right here in
02:04:49.520 the database and let's call it SK
02:04:53.719 .ts and I'll paste the code that we
02:04:55.880 copied but in our case it'll have to
02:04:58.040 look a bit more advanced I'll keep this
02:05:00.760 ID here but remove the other two
02:05:03.280 properties and make the ID a bit more
02:05:06.079 advanced check this out instead of using
02:05:08.880 integer we'll be using uid which stands
02:05:12.119 for a unique identifier and we'll give
02:05:15.159 it a name of ID we can also specify that
02:05:18.599 this property should not be null and
02:05:21.800 that it will act as the primary key of
02:05:24.440 the rows in the database also by default
02:05:28.480 it'll have a random value so we can say
02:05:30.719 default random and it has to be unique
02:05:34.280 since it's a primary identifier or a
02:05:36.400 primary key and we can import this uid
02:05:39.360 coming right here from drizzle
02:05:41.480 orm perfect and I think this shows you
02:05:44.159 why we're using drizzle in the first
02:05:45.960 place it makes it super simple to
02:05:48.320 specify the architecture of your
02:05:49.880 database very complex SQL databases for
02:05:53.000 that matter in simple JavaScript code
02:05:55.559 and you'll see later on once we migrate
02:05:57.760 over to Native SQL commands of how much
02:06:00.040 more complex it'll
02:06:01.880 get for now let's continue by providing
02:06:05.040 a full name it'll look something like
02:06:07.360 this we can also say that this full name
02:06:10.199 will be a VAR car this simply means that
02:06:13.079 it's a list of
02:06:14.280 characters and the name of that column
02:06:17.040 will be foore name which is not null so
02:06:21.320 why have I decided to use full uncore
02:06:23.679 name which means that this is snake case
02:06:26.679 and not regular camel case even though
02:06:29.480 we use camel case in JavaScript most
02:06:31.440 often when you're creating SQL databases
02:06:34.239 you typically want to go for snake case
02:06:36.360 meaning lowercase letters divided by the
02:06:38.920 underscore separator great let's also
02:06:42.159 import varar from the top and let's give
02:06:44.679 it a maximum length of about 255
02:06:49.320 characters great next let's let's move
02:06:51.880 over to email which will be a type of
02:06:55.280 text with the name of email which is not
02:06:58.360 null and is unique we can also Define a
02:07:03.079 University ID which will be an
02:07:08.119 integer with a name of University ID and
02:07:12.280 it will not be null and it also has to
02:07:15.199 be unique after the University ID we can
02:07:18.360 Define the password field which will be
02:07:21.159 of a type text password and it must not
02:07:24.800 be null we can also have a university
02:07:28.800 card which will be a URL pointing to the
02:07:32.040 image of the University card so we can
02:07:34.280 have a text property of University card
02:07:37.280 which is not null doesn't have to be
02:07:39.840 unique and we can also have a status of
02:07:42.520 that specific student and I just noticed
02:07:44.880 right here we're not working with to-dos
02:07:46.639 which is what be copied over from here
02:07:48.559 we're working with the users within our
02:07:50.679 database so let's rename this over to
02:07:52.880 users and make it a PG table of users
02:07:56.920 right here as well the status itself
02:07:59.599 will actually be an enum so let's say
02:08:02.440 export
02:08:04.480 status uncore enum and an enum simply
02:08:08.360 means an array of different strings that
02:08:10.520 are possible answers to that status so
02:08:14.000 the values that can be used we can
02:08:16.119 declare it by saying PG enum like this
02:08:19.440 which we can import from PG core and
02:08:22.040 then to it we can Define the name which
02:08:24.079 will be simply
02:08:25.639 status and provide an array of different
02:08:28.159 values such as pending approved or
02:08:31.920 rejected we can also have another enum
02:08:34.280 for the role of that user which we can
02:08:37.239 export and call roll enum it'll follow
02:08:41.280 the similar structure PG enum of roll
02:08:44.599 and it'll be something like user or
02:08:48.040 admin so to keep it simple let's have
02:08:50.599 user
02:08:52.119 and then admin all uppercase like this
02:08:55.639 finally let's have one final enum not
02:08:57.840 for users but for books so it can be
02:09:00.280 borrow status enum which will be equal
02:09:03.639 to PG enum of borrow status with an
02:09:06.400 underscore in between with the values of
02:09:09.360 let's keep it simple and just say
02:09:12.000 something along the lines of
02:09:14.840 borrowed or
02:09:17.760 returned there we go so now we have
02:09:19.960 three different enums which we exporting
02:09:22.199 right here and of course we have to say
02:09:24.199 export const and then the name of that
02:09:27.079 enum perfect you can see prettyer
02:09:29.480 automatically put it into new lines for
02:09:31.079 me which is okay and finally we can now
02:09:33.520 use that enum when declaring the user
02:09:36.040 table so here we can say status is going
02:09:39.480 to be equal to status
02:09:41.400 enum which we call like this pass it the
02:09:44.559 name of status and we can choose a
02:09:47.079 default value for this enum by default
02:09:49.840 the status will be set to depending we
02:09:52.480 can then define the role of the user by
02:09:54.599 saying Ro enum of the name role and
02:09:57.239 choose the default value of user it
02:09:59.559 might be useful to track the last
02:10:01.840 activity date so I'll set that over to
02:10:05.000 date and I'll call it last activity date
02:10:09.360 which can default to now so we can
02:10:11.920 Define it something like
02:10:13.520 this default now of course we have to
02:10:17.000 import date right here from PG
02:10:20.320 core as it's another
02:10:22.599 type and finally we can also have a
02:10:25.480 created ad property so we can know when
02:10:28.360 the user joined and that'll be equal to
02:10:30.520 a timestamp coming from PG core and
02:10:34.040 it'll be called created
02:10:36.119 at and we're going to say with time zone
02:10:39.520 will be applied to true and we can
02:10:42.040 default it to
02:10:43.840 default
02:10:46.199 now perfect so this is the structure of
02:10:50.520 how our us users are going to look like
02:10:52.639 in our
02:10:53.559 database we have defined all of it using
02:10:56.960 drizzle so what is the next step well as
02:10:59.840 you can see right here in the docs they
02:11:01.520 say that the next step is to set up the
02:11:03.400 drizzle configuration it is a file used
02:11:06.400 by drizzle that contains all the
02:11:08.159 information about your database
02:11:09.559 connection migration folder more on that
02:11:12.000 soon and schema files so let's create a
02:11:15.480 new drizzle.
02:11:20.239 config.sys outside of everything and
02:11:23.320 I'll call it jizzel DOC
02:11:36.119 config.sys more carefully so let's
02:11:38.760 actually open up a new terminal window
02:11:41.719 and run
02:11:43.000 mpmi EnV and if you face any kind of
02:11:45.960 issues when installing some dependencies
02:11:47.880 like it happened in this case looks like
02:11:49.599 my esin has been bugging me simply add
02:11:52.239 the-- Legacy Pier depths after the
02:11:54.800 installation command so it's going to
02:11:56.559 look something like this npmi EnV --
02:12:00.079 Legacy - beer- deps and it'll install it
02:12:03.760 right off the bat now that we've
02:12:05.480 installed the EnV package and we're
02:12:07.679 getting the defined config from jizel
02:12:09.280 kit we have to set up our configuration
02:12:11.559 path currently by default it is set to
02:12:14.840 EnV but as you might know we have stored
02:12:18.040 our environment variables within a EnV
02:12:21.719 local file so simply add the local right
02:12:25.480 here so it points to the right place
02:12:28.079 after that we have to Define where our
02:12:30.040 schema is located it is not under Source
02:12:33.159 DP schema TS it is actually
02:12:36.159 under
02:12:37.800 database schema.
02:12:40.040 TS the out folder is where our
02:12:42.760 migrations will go you'll see how that
02:12:44.800 looks like soon and then we have to
02:12:46.599 choose the dialect of our database
02:12:48.639 language in this case it is postgress
02:12:50.880 and we have to add our DB credentials in
02:12:53.360 this case they're coming from process.
02:12:55.480 env. database URL so it looks like we're
02:12:58.679 good with the step five so what's going
02:13:01.239 to happen once we try to run the
02:13:03.840 commands listed in Step six it says you
02:13:07.199 can generate migrations using drizzle
02:13:09.440 kit generate command and then run them
02:13:11.520 using drizzle kit migrate the concepts
02:13:14.040 of generate and migr are very important
02:13:16.800 database Concepts which drle didn't
02:13:19.119 invent they have existed for a long time
02:13:21.199 time on many different
02:13:23.480 ORS and once I actually run these
02:13:26.040 commands you'll see exactly what they do
02:13:28.880 you'll see their visual representation
02:13:31.079 so let's go ahead and generate those
02:13:32.920 migrations by copying the MPX jle kid
02:13:36.000 generate command and pasting it into our
02:13:38.239 terminal this will very quickly create a
02:13:40.920 new SQL migration under the migrations
02:13:43.920 folder right here and there we go create
02:13:47.239 table users uu ID primary key default
02:13:51.119 gen random uid what is this syntax well
02:13:54.639 it's definitely not JavaScript in fact
02:13:57.639 if you check out the file name you can
02:13:59.280 see that the extension ends with SQL so
02:14:02.639 this is native SQL code that's necessary
02:14:05.360 to update our database schema and it got
02:14:07.840 generated based off of our plain
02:14:10.559 JavaScript code which looks a lot like
02:14:12.920 using Zod which means that it is
02:14:15.079 familiar simple and quick now does this
02:14:18.760 mean that you should not learn SQL as a
02:14:21.199 full stack or backend developer not at
02:14:23.880 all learning it will definitely be of
02:14:26.280 great help but using drizzle to quickly
02:14:28.800 spin up databases and projects will save
02:14:31.400 you so much time so alongside this SQL
02:14:34.719 file drizzle also generated a meta
02:14:37.159 folder that contains a snapshot of the
02:14:39.400 database at that specific point in time
02:14:41.559 the next thing we have to do is run the
02:14:43.480 migration so let's copy this command and
02:14:46.480 paste it into the terminal MPX drizzle
02:14:49.280 kit migrate and there we we go even
02:14:51.880 though there's a warning right here you
02:14:53.679 don't have to worry the migration ran
02:14:56.079 successfully and if something went wrong
02:14:58.520 it is mostly a problem with your schema
02:15:01.119 so please make sure that it is exactly
02:15:03.239 like this with all of the enums exports
02:15:05.639 and more and then you can try to
02:15:07.079 regenerate and remigrate if that fails
02:15:10.159 to you might want to create a new neon
02:15:12.800 project just like I did and then you can
02:15:14.800 use it within your envs hopefully that
02:15:16.880 should help with any potential problems
02:15:19.199 but as you can see in my case everything
02:15:21.040 went smoothly on the first run so what
02:15:23.199 did the migr command do well it applied
02:15:25.800 all the changes like new tables columns
02:15:28.679 or relationships and these are the
02:15:30.679 commands that you'll have to use quite
02:15:32.280 often when using drizzle remember you
02:15:34.440 have to create schemas then generate
02:15:37.079 respective SQL commands using drizzle
02:15:39.320 generate and then apply those commands
02:15:41.599 to changes to the database using drizzle
02:15:43.760 migrate so if you want me to do a
02:15:45.760 detailed video just on how drizzle works
02:15:47.719 in the future let me know down in the
02:15:49.400 comments and I'll do that but running
02:15:51.679 these commands every single time is a
02:15:53.920 bit of a pain so instead of manually
02:15:56.079 typing it out and trying to remember it
02:15:58.320 we can head over to our package.json and
02:16:01.559 modify the scripts to run these commands
02:16:03.800 for us so right here we can say DB
02:16:07.599 generate will run the MPX drizzle kit
02:16:12.320 generate after that we can do something
02:16:15.400 like DB
02:16:17.440 migrate which can run MPX drizzle kit
02:16:20.960 kit migrate and finally we can also run
02:16:24.800 the DB Studio which will open up the
02:16:28.520 drizzle kit Studio that'll look
02:16:31.040 something like this so far we have
02:16:33.120 tested these two but we still haven't
02:16:35.318 yet tested out the studio so let me
02:16:37.760 actually show you how that works I'll
02:16:39.760 head over to my terminal and run mpm run
02:16:43.519 DB Studio it says drizzle studio is up
02:16:46.318 and running on local. drizzle. studio so
02:16:49.160 let's actually open it up and it just
02:16:51.040 opened up in my browser I'll expand it
02:16:53.000 so you can see it in the full View and
02:16:54.840 there we
02:16:55.679 go think of this as your modern SQL
02:16:58.920 database interface where you can run
02:17:01.398 different SQL commands to query the data
02:17:03.799 from the database check out all the rows
02:17:06.240 and columns and Records even manually
02:17:09.080 add some data or alter the tables drop
02:17:12.040 them and do so much more pretty cool
02:17:15.000 right all of it running locally within
02:17:17.080 your browser in a modern interface of
02:17:19.920 course there is so much more that you
02:17:21.359 can do and explaining all of the
02:17:22.920 features would require a separate video
02:17:24.638 on drizzle so as I said if you want me
02:17:26.638 to do that I'll gladly do it just let me
02:17:28.638 know down in the comments but for the
02:17:30.599 time being to test out the connection
02:17:32.240 between our database and between our
02:17:34.120 application let's add a simple user I'll
02:17:36.879 go ahead and add a record of full name I
02:17:39.359 can do something like Adrian JS Mastery
02:17:42.240 right here email can be something like
02:17:44.679 contact JS
02:17:47.160 mastery. proo University ID has to be
02:17:50.318 unique password University card what
02:17:53.679 else do we have status role last
02:17:56.080 activity created ad can all be default
02:17:58.478 so let's actually fill in the email
02:18:00.679 that's going to be contact jm.pro as
02:18:05.000 well as the University ID I think you
02:18:06.799 have to press enter once you actually
02:18:08.240 save it and let's try to save this
02:18:12.240 record and there we go we now have one
02:18:15.359 real record within our database so let's
02:18:18.280 head back over to our homepage that's
02:18:20.280 going to be page root DSX and let's try
02:18:23.519 to fetch that user because doing it is
02:18:26.160 super simple I'll turn this into a
02:18:29.160 regular function that has a return block
02:18:32.160 that'll look something like this and
02:18:35.240 then right here at the top we can say
02:18:37.080 const result is equal to a weight of
02:18:40.359 course we have to make this an async
02:18:42.200 function if we want to use a weight DB
02:18:45.638 coming from at database SL drizzle.
02:18:49.280 select.
02:18:51.120 from and here we can select from users
02:18:55.080 users will actually be a schema coming
02:18:57.160 from database schema super simple right
02:19:00.318 give me all the users and then we can
02:19:03.318 console.log json.stringify
02:19:07.000 result and then pass in null and two to
02:19:10.240 create some more space in between the
02:19:12.000 results even though right now it'll be
02:19:13.799 only a single result so if we get
02:19:16.280 something in the console it means we
02:19:17.840 have successfully established a
02:19:19.519 connection with database so back on the
02:19:21.959 homepage I'll reload and would you look
02:19:25.040 at that we get back one user with its
02:19:28.200 uniquely generated ID activity date and
02:19:30.879 created ad as well as some default enums
02:19:33.879 for the status and role University card
02:19:36.519 ID password email and even full name it
02:19:39.840 is all here and we're fetching it
02:19:41.879 directly from the database Isn't that
02:19:44.280 cool in this lesson you just learned how
02:19:47.040 to set up a serverless postgress
02:19:49.479 database yep that's right you've done
02:19:52.720 everything from creating different
02:19:54.319 schemas for the user table to then
02:19:56.800 running the migrate and generate
02:19:58.479 commands which created an SQL
02:20:00.600 counterpart that postgress can actually
02:20:02.680 read to create a real database then we
02:20:06.120 have added those commands right here in
02:20:08.080 the package.json so we can more easily
02:20:10.240 call them in the future whenever we
02:20:12.000 decide to change our schemas and finally
02:20:15.120 we explored drizzle super convenient
02:20:17.280 Studio that allows us to modify the
02:20:19.240 database in real time which we did by
02:20:21.840 adding an additional record then I
02:20:23.880 showed you just how simple it is to
02:20:26.080 fetch the data from that new postar
02:20:28.080 database that we've created all it took
02:20:30.560 was a single line of course setting up
02:20:32.760 databases especially SQL databases
02:20:35.600 typically takes a long time and you get
02:20:37.680 an interface that doesn't really look
02:20:39.280 like this it's clunky and old and the
02:20:41.960 only reason why we're able to set this
02:20:43.760 up so quickly and so conveniently is
02:20:46.319 because we use neon neon spun up a
02:20:48.720 serverless instance of her post database
02:20:51.359 gave us a connection string and that's
02:20:53.439 it you can also track a lot of
02:20:55.640 additional stats right here and even
02:20:57.760 check the database right here with a
02:20:59.680 neon as well you can see this looks very
02:21:02.560 similar to what we saw in drizzle Studio
02:21:05.120 there's also an overview and one of
02:21:07.200 neon's best and unique features is their
02:21:10.240 branching allowing it to create g-like
02:21:12.880 branches for different instances of your
02:21:15.560 database you can simply give it a branch
02:21:17.680 name give it your parent branch and
02:21:19.840 choose which data you want to include
02:21:21.560 you can include all the data up to this
02:21:23.160 point or just some specific logs or
02:21:25.479 dates and times and that said you have
02:21:27.600 another version of your database right
02:21:29.760 here right now and let me know in the
02:21:32.000 comments down below if you'd like me to
02:21:33.640 see do more full stack projects using
02:21:36.680 SQL databases such as postgress with
02:21:39.479 neon over something like mongodb I found
02:21:42.640 it to be super fast to spin up new
02:21:44.560 projects and I'd love to do many more
02:21:46.640 using it with that in mind we have
02:21:48.479 successfully built out the homepage as
02:21:50.840 well as o pages of our project let's not
02:21:53.560 forget we have also hooked up a real
02:21:55.600 database and created a user schema so
02:21:58.560 naturally that leads us to The Next Step
02:22:01.399 which is to hook up the existing UI of
02:22:03.479 the oth with the user schema in our
02:22:05.920 database so we can actually create new
02:22:08.479 users and onboard them to our app so
02:22:11.439 let's do that
02:22:13.640 next let's set up authentication since
02:22:16.920 this is a production ready application
02:22:18.840 we'll use the best free and open source
02:22:21.200 off OJs so simply head over to their
02:22:24.399 getting started guide and move over to
02:22:26.800 installation with nextjs and let's go
02:22:29.640 ahead and follow the steps we can run
02:22:31.439 mpm install and then copy the rest of
02:22:33.439 the command I'll do it right here in my
02:22:35.680 second terminal oh we'll need a third
02:22:38.120 one because we are running both the
02:22:39.600 drizzle Studio as well as our
02:22:41.640 application before running this command
02:22:44.000 also add another package which we
02:22:45.600 installed and that's going to be bcrypt
02:22:48.359 JS also for some reason in this project
02:22:50.960 I have some issues with es lend so I
02:22:53.520 have to add-- Legacy Das beer- deps you
02:22:57.960 might not need to do that if it throws
02:22:59.720 an error then you can but other than
02:23:01.479 that you can just run mpm install and
02:23:03.880 let's wait for those two packages to get
02:23:06.000 installed now while they are getting
02:23:08.040 installed I want to explain a bit about
02:23:10.439 how we can configure OJs there are two
02:23:13.439 different ways off configuring it one is
02:23:16.279 with something known as adapters if I
02:23:19.160 expand the list of adapters right here
02:23:21.120 you'll see that it includes everything
02:23:22.520 from drizzle to different types of
02:23:24.160 databases like mongodb postgress and
02:23:27.160 even up stach redis which we'll explore
02:23:29.080 in more detail soon an adapter in next o
02:23:32.040 basically connects your application to
02:23:33.920 whatever database or backend system you
02:23:35.840 want to use to store your data for user
02:23:38.080 accounts and sessions in our case we
02:23:40.240 could use drizzle because we're using it
02:23:42.200 as our orm of choice with these adapters
02:23:45.120 we have automatic database handling and
02:23:47.600 type safety ideal for standardized and
02:23:50.600 low maintenance approach but if you
02:23:53.080 decide to go without an adapter it's
02:23:55.720 definitely more flexible but it requires
02:23:58.399 custom coding for the entire
02:24:00.359 authentication logic but it allows for
02:24:02.760 more straightforward database calls to
02:24:04.760 store users and do other things to be
02:24:07.160 able to make a decision of which route
02:24:09.080 you're going to go it's important to
02:24:10.560 consider your project requirements in
02:24:12.520 our case we have just a very simple
02:24:14.840 email and password mechanism with no
02:24:17.000 social odds like Google or GitHub and
02:24:19.000 more so in this case we can go without
02:24:21.680 using an adapter since the user will
02:24:23.840 only have one account not multiple
02:24:25.960 accounts but if you're interested in
02:24:27.920 learning how you can manage multiple
02:24:29.479 user accounts like emails passwords
02:24:31.960 Google GitHub and more check out my
02:24:34.600 ultimate nextjs course where I teach all
02:24:37.120 of these things in detail I even
02:24:38.960 remember creating dedicated diagrams to
02:24:41.240 explain the entire authentication flow
02:24:43.640 you can see how many lessons there are
02:24:45.640 and then we go into authentication 2 for
02:24:48.319 social off accounts and then finally
02:24:50.880 email and password authentication
02:24:52.880 there's a lot but you don't need to know
02:24:54.960 any of that for this course so back in
02:24:57.240 our terminal you can see that our
02:24:58.720 packages successfully got installed so
02:25:00.880 let's go ahead and create a new file
02:25:02.760 called O.S in the root of our project
02:25:06.160 within here we can set up the
02:25:07.600 credentials provider but just before we
02:25:09.880 set it up let's actually follow the
02:25:11.439 steps outlined in the installation
02:25:13.399 process where we have to run MPX off
02:25:16.120 secret to create a mandatory environment
02:25:18.800 variable it'll looks something like this
02:25:21.439 immediately if you head over to your
02:25:23.319 env. loal you'll be able to see a new
02:25:26.000 odd secret right here now that we have
02:25:28.720 that we are ready to configure the odgs
02:25:31.359 file and object where we control the
02:25:33.600 behavior of the library and specify
02:25:35.880 custom authentication logic or choose
02:25:39.120 adapters create a new odds file which is
02:25:42.560 what we have already done and then get
02:25:44.479 started quickly by pasting the following
02:25:47.359 contents import next OD we get a lot of
02:25:51.040 things out of it like the signin
02:25:52.800 functionality sign out off and more and
02:25:55.359 we can choose which providers to add
02:25:57.279 before we get started with the second
02:25:58.880 part of Step number
02:26:00.880 three which is adding a new route
02:26:03.080 Handler let's actually go ahead and set
02:26:04.960 up our custom authentication logic right
02:26:07.279 here within the next o config first
02:26:10.080 things first I'll say that we will
02:26:11.720 manage the session using a
02:26:14.200 strategy known as JWT meaning Json web
02:26:18.920 tokens then under providers we can
02:26:21.680 provide a credentials provider which
02:26:24.680 will look something like this you can
02:26:26.399 import this credentials provider right
02:26:28.520 here at the top by saying import
02:26:31.560 credentials provider coming from next- o
02:26:36.880 SL providers SL credentials then once
02:26:40.720 you call it you can pass an object into
02:26:42.800 it which acts as the
02:26:44.640 configuration within there you can
02:26:46.640 Define some methods you can call such as
02:26:49.640 an asyn function of
02:26:52.120 authorize which takes in the
02:26:55.080 credentials and then we can do whatever
02:26:57.279 we want with those credentials first
02:26:59.600 things first we want to check if there
02:27:01.760 is no credentials question mark. email
02:27:05.560 or no credentials question mark.
02:27:08.720 password we simply want to return null
02:27:11.120 meaning there's nothing there but if we
02:27:14.200 do have an email or password we are
02:27:16.120 ready to try to fetch the user from the
02:27:18.319 database by saying const user is equal
02:27:20.960 to await
02:27:23.160 DB coming from database drizzle do
02:27:26.439 select so we want to select from where
02:27:29.680 from users this users can simply point
02:27:31.920 to the schema of users where EQ which
02:27:35.040 means equal coming from drizzle orm
02:27:38.439 email is equal to credentials. email. to
02:27:43.040 string so we're checking whether the
02:27:44.880 email field matches or specifically this
02:27:47.600 should be the users. email
02:27:50.960 if the user's email matches then we want
02:27:53.279 to return that user and we're going to
02:27:55.240 limit it only to one because there can
02:27:57.200 be only one user with that specific
02:27:59.279 email if this query returns nothing
02:28:02.040 meaning if user. length is triple equal
02:28:05.920 to zero then we can return null else we
02:28:09.520 can check the validity of the password
02:28:11.560 by saying const is password
02:28:14.960 valid and that'll be equal to a wait
02:28:18.560 compare credentials
02:28:21.880 password.
02:28:23.479 twring with the user zero meaning the
02:28:27.080 first user we fetch do
02:28:29.880 password so we're comparing those two
02:28:32.560 and the compare function is actually
02:28:34.200 coming from the package we installed
02:28:35.920 after installing nextto and that's going
02:28:38.399 to be bcrypt so import compare from
02:28:42.560 bcrypt JS it looks like we also have to
02:28:45.319 install the types for the bcjs package
02:28:48.040 so let's copy this error message
02:28:51.000 head over to the terminal and say mpmi
02:28:54.080 D- save-dev bcrypt JS if you do that the
02:28:58.560 error will be gone great so now that
02:29:01.080 we're checking for the validity of the
02:29:02.560 password if the password is not valid we
02:29:05.880 can simply return n once again but if we
02:29:08.359 have successfully passed all of these
02:29:09.960 checks we can return an object
02:29:13.000 containing the ID which is going to be
02:29:14.960 equal to user z. id. TW string
02:29:20.600 we're going to also pass the email equal
02:29:22.840 to
02:29:24.040 user0 doil and the name of the user
02:29:27.560 which is going to be equal to user z.
02:29:30.600 full name make sure it is full name like
02:29:34.040 this even though the field in the
02:29:35.760 database looks like this full uncore
02:29:38.399 name here we're declaring it with
02:29:40.479 regular full name in typical JavaScript
02:29:43.359 camel case format and we can say that
02:29:45.439 this is as user coming from types. D.S
02:29:50.080 saying that this will follow the
02:29:51.560 structure of the user but it will not be
02:29:54.080 a user coming from our types it'll
02:29:56.200 actually be a user coming from next off
02:29:59.080 so let's import it right at the top we
02:30:01.200 can do that by adding a comma right here
02:30:03.279 and then getting access to the user type
02:30:05.800 from next off which has the ID name
02:30:09.080 email and image great with that in mind
02:30:12.680 our authorized method under the
02:30:14.479 credentials provider is now complete so
02:30:17.399 we can exit the provids array and we can
02:30:20.080 find the pages where we'll be doing the
02:30:22.439 off the sign in page will simply look
02:30:26.120 like this SL sign- in and we also need
02:30:29.600 to define the callbacks within callbacks
02:30:32.200 we can have an async JWT function that
02:30:35.000 accepts a token and a user and it'll
02:30:38.080 check if a user exists then set the
02:30:41.479 token ID to be equal to the user ID and
02:30:44.640 set the token. name to be equal to
02:30:47.720 user.name once you have set those values
02:30:51.160 return the modified token alongside this
02:30:53.720 async JWT we can also create an async
02:30:56.720 session function which accepts a session
02:30:59.720 and a token and then if a session exists
02:31:03.160 so if session. user then we can set the
02:31:06.080 session. user. ID to token
02:31:09.600 ID as string just for typescript to be
02:31:13.319 safe as string here as well and set the
02:31:16.479 session. user.name to token. name
02:31:20.200 finally we can return the session we do
02:31:23.600 this to populate the token as well as
02:31:25.880 the session with the currently logged in
02:31:28.000 user yes there is some manual work you
02:31:29.920 have to do if you don't use an adapter
02:31:32.040 but you have more flexibility with that
02:31:34.200 in mind we have now completed the first
02:31:36.120 part of the third step and now we have
02:31:38.920 to create a route Handler we can do that
02:31:41.920 by heading over to our app API o and
02:31:45.479 then next to image kit we'll also create
02:31:47.600 a new folder and I'll call it o within o
02:31:51.680 we need to create a file called square
02:31:54.680 brackets dot dot dot next o square
02:31:57.479 brackets so let's create a new folder
02:32:00.200 with that name and then within that
02:32:02.120 folder let's create another file called
02:32:04.720 route. DS just following the docs here
02:32:08.279 and then within it you can copy and
02:32:09.960 paste the code provided to you from the
02:32:12.439 documentation after that we can add the
02:32:14.640 optional middleware so let's do that by
02:32:17.760 creating a new file in the root of our
02:32:19.920 application called
02:32:22.920 middleware
02:32:25.359 DS and to it you can copy and paste this
02:32:29.040 line finally we need to set up
02:32:31.240 authentication methods with different
02:32:33.120 providers in this case we won't be using
02:32:35.439 any providers or rather we'll be using
02:32:37.600 just one provider and that is the
02:32:39.319 credentials provider meaning email and
02:32:41.520 password login which we have just set up
02:32:44.200 so now that we're done with this
02:32:45.640 installation guide let's actually create
02:32:48.040 a server action for signing up our users
02:32:50.880 we can do that by heading over into lib
02:32:53.279 and create a new folder called
02:32:56.600 actions and within actions create a new
02:32:59.520 file called off. DS within this and
02:33:03.720 other server actions file in nextjs
02:33:06.640 there is one first very important thing
02:33:09.479 you have to do and that is add the use
02:33:12.760 server directive at the top the used
02:33:15.840 server directive tells this file and the
02:33:18.640 rest of the code that whatever function
02:33:20.960 you have here like const sign up is
02:33:25.120 equal to an async arrow function will
02:33:28.240 only be called on the server side not
02:33:31.160 the client side and this is important
02:33:33.279 because whenever you're making database
02:33:34.840 call or database mutations those calls
02:33:37.840 have to be very
02:33:39.359 secure so not all of these environment
02:33:42.240 variables can be accessed from the
02:33:44.200 client side like the image kit private
02:33:46.160 key or your database URL those are for
02:33:49.160 server eyes only right here into this
02:33:52.120 function we are accepting params and
02:33:55.080 those params can be of a type O
02:33:58.120 credentials and we can add those o
02:34:00.560 credentials right within our types. D.S
02:34:04.600 below the book by defining a new
02:34:07.080 interface called o credentials and then
02:34:10.279 defining the fields that it'll have
02:34:12.439 it'll of course have a full name of a
02:34:14.800 typ string an email of a type string a
02:34:18.399 password of a type string string and a
02:34:21.080 University ID of a type number as well
02:34:24.640 as a university
02:34:26.920 card which will be of a type string as
02:34:29.560 it'll be a URL to an uploaded
02:34:32.960 image so now we're accepting it right
02:34:35.319 here and let's put it to use by
02:34:37.600 destructuring all of those values by
02:34:39.800 saying const full name email
02:34:45.760 University ID password and University
02:34:50.560 card and those are going to be equal to
02:34:53.600 params now let's try to fetch an
02:34:55.880 existing user if one was created already
02:34:59.279 we can do that by saying cons existing
02:35:02.080 user is equal to await
02:35:05.520 DB coming from database drizzle do
02:35:08.760 select from users where EQ meaning equal
02:35:14.319 users. email is equal to the email that
02:35:17.920 we're checking for right now and this EQ
02:35:20.760 is coming from drizzle orm so at the top
02:35:23.319 let's say import EQ from drizzle dasm
02:35:28.920 and we're going to limit it to one user
02:35:31.080 perfect now if an existing user. length
02:35:34.359 is greater than zero it means that it
02:35:36.240 already exists so we can either throw an
02:35:39.120 error or just return an object that says
02:35:42.800 success is false and error saying
02:35:46.359 something like user already exists but
02:35:49.240 if a use user doesn't already exist we
02:35:51.240 can hash the new user's password by
02:35:53.920 saying const hashed password is equal to
02:35:57.960 a weit hash coming from bcrypt JS to
02:36:02.319 which we can pass the password and then
02:36:04.560 something known as salt which is the
02:36:06.560 complexity upon which it'll be hashed
02:36:09.359 then we can open up a try and catch
02:36:11.560 Block in the catch we get access to an
02:36:14.319 error and we can simply console that
02:36:16.880 error or console log that error
02:36:20.560 and we can say something like sign up
02:36:22.399 error right here and return an object
02:36:26.200 saying success is false sign up error
02:36:30.000 but in the try we can try to create a
02:36:32.600 new user and let me show you how simple
02:36:34.479 that is you can just say await db.
02:36:37.720 insert into users the values and then
02:36:41.840 Define the values you want to insert
02:36:43.800 such as a full name email University ID
02:36:47.439 password equal to a hash password and
02:36:50.040 the university card and I just noticed I
02:36:52.600 have a typo right here with the password
02:36:54.840 webstorm also let me know that so this
02:36:56.720 was supposed to be password right here
02:37:00.600 and here and that's it that's how you
02:37:03.920 create users and later on upon
02:37:06.399 registration we can also automatically
02:37:08.640 sign in on the behalf of the new user so
02:37:11.200 they don't have to provide their email
02:37:12.560 and password again on the signin screen
02:37:15.000 by doing something like a wait sign in
02:37:18.720 with credential
02:37:20.040 and then pass in the email and the
02:37:22.279 password this sign in with credentials
02:37:24.960 is a function that we are yet to create
02:37:27.479 once we implement the signin server
02:37:29.680 action and finally after that we can
02:37:32.439 return a success of true perfect so
02:37:37.200 while we're here let's actually create
02:37:39.200 that function for signing in I will
02:37:41.399 uncomment it here and create it right
02:37:44.760 above by saying const sign in with
02:37:49.560 credentials is equal to an async
02:37:51.720 function that accepts params but it
02:37:54.520 doesn't accept all params so here I
02:37:56.560 actually want to teach you an advanced
02:37:58.399 typescript thing where you can still say
02:38:01.640 that it'll be all credentials but then
02:38:04.439 you can apply a pick parameter and then
02:38:07.439 pick only some of the types that will be
02:38:09.479 there in this case it'll be
02:38:11.800 email as well as password because it is
02:38:14.880 sign in and not sign up so let's
02:38:17.279 destructure those values by saying con
02:38:20.000 email and password is equal to params
02:38:23.040 and we can open up a try and catch
02:38:25.680 Block in the catch we'll do the same
02:38:28.240 thing as before conso log sign in error
02:38:31.240 success fals sign in error but in the
02:38:34.399 try we will simply sign our user in and
02:38:37.840 once again next off or OJs makes it
02:38:40.880 super simple to do that by saying const
02:38:43.240 result is equal to
02:38:46.040 await sign in and this is coming from
02:38:50.600 add SLO to which we need to say that we
02:38:54.160 want to sign in using the credentials
02:38:56.160 method and then pass in the email the
02:39:00.279 password as well as the redirect set to
02:39:03.640 false finally if result question mark.
02:39:08.000 error is true meaning if error exists we
02:39:10.920 can return false and then pass in the
02:39:13.600 error else if we do everything
02:39:15.800 successfully we can return success of
02:39:18.200 true so we can now collapse this
02:39:20.960 function let's not forget to export both
02:39:23.520 of these so export cons sign in with
02:39:26.080 credentials as well as export con sign
02:39:28.800 up and let's head over into our signin
02:39:31.920 page that is this one right here under
02:39:34.279 app o sign in here we have to pass the
02:39:37.760 function we just created which will
02:39:39.279 happen on form submit simply put it'll
02:39:41.880 be sign in with credentials and let's
02:39:46.359 not forget to head over to our sign up
02:39:48.840 page as well that'll look something like
02:39:52.200 this and here we can simply call sign up
02:39:55.640 coming from lib actions o now we'll have
02:39:59.399 to head over into the O form. TSX and
02:40:03.200 modify it to implement the toast
02:40:05.439 functionality we already used the toast
02:40:07.319 component on image upload now we're
02:40:09.200 going to use it here as well to let the
02:40:10.880 user know whether they have successfully
02:40:12.640 or unsuccessfully signed in or signed up
02:40:16.000 so let's head over into the handle
02:40:17.640 submit function and here we can submit
02:40:20.160 the data by saying const result is equal
02:40:22.920 to await on submit and then pass the
02:40:26.479 data that we got from the form and if
02:40:28.760 the result is a success then we simply
02:40:31.120 want to display a toast with a title of
02:40:35.840 success as well as a description of if
02:40:39.560 is sign in then we can do you have
02:40:42.200 successfully signed in or we can do
02:40:44.479 something like you have successfully
02:40:46.080 signed up so it'll look something like
02:40:48.399 that and Fin finally after signing the
02:40:50.240 user in we want to use the router
02:40:51.960 functionality so right here we can say
02:40:54.000 const router is equal to use router and
02:40:57.920 then we can say router.
02:41:00.560 push and push over to the homepage
02:41:03.520 because we have signed in successfully
02:41:05.439 and don't forget to import the toast
02:41:07.720 coming from add SL hooks use- toast and
02:41:12.720 don't forget to import the used router
02:41:15.160 coming from next navigation okay that's
02:41:18.359 good and in case something fails we can
02:41:21.760 add an else and then present a user with
02:41:24.920 a
02:41:26.080 toast that'll have a title of error if
02:41:29.600 we're signing in so if is sign
02:41:33.359 in in that case we'll say error signing
02:41:36.479 in else error signing up and for the
02:41:39.399 description we'll simply put the result.
02:41:41.439 error and a variant will be set to
02:41:45.359 destructive great and there's one very
02:41:48.279 very important thing we need need to do
02:41:49.960 before we can test all of this out and
02:41:52.080 that is to head within our primary
02:41:53.920 layout within the app folder Yep this
02:41:56.520 one right here where we added the toast
02:41:58.680 and we have to wrap it with something
02:42:00.479 known as a session provider this is
02:42:02.720 given to us by next o so let's wrap it
02:42:06.560 properly just the body and you can see
02:42:09.640 it is coming from next o react and to it
02:42:12.800 we have to provide a session equal to
02:42:16.319 session now where do we get this session
02:42:18.600 from once again it is super convenient
02:42:21.520 we just say concession is equal to await
02:42:25.640 o and this o is actually coming from the
02:42:28.200 O
02:42:29.200 file next o does everything for us let's
02:42:33.040 not forget to wrap it into a sync since
02:42:35.000 we're using a wait the error is gone and
02:42:38.640 we are ready to test it out I got to go
02:42:41.240 full screen for this first let's create
02:42:44.000 our library account for that we'll also
02:42:46.279 need a University ID so somewhere on the
02:42:48.880 figure design down below you can find
02:42:50.800 this nice looking card and if you copy
02:42:52.920 this entire figma design to your own
02:42:54.600 repo you should also be able to modify
02:42:56.760 it by double clicking on specific words
02:42:59.040 and then changing it right here of
02:43:00.600 course if you have that font if not you
02:43:02.600 can change the font as well once you're
02:43:04.359 there simply select it scroll down right
02:43:06.840 here and Export it as PNG then you can
02:43:09.760 head back and upload it right here there
02:43:11.920 we go that is looking credible so now I
02:43:15.080 can also enter my email I'll enter my
02:43:17.800 password for full name and my University
02:43:20.920 ID you can think of whatever what
02:43:23.200 matters more is the University card and
02:43:25.640 before I actually create this account I
02:43:27.920 want to head back over to our drizzle
02:43:29.479 studio and remove the current user that
02:43:31.760 we have here we don't need it anymore so
02:43:34.399 with all this in mind let's go ahead and
02:43:36.040 click sign up and just like that we got
02:43:38.560 redirected to the homepage and there was
02:43:40.840 some kind of a toast right here to the
02:43:42.399 bottom right but it didn't look that
02:43:44.479 good it looked like it was missing some
02:43:46.520 Styles we'll look into that soon but
02:43:49.319 what matters more for now is that we
02:43:50.920 actually got redirected back to homepage
02:43:54.000 now what would happen if I try to
02:43:56.720 reload okay we're still on the homepage
02:43:59.760 what if I manually head over to sign in
02:44:03.399 oh we can visit the signin which
02:44:05.479 typically means that we're not logged in
02:44:07.319 right if you can go to the signin page
02:44:09.240 if you're signed in you should never be
02:44:10.920 able to see the odd page so to achieve
02:44:13.399 that we can add redirects head over to
02:44:16.800 your layout. TSX within o and just look
02:44:21.080 for the active user session by saying
02:44:23.439 const session is equal to await
02:44:28.000 o and then if there is an active session
02:44:31.680 simply
02:44:33.560 redirect this is coming from next
02:44:35.479 navigation to forward slash meaning
02:44:38.399 homepage we also have to turn this into
02:44:40.399 an async function and we'll also add
02:44:42.840 this redirect over to our other layout
02:44:45.920 right here within the root but here
02:44:48.640 it'll actually be the other way
02:44:50.479 around I'll say try to get the currently
02:44:53.080 active
02:44:54.040 session and then if there is no session
02:44:57.640 redirect over
02:44:59.640 tosign in because we want our users to
02:45:02.600 be signed in first in this case if I
02:45:05.560 reload you can see I stay on the
02:45:07.600 homepage which means that we're
02:45:09.120 successfully logged in and there is an
02:45:11.680 active session for this user but let's
02:45:13.800 also indicate that there's an active
02:45:15.279 session in another way maybe by showing
02:45:18.040 the user Avatar if the user is logged in
02:45:20.840 right here at the top right I'll do that
02:45:23.000 right here within the header component
02:45:25.640 by simply heading right here below the
02:45:27.439 library link and adding a new Li that's
02:45:31.120 actually a link with an HF of my profile
02:45:35.120 which means we'll have a my profile page
02:45:36.800 too and then within here we can render a
02:45:39.200 shaten avatar component which is an
02:45:41.720 image element with a fullback for
02:45:43.840 representing the user we can install it
02:45:46.920 very simply by running MPA shat and at
02:45:49.920 latest add Avatar and we'll have to add
02:45:52.439 the Legacy Pier depths and once it gets
02:45:56.120 installed we can simply import it right
02:45:58.399 here at the top and then use it like
02:46:01.479 they say right here it looks like it
02:46:03.399 didn't get installed properly so I'll
02:46:06.240 just rerun MPX shatan latest at Avatar
02:46:09.720 one more time without the flag oh and
02:46:12.160 then it's going to manually ask me if I
02:46:13.840 want to apply that flag so I'll say yes
02:46:16.760 which will install the dependency and
02:46:18.600 the immediately you can see this Avatar
02:46:20.920 right here at the top right now we have
02:46:22.880 to get full user data right here into
02:46:25.160 this Avatar component and we can do that
02:46:28.120 by heading over to where we're calling
02:46:29.880 the header
02:46:31.120 component and I think that's in the root
02:46:33.720 layout so let's head over into the root
02:46:36.000 layout and here we're calling the header
02:46:38.520 so the only thing we have to do is
02:46:40.479 simply pass the session into this header
02:46:43.800 then in the header we can accept it by
02:46:46.120 saying session of a type
02:46:49.720 session of
02:46:52.160 session coming from next odd and then we
02:46:55.600 can simply render that users credentials
02:46:58.600 in this case we don't have an image so I
02:47:00.240 can remove this Avatar
02:47:02.080 image as we don't need it and instead I
02:47:05.520 can render the Avatar fullback which
02:47:07.720 will be session question mark. user
02:47:10.640 question mark. name right now we cannot
02:47:12.920 really see it as it's dark on dark but
02:47:15.439 we can give it a class name of text-
02:47:18.399 white and it looks like the text is too
02:47:20.880 long to fit into this small circle so to
02:47:23.319 fix it we'll actually have to just get
02:47:25.040 the credentials of the full name we can
02:47:27.439 do that easily by creating a new utility
02:47:30.160 function let's say export const get
02:47:34.880 initials is equal to a function that
02:47:37.120 takes in a name of a type string and
02:47:39.920 it'll also just return a string but
02:47:42.880 it'll be a modified string which only
02:47:44.640 contains the initials we can do it in
02:47:46.840 line by saying name that split
02:47:49.399 map each word get only the first
02:47:52.800 character of each word join those words
02:47:56.080 and make them uppercase and then slice
02:47:58.640 them to only two characters so I can say
02:48:01.240 do slice 02 in case some names are a bit
02:48:05.040 longer now we can head back here and we
02:48:07.359 can call this get initials function and
02:48:10.640 pass the full name into it and
02:48:12.600 typescript is complaining since we're
02:48:14.120 not certain that the name will be there
02:48:16.000 so if the name is not there we can just
02:48:17.920 provide High n for initials maybe but in
02:48:21.160 this case you can see I got a and then
02:48:23.160 straight line as I typed Adrian JS
02:48:25.399 Mastery for you it should be your
02:48:27.479 initials and to match it with the design
02:48:29.720 we could also maybe change the color of
02:48:31.760 the background instead of changing the
02:48:33.560 text color I'll do that by changing the
02:48:35.680 color to something like BG let's do
02:48:38.960 amber 100 I think this is a nice color
02:48:41.800 and there we go now it's popping up a
02:48:43.600 lot more in case you want to do
02:48:45.319 something else you could also type in
02:48:46.840 your first name here so that's going to
02:48:48.920 go outside of the Avatar like it's on
02:48:50.840 the design but I actually don't think
02:48:52.600 it's needed just keeping the Avatar
02:48:54.359 Photo is looking good and to finalize
02:48:56.600 the entire authentication flow we need a
02:48:59.200 log out function that way our users will
02:49:01.680 be able to log out and we'll be able to
02:49:03.479 test out the entire authentication
02:49:05.200 functionality once again to do that
02:49:07.479 let's actually implement the page that
02:49:09.319 we can get to when the user clicks on
02:49:11.600 their Avatar Photo that's the my profile
02:49:14.760 page so we can add it right here within
02:49:18.239 root create a new folder call it my
02:49:22.479 profile and then within it create a new
02:49:25.640 page.
02:49:27.800 TSX run rce immediately you should be
02:49:31.359 able to see an empty page appear and
02:49:33.319 there we can renter an empty react
02:49:36.560 fragment that'll include a form this
02:49:39.520 form will include only one button
02:49:41.960 that'll say log out now to keep this
02:49:44.560 page server rendered we can actually
02:49:46.600 utilize next js's and react act new
02:49:49.640 server forms by passing an action into
02:49:53.040 this form and declaring it like this
02:49:55.760 async callback
02:49:57.560 function and then giving it the use
02:50:00.000 server directive right here at the top
02:50:02.200 this will be called directly on the
02:50:03.760 server even though it's a click an
02:50:06.160 onclick Handler pretty cool
02:50:08.960 right so here we can await sign out
02:50:12.960 functionality coming from at SLO let's
02:50:16.399 also give it a class name equal to
02:50:19.000 margin bottom of 10 and below this form
02:50:21.560 we can render a book
02:50:23.840 list we can pass a title of something
02:50:26.479 like borrowed books and then for books
02:50:28.720 we can render all of our sample books
02:50:30.840 for now these sample books are coming
02:50:33.160 from constants but later on we'll be
02:50:35.920 able to fill this in with the real books
02:50:38.439 that the currently logged in user has
02:50:40.279 borrowed with that in mind let's close
02:50:42.399 all of the currently open files expand
02:50:44.720 our application check out how nice it
02:50:47.399 looks like on the homepage admire the 3D
02:50:49.960 book we have right here with this SVG
02:50:51.920 cover head over to our profile page and
02:50:55.160 log
02:50:56.000 out that works as we immediately get
02:50:58.600 redirected back to signin now if you
02:51:01.640 want to you can manually head over to
02:51:03.520 the home but you'll automatically be
02:51:05.600 redirected to sign in because there's no
02:51:07.960 active session you can head over to
02:51:10.399 create an account but in this case we
02:51:13.080 already have an account so let's try it
02:51:14.920 out by specifying your email and your
02:51:18.680 password and if you do that you'll be
02:51:21.080 able to go back to the homepage
02:51:23.600 immediately and yep I noticed that toast
02:51:26.080 component didn't look good even though
02:51:27.800 we didn't modify any of the original
02:51:29.439 shat CN code it remained completely
02:51:31.920 intact right here under toast components
02:51:35.000 so it's interesting that it doesn't have
02:51:36.520 the background what we could try is
02:51:38.439 simply reinstalling it so I'll head over
02:51:40.319 to the terminal and say MPX shcn at
02:51:43.000 latest add toast I'll use the Legacy per
02:51:46.560 depths it says the file or already
02:51:48.880 exists would you like to overwrite I'll
02:51:50.800 say yes use so already exists or write
02:51:54.200 that too toaster exist too yep do all of
02:51:57.439 it and now we have the latest versions
02:51:59.239 of the file so if I head back over to
02:52:01.000 our app one more time and try to log in
02:52:05.239 just to see whether it fixed
02:52:07.880 it it looks like it still hasn't so this
02:52:11.239 sometimes happens which means that we'll
02:52:12.680 have to manually modify the toast
02:52:14.720 component don't worry about that it's
02:52:17.040 not as scary as it seems we'll do that
02:52:18.960 later on once we start adding some other
02:52:21.000 cosmetic upgrades for now we have bigger
02:52:23.479 things to focus on finally the entire
02:52:26.479 homepage authentication and database
02:52:28.760 setup have been integrated so in the
02:52:31.040 next lesson I'll teach you how to make
02:52:32.760 your app even more scalable and
02:52:34.960 production
02:52:36.960 ready let me show you how to make your
02:52:39.399 app truly production ready and I really
02:52:42.560 do mean that if you check out the
02:52:44.000 credentials part of the OJs
02:52:46.160 documentation the library we use to
02:52:48.479 Implement authentication you'll see that
02:52:50.439 it says that by default the credentials
02:52:52.640 provider the one we used for emails and
02:52:54.760 passwords does not persist data in the
02:52:57.560 database however you can still create
02:53:00.120 and save data in your database which is
02:53:02.399 what we are doing you just have to
02:53:04.560 provide the necessary Logic for example
02:53:07.040 to encrypt passwords for that we used
02:53:10.399 btjs to add password reset functionality
02:53:13.840 you can do that using any kind of an
02:53:15.359 email provider and to add rate limiting
02:53:19.520 so what is this rate limiting it's not
02:53:21.720 something that I hear about often in web
02:53:23.520 development courses or tutorials even
02:53:25.680 though it's not often mentioned in entry
02:53:27.760 level tutorials it is something that is
02:53:30.000 implemented on almost every single
02:53:32.359 professional application they wouldn't
02:53:34.040 function without it if many users or one
02:53:37.120 malicious user tries to make too many
02:53:39.560 requests to a certain page or API
02:53:42.239 they'll get redirected to a 429 too many
02:53:45.439 requests client error response
02:53:47.720 indicating that the the client has sent
02:53:49.120 too many requests in a given amount of
02:53:50.960 time this mechanism of asking the client
02:53:53.279 to slow down the rate of requests is
02:53:55.520 commonly called raate limiting and it is
02:53:58.000 done to prevent DDOS attacks or the
02:54:01.520 denial of service attacks cyber attacks
02:54:04.399 where perpetrators seek to make a
02:54:06.319 machine or network unavailable to its
02:54:08.760 intended users by temporarily or
02:54:11.239 indefinitely disrupting Services by
02:54:14.120 making too many requests how dare they
02:54:17.359 right so today I'll teach you how to
02:54:19.720 implement rate limiting into your
02:54:21.520 applications to prevent DDOS attacks and
02:54:24.680 we'll do that and more using up stash a
02:54:27.920 serverless data platform that offers a
02:54:30.160 serverless reddis database which you can
02:54:32.760 use for free to cach your data make
02:54:35.439 efficient searches or even rate limit
02:54:37.840 certain devices they also offer vectors
02:54:40.479 for managing numeric representations of
02:54:42.640 objects such as images sounds and text
02:54:45.399 often used in AI applications to build
02:54:47.520 and train your own algorithms and the
02:54:49.640 third very important feature that up
02:54:51.399 stash provides are Q Stash's workflows
02:54:54.479 which allow you to schedule and run
02:54:56.120 workflows such as for onboarding users
02:54:58.800 like dual lingo or sending notifications
02:55:01.200 after an event has happened on your
02:55:02.720 website all of this is completely open-
02:55:06.000 source and used by many developers many
02:55:08.319 of you have already requested it so in
02:55:10.439 this course I decided to teach you how
02:55:12.479 to make the most of appstash reddis and
02:55:15.080 its other features if you haven't
02:55:16.600 already click the link down in the
02:55:17.920 description go ahead and do that and
02:55:20.000 create your account once you do that
02:55:21.760 you'll be redirected to your appstash
02:55:23.920 dashboard so let's go ahead and create a
02:55:26.399 new reddis database if you don't know
02:55:28.200 what reddis is it's a super fast
02:55:30.120 database used for caching real-time data
02:55:33.279 and managing temporary data so your
02:55:35.680 initial thought might be hey we're
02:55:37.720 already using postgress with neon why do
02:55:40.040 we have to add another database well
02:55:42.000 we'll only use it as a secondary
02:55:43.640 database to optimize our application and
02:55:46.239 if you're wondering what up stash rdit
02:55:47.920 is it's similar to what neon postgress
02:55:50.640 is a serverless version of redis that
02:55:53.239 automatically scales and is incredibly
02:55:55.520 easy to set up so let's give it a name
02:55:57.399 I'll call it a University Library you
02:55:59.960 can select your primary region and click
02:56:02.160 next as you can see it is completely
02:56:04.479 free and it'll forever remain free for
02:56:07.520 up to 10,000 daily commands so let's
02:56:10.040 click create and now we can copy up
02:56:12.560 Stash's endpoint and token we have them
02:56:15.080 right here under rest API so copy the
02:56:17.600 first one head over to your env.
02:56:21.479 loal and add it right here below you can
02:56:24.520 call it Upstore red isore URL and then
02:56:29.439 we can do the second one which you can
02:56:32.000 call up
02:56:33.800 stash reddis
02:56:37.279 token there we go so now our rest API
02:56:40.399 has been set up we can also head over to
02:56:42.720 our config to actually leverage those
02:56:44.960 two envs we can do it by adding up stash
02:56:48.000 right here here as a new
02:56:50.680 object and then we can attach the Redd
02:56:53.520 URL to be equal to process. env. Upstore
02:56:58.200 risor URL and we can also add a reddis
02:57:02.279 token which is equal to process. env.
02:57:05.760 Upstore risor
02:57:09.319 token now what we want to do is rate
02:57:12.439 limit the requests made to off pages so
02:57:15.479 people won't spam them we'll create a
02:57:17.359 rate limiter in a way that you can use
02:57:19.080 it in any server action or API route so
02:57:21.720 you can add a rate limit to anything and
02:57:24.080 completely secure your application to
02:57:26.000 achieve that we'll follow the
02:57:27.399 documentation from up stash just head
02:57:29.080 over to sdks rate limit getting started
02:57:32.200 the first step is to install the rate
02:57:34.720 limit package from up stash so I'll copy
02:57:37.239 the command and paste it right here now
02:57:40.680 we can add rate limiting to our endpoint
02:57:43.680 but before we do that you'll notice that
02:57:45.279 we'll also have to have another package
02:57:47.120 installed and that is is app stash rdis
02:57:49.439 so let's install that one too that'll be
02:57:51.840 mpm install appstash
02:57:55.720 RIS there we go it was super quick and
02:57:58.600 now we can copy this code block and add
02:58:00.600 it over to a new file within the lib
02:58:02.479 folder which I'll call rate limit.
02:58:06.479 TS and paste what you copied right here
02:58:09.520 now instead of using this redis from our
02:58:11.680 environment variables we can also set up
02:58:13.920 a new redis configuration instance by
02:58:16.760 heading over to our databases
02:58:19.479 folder and then creating a new file
02:58:22.080 called rus.
02:58:24.439 TS within here we can set up our
02:58:26.960 configuration it's pretty simple to do
02:58:29.160 we can just say con redus is equal to
02:58:32.120 new redus and this redus is coming from
02:58:35.120 appstash rdus and to it we can pass the
02:58:38.080 config by defining the URL equal to
02:58:41.040 config coming from lib
02:58:43.319 config env. up. rdus URL just like this
02:58:49.640 as well as passing the token equal to
02:58:52.439 config env.
02:58:55.080 up. rdis token finally now that we have
02:58:58.800 created this reddis instance we can
02:59:01.120 export default redis and now we can head
02:59:04.080 back over to our rate limit file I can
02:59:06.279 remove all of these comments because we
02:59:08.200 don't need this many and I will actually
02:59:10.319 explain everything that is happening
02:59:11.880 here there we go we won't be needing any
02:59:14.120 of this as of now what we will need is a
02:59:17.040 rate limit instance
02:59:18.680 which you can create by calling the new
02:59:20.479 rate limit from up stash rate limit and
02:59:23.279 then pass the configuration option to it
02:59:25.720 in this case redus will just
02:59:27.560 automatically come from reddis which is
02:59:30.439 the instance of the redus that we just
02:59:31.960 created so we can do it like this then
02:59:35.120 you pass the limiter and in this case
02:59:36.920 you can choose a sliding window or you
02:59:38.800 can do something like fixed window where
02:59:41.399 you can Define the number of requests
02:59:43.399 that can be made on a specific point in
02:59:45.840 time like maybe five tokens per one
02:59:49.200 minute if you hover over it you'll be
02:59:51.000 able to see that a param of token
02:59:53.279 actually specifies to how many requests
02:59:56.040 a user can make in each time window and
02:59:58.359 then you have a fixed time frame right
03:00:00.239 here and we can leave the rest of the
03:00:01.760 stuff as it is analytics the true and
03:00:04.000 the prefix of up stash rate limit
03:00:06.840 finally you can export default this rate
03:00:09.960 limit instance just so we can use it
03:00:11.760 later on when you're trying to rate
03:00:13.479 limit some parts of your code and we can
03:00:15.800 remove this comment as well as the UN
03:00:18.000 used import also rate limit is a valid
03:00:21.040 word so right here I can save it to the
03:00:23.200 dictionary so it's not yellow and so is
03:00:25.960 up stash so we can add it to web Storm's
03:00:28.359 dictionary so it always knows what up
03:00:30.439 stash is because we'll use it in many
03:00:32.439 upcoming applications let's rate limit
03:00:35.040 our first server action it'll be the
03:00:38.160 sign up function within o actions so
03:00:42.279 head over to lib actions
03:00:45.279 .ts and sign up with then here right at
03:00:49.160 the top we can get access to the current
03:00:51.439 user's IP address by saying const IP is
03:00:55.359 equal to wrap it in parenthesis and say
03:00:58.720 await headers which you can call like
03:01:01.399 this coming from next headers and then
03:01:04.279 call the dog get method on it to get the
03:01:06.960 X
03:01:08.160 forwarded for or you can use the default
03:01:12.000 IP address of
03:01:14.640 1270 01 so what we're doing here here is
03:01:18.399 getting the current IP address then we
03:01:21.000 can try to get something out of the
03:01:24.120 await call to rate limit this is the
03:01:28.399 instance of rate limit that we created
03:01:30.479 to which we need to pass the IP address
03:01:33.960 like this once again rate limit is
03:01:35.760 coming from rate limit TS
03:01:38.239 file oh and I just noticed I misspelled
03:01:40.760 it it was supposed to be rate limit so
03:01:43.399 let me rename it to rate limit. DS and
03:01:47.920 specifically we want to use the limit
03:01:49.680 method on the rate limit instance by
03:01:51.920 saying rate limit. limit this specific
03:01:55.040 IP address once we do that we'll get
03:01:58.279 back a success variable which will let
03:02:00.640 us know if we can go to that page
03:02:02.720 successfully if not so if not success
03:02:07.479 then we want to return a redirect coming
03:02:10.200 from nextjs pointing to forward SL2 fast
03:02:14.439 which is a new route we'll create as a
03:02:16.479 matter of fact let's add this same code
03:02:18.720 over to our signin function as well so
03:02:21.439 right here at the top just below the
03:02:23.359 destructuring of the parameters I'll add
03:02:25.960 this IP address and then we will
03:02:28.080 redirect to to fast if we have made too
03:02:30.560 many requests and now we can create a
03:02:32.800 new page for that to fast route by going
03:02:35.800 to app rout and create a new folder and
03:02:40.080 call it to fast and within it create a
03:02:43.960 new page. TSX within which we can run
03:02:48.000 rafc to quickly spin up a new component
03:02:51.000 and right now let's manually head over
03:02:52.920 to it by heading over to Local Host 3000
03:02:55.840 for
03:02:56.880 slash2
03:02:58.399 fast you should be able to see just an
03:03:01.040 empty page within it let's return a main
03:03:05.239 which is an HTML 5 semantic component
03:03:07.720 and let's give it a class name equal to
03:03:10.960 root-
03:03:12.640 container Flex Min dh- screen so it
03:03:17.239 takes the full height flex-all so the
03:03:20.080 elements appear one below another and
03:03:22.640 items Das Center and let's not forget to
03:03:25.080 justify Center as well within it we can
03:03:27.760 render an H1 that'll say something like
03:03:30.880 whoa slow down there
03:03:35.399 speedy of course you can put whatever
03:03:37.399 message You' like right here and let's
03:03:40.040 also give it a class name equal to font
03:03:43.960 db-
03:03:45.680 new text- 5X Cel font Das bold and text-
03:03:52.000 light-1
03:03:53.520 100 and now we can see this message
03:03:55.880 appear below it we can also render a P
03:03:58.560 tag and here you can put any kind of
03:04:01.120 text you'd like I'll copy it from one of
03:04:03.160 the r limit examples I found something
03:04:05.760 like looks like you've been a little too
03:04:07.600 eer we've put a temporary pause on your
03:04:10.080 excitement chill for a bit and try again
03:04:12.239 shortly we can also style it a bit by
03:04:14.399 giving it a class name of margin top 3
03:04:18.160 Max dw- excl text- Center and text-
03:04:24.080 light
03:04:25.160 400 oh and the reason why we have this
03:04:27.439 double background here is because I
03:04:29.279 accidentally put it in the root but
03:04:31.439 actually it should be going outside
03:04:33.399 because it's a standalone page that
03:04:35.359 doesn't need the roots layout it doesn't
03:04:37.840 need Navar so if I move it outside right
03:04:40.920 here and reload you'll notice that now
03:04:43.760 it looks just like an empty page saying
03:04:46.160 whoo slow down it looks something like
03:04:48.120 this on desktop so now to test whether
03:04:50.319 this is working or not let's head back
03:04:52.239 to the homepage and sign out remember if
03:04:55.479 you head over to rate limit you'll
03:04:57.359 notice that currently it's limiting at
03:04:59.800 five requests per minute maybe we can
03:05:02.399 change it to something like one requests
03:05:04.399 per minute so now if you try to sign in
03:05:06.960 for one time in one minute let's try to
03:05:10.640 do that it should let you through and it
03:05:13.160 does and if you log out and try to sign
03:05:15.720 in one more time
03:05:20.520 you'll be redirected to the two- fast
03:05:22.600 page which means that the rate limiting
03:05:24.760 has been successfully implemented keep
03:05:26.520 in mind that this doesn't mean that all
03:05:28.560 of the all of the users around the world
03:05:30.760 only one will be able to log in in one
03:05:32.760 minute and the others will be let here
03:05:34.800 no not at all what this means instead is
03:05:37.560 that every single user based on their IP
03:05:40.040 address will get this many tries so now
03:05:43.080 I'll change it back to five in 1 minute
03:05:45.439 which should be more than enough and if
03:05:47.399 I go go back and try to sign in one more
03:05:54.840 time you can see that it works perfectly
03:05:57.640 and there's one more thing I wanted to
03:05:58.840 share with you and that is actually an
03:06:00.800 example from up Stash's rate limit JS
03:06:03.600 repo under examples nextjs middleware if
03:06:06.520 you want to rate limit not just server
03:06:08.520 actions but also API routes like maybe
03:06:11.600 making calls to image kit API or any
03:06:14.120 other then you can simply copy and paste
03:06:17.000 this code right here and it'll just work
03:06:19.720 immediately you just need to add this
03:06:21.800 code to the same rate limit file we
03:06:24.080 created pretty amazing right to get this
03:06:26.439 much production ready functionality out
03:06:28.560 of this little code with that in mind we
03:06:30.960 looked into just a little bit of what up
03:06:33.560 stach offers to make her apps more
03:06:35.720 production ready later down the line
03:06:37.479 I'll also teach you how to create
03:06:38.840 workflows which will allow us to send
03:06:41.000 notifications to our users when their
03:06:43.120 book borrow request is due and much more
03:06:46.200 like implementing user on on boarding
03:06:47.920 flows which is exactly what we'll do in
03:06:50.080 the next lesson great work so
03:06:53.880 far so far so good we've created a
03:06:57.040 couple of pages like o homepage and even
03:07:00.359 profile implemented oth with postgress
03:07:03.000 next o and even rate limited them using
03:07:05.720 up stash but is that all there is to an
03:07:08.359 Enterprise ready application well not
03:07:11.120 really that's more so what you typically
03:07:13.000 see in tutorials within Enterprise level
03:07:15.319 applications many more things happen
03:07:17.720 behind the scenes have you ever tried
03:07:19.319 learning a new language on Dual lingo
03:07:21.359 that little language learning app which
03:07:23.000 gamifies the language learning
03:07:24.479 experience while many think that front
03:07:26.640 end is more important than backend and
03:07:28.600 vice versa what's actually more
03:07:30.520 important are your users the product you
03:07:33.120 offer to them and the user experience
03:07:35.239 they can get but your front end backend
03:07:37.800 and the entire app falls down the river
03:07:40.399 if no one actually uses it so the first
03:07:42.840 thing you have to do is make sure that
03:07:45.120 people come back and dualingo that best
03:07:49.239 no this is not a sponsor but I'm so
03:07:51.479 excited that you'll get a chance to
03:07:53.279 replicate functionalities from the best
03:07:55.120 in the industry dualingo tracks if the
03:07:57.479 user has not logged in for a specific
03:07:59.600 number of days and if that happens it
03:08:02.160 sends a push notification or an email
03:08:04.439 saying hey it's time to learn and
03:08:06.800 sometimes they make it a bit passive
03:08:08.319 aggressive but it's not just that many
03:08:10.960 ride sharing applications or even food
03:08:13.359 delivery applications like Uber Eats
03:08:15.640 will send you those emails telling you
03:08:17.640 to eat more and order some food heck
03:08:20.279 even e-commerce or course websites will
03:08:22.560 do the same saying that you forgot
03:08:24.279 something in your cart so make sure to
03:08:26.040 buy it I do it as well don't get me
03:08:27.920 wrong but only to get you to learn so
03:08:30.439 how do these developers do that well
03:08:32.600 it's using workflows in the code base
03:08:35.600 you have to set up some kind of a
03:08:37.200 workflow to check if the user has left
03:08:39.600 anything in the card or if they have
03:08:41.239 locked in recently or not and then
03:08:43.600 depending on that information you can
03:08:45.319 create certain workflows like for
03:08:47.160 example example if a user has not logged
03:08:49.160 in for 3 days send an email or an SMS
03:08:52.080 notifying them to check out the website
03:08:54.520 or if a user has left something in the
03:08:56.239 card send an email or SMS telling them
03:08:58.640 to rethink their decision to buy but
03:09:00.680 workflows can do so many more things
03:09:03.720 let's say in our example a user borrowed
03:09:06.120 a book and is close to the return date
03:09:08.920 we can set up a workflow notifying them
03:09:10.840 to return the book before the due date
03:09:13.239 otherwise they'll be charged and yes
03:09:15.760 this is the same functionality that
03:09:17.560 Netflix and other services use to alert
03:09:20.200 you about annual or automatic charges
03:09:22.600 and that's exactly what you learn today
03:09:24.640 using up stash workflows allowing you to
03:09:27.239 schedule events and Trigger them on
03:09:29.000 specific days or situations and much
03:09:31.399 more so head back over to your up stash
03:09:33.680 re platform and navigate over to qash at
03:09:37.080 the top then copy the qash URL and qash
03:09:40.800 token and add them over to your envs and
03:09:44.680 let's not forget to add them to our
03:09:46.520 config they'll also go under up stash
03:09:49.359 but this will be a qash URL equal to
03:09:52.920 process. env. qash URL as well as a qash
03:09:58.960 token which is equal to process. env.
03:10:03.479 qore
03:10:05.520 token and as with up stash looks like
03:10:08.600 webstorm doesn't understand what Q stash
03:10:11.000 means so let's go ahead and add it to
03:10:12.880 the dictionary because we'll be using it
03:10:15.160 much more often in the future there we
03:10:17.160 go go so now that is done and we can
03:10:20.000 head up and navigate over to workflows
03:10:23.239 letting you know that upst stash
03:10:24.680 workflows let you write durable reliable
03:10:27.800 and performant serverless functions so
03:10:30.760 let's head over to Quick starts for
03:10:33.520 nextjs before we set it up for nextjs I
03:10:36.279 want to head over to just general
03:10:37.840 getting started to tell you a bit more
03:10:39.720 about what we'll actually do and what
03:10:41.560 are the key features of up stash
03:10:43.160 workflows one of the key features is
03:10:45.520 failure resilience which means that if
03:10:48.279 your platform experiences a temporary
03:10:50.600 outage your workflow can pick up right
03:10:53.080 where it left off also you have long
03:10:55.600 running executions which means that when
03:10:57.920 you run complex AI models or video
03:11:00.359 processing tools even on serverless
03:11:02.359 platforms with strict time limits
03:11:04.160 they'll be executed properly you can
03:11:06.399 create events with wait or notify
03:11:08.880 mechanisms that wait for external events
03:11:11.560 before proceeding for use cases where
03:11:13.800 you're waiting for a user input like
03:11:15.560 clicking on a confirmation email or even
03:11:18.000 handling asynchronous notifications from
03:11:19.960 external systems you can also schedule
03:11:22.120 jobs at specific intervals with support
03:11:24.800 for Chron Expressions great for
03:11:26.760 recurring tasks like reminders or
03:11:28.800 regular reports and of course there's so
03:11:30.880 much more but instead of simply telling
03:11:32.720 you about all these features let's
03:11:34.560 actually explore them in practice by
03:11:36.800 heading over to the nextjs quick start
03:11:39.200 here we can follow the steps to get it
03:11:40.960 up and running first we have to install
03:11:43.080 up stash workflow so back in the code
03:11:45.680 simply add this command
03:11:48.359 and press enter step two is to configure
03:11:51.120 your envs which we have already done and
03:11:54.080 step three is to configure a workflow
03:11:57.080 endpoint a workflow endpoint allows you
03:11:59.720 to define a set of steps that together
03:12:02.479 make up a workflow each step contains a
03:12:05.800 piece of business logic that is
03:12:07.399 automatically retried on failure with
03:12:09.680 easy monitoring through the visual
03:12:11.840 dashboard to define a workflow endpoint
03:12:14.319 in nextjs navigate into the nextjs app
03:12:17.399 API directory and create a new folder
03:12:19.800 for example called workflow and then
03:12:21.760 create a new route within it here we
03:12:24.160 have a couple of examples there's a
03:12:25.720 minimal one with the request object and
03:12:28.120 more for now we won't use any of these
03:12:30.439 examples instead ight provides a
03:12:33.080 complete example of a customer on
03:12:35.479 boarding flow it registers a new user
03:12:38.000 sends welcome emails and periodically
03:12:40.160 checks and responds to the user activity
03:12:41.920 state so this exact workflow will
03:12:44.359 register a new user send them a welcome
03:12:46.680 email wait for a certain time
03:12:49.080 periodically check the user State and
03:12:51.000 then send appropriate emails based on
03:12:53.080 the user's activity so let's go ahead
03:12:54.840 and copy this example and let's create a
03:12:57.319 new route we can do that within app API
03:13:02.040 we can create a new folder called
03:13:06.520 workflows and then within workflows we
03:13:08.840 can create another folder called
03:13:13.960 onboarding and then within onboarding we
03:13:16.319 can create a new route. TS file within
03:13:19.319 which we can paste this code if you
03:13:21.359 scroll down right here you'll see a
03:13:23.000 complete code breakdown so we can
03:13:24.880 actually understand what is happening
03:13:27.040 line by line so let's actually go
03:13:29.720 through it together first we send a
03:13:31.720 newly signed up user a welcome email by
03:13:34.359 saying context. run step name is new
03:13:37.040 signup and then the function will simply
03:13:39.000 call the send email function with a
03:13:41.359 message of Welcome to the platform and
03:13:43.520 then here we can get the entire email
03:13:45.680 after that we have the initial waiting
03:13:47.720 period to leave the user time to
03:13:49.920 interact with their platform so for that
03:13:52.120 reason we use context. sleep and here
03:13:54.720 you can Define for how long you want to
03:13:56.640 wait in this case it is 3
03:13:59.200 days step three is a periodic check so
03:14:03.120 we're saying while true which means that
03:14:05.239 we enter an infinite Loop and then
03:14:07.439 periodically which means every month we
03:14:10.000 check the users's engagement with your
03:14:11.920 platform and send appropriate emails so
03:14:14.600 right here we get the user State and
03:14:16.720 then if state is not active we send an
03:14:19.160 email to non-active users but if they
03:14:21.560 are active we send them a newsletter and
03:14:24.000 finally we can go back to sleep for 1
03:14:26.279 month pretty cool right and then you
03:14:28.000 have these additional functions that we
03:14:29.640 used above that allow you to specify
03:14:31.600 what you want to do like send email send
03:14:33.680 an SMS or literally do whatever else we
03:14:36.600 already discussed some of the key
03:14:37.880 features like non-blocking sleep and
03:14:40.399 long running tasks another thing we need
03:14:42.560 to make this happen is to create a
03:14:44.319 workflow client because right now we
03:14:46.359 only have a a workflow endpoint so let's
03:14:49.680 actually head over to lib and then
03:14:52.319 within lib like we have rate limit we
03:14:54.800 can also create a new client for the
03:14:56.640 workflow by calling it workflow. TS and
03:15:00.359 within it we can export const workflow
03:15:04.000 client by making it equal to a new
03:15:07.600 workflow client like this and of course
03:15:10.520 we have to import that right here at the
03:15:12.399 top by saying
03:15:14.239 import client as workflow client and
03:15:19.439 this is coming from at
03:15:21.720 upwork flow to it we have to pass the
03:15:24.439 base URL which will be equal to our
03:15:27.199 config coming from at libconfig
03:15:32.479 env. upst doq URL and then we also need
03:15:38.120 a token which is going to be a config
03:15:41.199 env. up. qash toen looks like it's
03:15:45.399 complaining a bit about the token saying
03:15:47.359 that it is possibly undefined I think we
03:15:49.439 need to provide exclamation marks at the
03:15:51.160 end letting it know that it'll actually
03:15:53.600 be there always because we know that we
03:15:56.000 have added it to our env. loal there we
03:15:59.680 go with that the error is gone and we
03:16:02.359 are now exporting our workflow client so
03:16:05.080 now we have both the endpoint as well as
03:16:07.520 the workflow client and we are ready to
03:16:09.479 run it so let me get back to the next GS
03:16:12.080 quick start and we can continue where we
03:16:13.800 left off which is on step number four
03:16:17.000 which says that up stash workflow is
03:16:18.960 powered by qash and qash needs a
03:16:21.880 publicly accessible URL to run your
03:16:23.960 workflows if you want to you can set it
03:16:26.080 up for your local development as well
03:16:27.840 but in this case we'll just deploy our
03:16:29.560 application to get a live URL here it
03:16:32.399 says that we can set up an environment
03:16:33.800 variable but this doesn't need to be set
03:16:35.920 in production so for now we'll skip it
03:16:38.160 and then here it explains how we can set
03:16:39.760 up some of the base URL and then finally
03:16:42.199 triggered the workflow and then we
03:16:43.840 should be able to see it right here
03:16:45.319 within our qash dashboard
03:16:47.439 so let's actually deploy our project to
03:16:49.560 verell First head over to your env. loal
03:16:53.040 and make sure that you have all of the
03:16:54.640 keys right here three from image kit
03:16:57.640 then we have our next public API
03:16:59.279 endpoint which we'll have to change in
03:17:00.880 production we have two for databases two
03:17:04.239 for up stash and two for qash oh and
03:17:07.359 this is the OD secret generated by OJs
03:17:10.239 once you make sure that you have all of
03:17:11.680 these you also want to make sure that
03:17:13.520 there's no typescript or ES length
03:17:15.760 errors because some times they might
03:17:17.760 block some builds in this course I try
03:17:20.199 to be super careful not to cause any
03:17:22.439 issues so if you look into most files
03:17:24.560 you'll see that everything is topnotch
03:17:28.040 no errors whatsoever but it is possible
03:17:31.239 that some errors sneak through and we
03:17:33.439 don't want those little warnings to
03:17:35.199 block our builds so for that reason we
03:17:37.600 can head over into our next.
03:17:45.840 config.sys configuration options one
03:17:48.600 will be called typescript and it'll be
03:17:51.560 an object containing an ignore build
03:17:54.239 errors is set to True property and then
03:17:57.399 we'll also do another one for ES lent
03:17:59.760 where we'll say ignore during builds and
03:18:03.560 we'll set that to true as well just to
03:18:06.000 make sure that everything goes right and
03:18:08.000 now is the time to add it to your GitHub
03:18:10.000 repo so just go ahead and create a new
03:18:13.040 repository I'll say
03:18:15.319 University Library
03:18:17.479 JSM make it public and click
03:18:22.120 create after that you want to follow the
03:18:24.279 steps to push the repo to GitHub so we
03:18:27.279 can do that by saying get in it g add do
03:18:31.439 git commit DM initial
03:18:34.880 commit then you want to switch over to
03:18:37.680 the main
03:18:38.960 branch add a remote
03:18:41.600 origin and finally push to origin Main
03:18:45.520 in a matter of seconds you'll you see
03:18:47.040 your code appear right here on GitHub
03:18:49.600 once you do that head over to ver.com
03:18:53.080 and click plus right here and add a new
03:18:56.680 project you should see it right here at
03:18:58.560 the top University Library JSM and just
03:19:01.199 click import right here It'll recognize
03:19:04.160 that it's a nextjs project so everything
03:19:06.080 will be done for you one thing that you
03:19:08.279 have to do manually is modify the
03:19:10.160 environment
03:19:11.439 variables so go back to your code and
03:19:14.120 head over into EnV local copy all of the
03:19:17.160 variables and simply paste them right
03:19:18.920 here into the input this will populate
03:19:21.160 all of them and for now we don't have to
03:19:23.439 change anything in here we're going to
03:19:25.199 leave this API endpoint to Local Host
03:19:27.399 3000 but as soon as our app gets
03:19:29.560 deployed we'll also add another
03:19:31.359 production endpoint so for now let's
03:19:33.560 click deploy and let's see what happens
03:19:36.239 it looks like in this case I got an
03:19:37.880 immediate error and this was the issue
03:19:40.000 that I was experiencing with es lint
03:19:42.120 before most likely you don't have this
03:19:44.319 issue and your build should run
03:19:46.160 successfully
03:19:47.239 but on my end I think the quickest fix
03:19:49.920 is to head back over to my
03:19:52.760 projects head over to
03:19:54.960 settings and then head over to right
03:19:57.880 here where we have build and development
03:19:59.720 settings and under install command I can
03:20:02.720 override just the regular mpm install
03:20:05.600 and append Legacy perer depths to it
03:20:09.199 that worked in development mode so it
03:20:11.680 might work here as well after that I'll
03:20:14.439 just re-trigger the deployment
03:20:17.120 let's see how that goes it's building
03:20:19.319 and it is past 5 seconds so that's
03:20:22.399 already a good sign let's see where it
03:20:24.040 is in a minute or two and there we go in
03:20:26.520 about a minute our website is deployed
03:20:28.920 so let's head over back to our project
03:20:31.199 and click visit right here at the top
03:20:33.359 right this should lead you to your
03:20:34.760 deployed
03:20:36.160 URL now copy that URL and then head over
03:20:39.520 to settings environment variables and
03:20:42.520 add a new environment variable called
03:20:45.000 nextore public underscore prod as in
03:20:48.880 production underscore API underscore
03:20:51.680 endpoint and now you can paste the full
03:20:54.040 URL of your app but of course remove the
03:20:56.640 sign in at the end and save it once you
03:21:00.359 save environment variables you'll have
03:21:02.160 to redeploy the app oh and let's not
03:21:04.600 forget to head over to our config
03:21:07.000 because we'll need to use those envs
03:21:08.720 right here as well so alongside the API
03:21:11.279 endpoint I'll also add a prod API
03:21:15.199 endpoint
03:21:17.080 which will be equal to process.
03:21:19.279 env. next public prod API end point
03:21:25.160 which is only accessible in
03:21:27.239 production we'll use that one very soon
03:21:30.000 when sending out our workflows with that
03:21:32.080 in mind now that our AB has been
03:21:33.840 deployed and we have all of the
03:21:35.520 necessary production envs we are ready
03:21:38.160 to finalize our workflows and make them
03:21:40.760 send out emails to our newly onboarded
03:21:43.560 users so let's do that in the next
03:21:46.000 lesson
03:21:48.800 you see this workflow endpoint that we
03:21:50.560 created in the last lesson one talking
03:21:53.080 about sending emails when a new user
03:21:55.399 signs up and then we wait three days and
03:21:57.600 then we either start sending them a
03:21:59.279 newsletter or we email the non-active
03:22:01.880 users well this is all about sending
03:22:05.640 emails and even though qash allows us to
03:22:08.880 trigger these workflows we have to use
03:22:11.239 another tool to actually send out the
03:22:13.439 emails because it doesn't have to be an
03:22:15.760 email it can can be an SMS it can be an
03:22:18.160 inapp notification it can be anything
03:22:20.960 but in this case I think the most common
03:22:22.800 solution is to send out emails so for
03:22:25.279 that we have to choose an email provider
03:22:27.359 in this course I'll teach you how to use
03:22:28.880 resent it is a new email API for
03:22:31.359 developers that a lot of great companies
03:22:33.760 like live blocks and even Warner
03:22:35.600 Brothers use and it is also something
03:22:37.560 that I have personally used on JS
03:22:39.560 mastery. proo platform this is not
03:22:41.600 sponsored just wanted to cover this tool
03:22:43.600 as it's used on many production
03:22:45.000 applications and what see even better is
03:22:47.160 that you can completely write your email
03:22:49.000 templates using react components that is
03:22:51.800 not possible with simpler tools like
03:22:53.640 email JS that I typically teach in my
03:22:55.680 other courses so if you want to have
03:22:57.439 completely custom designs you can
03:22:59.319 achieve that now I do want to quickly
03:23:01.239 mention that you can totally use email
03:23:03.640 JS to implement email sending in this
03:23:05.880 application as well and I would even
03:23:07.920 encourage it if you're looking for
03:23:09.199 something simple to just get the job
03:23:11.000 done the reason why I'm providing this
03:23:12.640 as an alternative is because recent will
03:23:15.199 ask you for a live domain through which
03:23:17.920 it wants to send emails and if you don't
03:23:20.439 have any kind of a domain name yet
03:23:22.120 you'll have to get one so I just wanted
03:23:24.239 to provide you with an alternative in
03:23:26.040 case you don't already have a domain
03:23:27.439 name or you don't want to buy a new one
03:23:29.319 for this project but in this case I will
03:23:31.600 proceed with recent so click the recent
03:23:33.920 link down in the description to be able
03:23:35.600 to follow along and see exactly what I'm
03:23:37.520 seeing and then click get started next
03:23:40.199 create an
03:23:41.720 account head over to the API Keys
03:23:45.080 section and it It'll ask you to create a
03:23:47.399 new API key you can enter your key name
03:23:49.760 such as University Library give it full
03:23:52.880 permissions and then add it as soon as
03:23:55.479 you do that you'll get your API key
03:23:57.479 which you need to copy and add it to
03:23:59.600 your env. loal so right here I'll do
03:24:03.279 something like
03:24:04.920 resend
03:24:06.680 underscore token and make it equal to
03:24:09.279 the one that I just copied by the way I
03:24:11.880 am pretty sure that this is the highest
03:24:13.680 amount of environment variables we've so
03:24:15.600 far had in in a YouTube course so if
03:24:17.920 anything that shows how large the app is
03:24:20.479 once you've created your API key you
03:24:22.880 need to head over to domains and add a
03:24:25.319 new domain now this is the point where
03:24:27.760 you'll need your own custom domain and
03:24:30.279 this can be the same domain that you're
03:24:31.880 using for your portfolio so if you've
03:24:34.040 built a portfolio watching any of my
03:24:35.920 previous videos before you most likely
03:24:38.120 already have it but if you don't like in
03:24:41.040 my portfolio videos I would recommend
03:24:43.080 you to buy a cheap domain name from
03:24:44.800 hostinger if you don't have it already
03:24:46.680 for your portfolio it'll be a great way
03:24:48.560 to add a bit more reputation to it and
03:24:50.840 if you do have it you can then use that
03:24:52.680 one or just grab a new one and then swap
03:24:54.960 it over I don't even think you'll need
03:24:56.399 hosting in this case you can just head
03:24:57.920 over to domains and choose the domain
03:24:59.880 name you'd like is your typical domain
03:25:02.399 name but Pro and XYZ domains can be
03:25:05.399 picked up at like two bucks for the
03:25:06.920 first year so enter your domain name
03:25:08.840 right here most likely it's going to be
03:25:10.840 something like your first and last name
03:25:13.120 in this case I'll go with Adrien JS
03:25:15.479 mastery
03:25:17.920 and registered for the first year oh I
03:25:19.960 can see honey coupons found but we're no
03:25:22.399 longer using honey after what has
03:25:24.080 happened so I got to quickly uninstall
03:25:26.439 that extension very soon but in this
03:25:28.560 case we don't even need a coupon code so
03:25:30.800 just go ahead and click continue and
03:25:33.000 then create your
03:25:34.479 account once you get your domain it'll
03:25:36.840 be registered and then you'll get an
03:25:38.720 email which you need to verify it and
03:25:40.920 then you can copy it head back over to
03:25:43.160 domains and add it but make sure to add
03:25:45.880 something in front of it like hello do
03:25:49.439 and then your domain name.com this will
03:25:52.080 make it into a subdomain which is a
03:25:53.880 recommended practice when adding domains
03:25:55.960 for sending emails typically companies
03:25:57.960 have something like hello or marketing
03:26:00.479 or whatever else it is so in this case
03:26:02.840 I'll use hello. Adrian JSM mastery.com
03:26:05.479 and I'll click add then you'll be given
03:26:08.279 a couple of DNS records which you want
03:26:10.359 to copy over to your email provider so
03:26:13.080 let's do that right away by heading over
03:26:14.840 to DNS and then you can add all of these
03:26:16.960 DNS records let's do them one by one
03:26:19.720 I'll first add an MX record with a host
03:26:23.160 or name of send. hello and this specific
03:26:26.000 value priority of 10 and TTL of Auto I
03:26:29.279 think you can leave it as it is and we
03:26:31.120 can repeat the procedure with additional
03:26:33.399 records I think the second one is a txt
03:26:35.840 record with a name of send hello and the
03:26:39.160 following
03:26:40.359 value we can do the same thing with the
03:26:42.640 third one which is also a txt with this
03:26:45.960 name name and this value and finally we
03:26:49.479 have one more DeMark record which is
03:26:51.760 also a txt with the name ofor dmark and
03:26:55.880 the following value once you add all of
03:26:58.199 these records you will have to wait some
03:27:00.479 time as these records can take up to a
03:27:02.640 couple of hours to fully propagate but
03:27:05.520 typically it happens within minutes so
03:27:07.880 let's click verify DNS records and you
03:27:10.399 can see that for me it still says
03:27:11.760 pending and verifying two have been
03:27:14.000 verified immediately as I was speaking
03:27:16.840 and hopefully the third one will too and
03:27:19.120 there we go all of them have been
03:27:20.920 successfully verified well done now
03:27:23.760 you're ready to start building and
03:27:25.239 sending out emails with this domain now
03:27:27.640 it's pretty amazing that appstash
03:27:29.479 already has an integration with
03:27:31.960 resent which allows you to very quickly
03:27:34.319 send emails using resent streamlining
03:27:36.600 email delivery in your applications so
03:27:38.680 let's go ahead and follow it to set up
03:27:40.439 some basic email sending you only need
03:27:42.800 to use publish Json method with the
03:27:44.840 recent provider and then ensure your Q
03:27:47.000 stash token and resent token are set for
03:27:49.319 authentication so let's copy this piece
03:27:51.239 of code and as it says in the body field
03:27:54.160 specify the parameters supported by
03:27:56.000 recent email API such as from to subject
03:27:59.239 and HTML you can also send batch emails
03:28:02.359 to multiple
03:28:03.760 people and that's more or less it so let
03:28:06.640 me show you how we can use it together
03:28:08.760 so let's head over to our workflow. TS
03:28:12.080 file the one that we created before
03:28:13.880 where we have set up a workflow client
03:28:16.120 and paste the block of code that we just
03:28:18.319 copied there we get another client which
03:28:21.359 is the up stash qash client so we have
03:28:24.960 both we have both the workflow client as
03:28:27.479 well as the Q stash client and the
03:28:29.399 resent and we set it up right here below
03:28:31.720 just to make it make a bit more sense we
03:28:33.399 can rename this Q stash client to Q
03:28:37.439 stash client just to follow a great
03:28:41.199 practice and then we can rename it here
03:28:44.040 and then we can Define it as Q stack
03:28:46.399 client just since we have both the
03:28:48.120 workflow client and the Q stash client
03:28:49.960 in the same page and then it requires us
03:28:52.359 to pass a q stash token so let's do just
03:28:55.720 that saying that the token is equal to
03:28:58.520 config coming from our lip config env.
03:29:02.600 up stash do qash token there we go so
03:29:07.279 now we're defining both after that we
03:29:09.279 want to create a functionality to send
03:29:11.120 out an email so let's say export const
03:29:14.680 send email is equal to an async function
03:29:18.720 where we take in some parameters like
03:29:21.040 the email itself the subject and the
03:29:23.880 message and then we can return something
03:29:26.000 and that something will of course be
03:29:27.560 this block of code that we copied from
03:29:29.520 qash documentation with their
03:29:31.120 integration with recent we can rename
03:29:33.120 this client to qash client and we have
03:29:36.160 to provide the types for email subject
03:29:38.680 and the message all three of which will
03:29:41.279 be strings so we can say email is a type
03:29:43.760 of string subject is a type of Str
03:29:46.479 string and the message itself is also a
03:29:50.080 type of string great so now we can use
03:29:52.239 those parameters which will pass into
03:29:54.120 the function to compose our email we can
03:29:57.520 do that by saying API name is email with
03:30:00.319 a provider as resent and here we have to
03:30:03.560 add the recent token which I believe we
03:30:06.000 have already added to our environment
03:30:07.439 variables so we can say config Dov Dot
03:30:11.880 and this will now be I believe recent
03:30:14.520 let's see have I added it
03:30:17.000 I'll go to config oh and it looks like
03:30:19.479 we're missing the recent token so I'll
03:30:21.560 quickly head back over to recent and go
03:30:24.319 to API keys and try to copy the token
03:30:27.199 from here but it looks like it's not
03:30:28.840 actually allowing me to recopy it so in
03:30:31.439 case you didn't pasted before you'll
03:30:33.080 have to remove this API Key by saying
03:30:35.880 delete and then we'll just recreate a
03:30:38.120 new API key called
03:30:40.800 University library and maybe even for
03:30:43.840 the better because now we actually have
03:30:45.520 created a new domain so it can sync the
03:30:47.560 two and now yeah you can only see this
03:30:49.760 key once store it safely so go ahead and
03:30:52.040 copy it and add it right here as recent
03:30:57.080 token as process. env. rendor token and
03:31:02.040 then head over to your env. loal oh
03:31:05.960 silly me looks like I added the recent
03:31:08.199 token before to envs but not to the
03:31:10.479 config either way now we have a new
03:31:12.880 token right here so you can simply
03:31:14.520 override the current one
03:31:17.080 and with that back in the workflow we
03:31:19.080 can now say config env.
03:31:22.640 resend
03:31:24.960 token and we can start composing the
03:31:27.520 body of our email so we can say from JSM
03:31:32.000 or JS Mastery or you can put your name
03:31:34.399 here and then you can put your current
03:31:36.840 domain name which in my case is hello.
03:31:40.720 Adrian JS mastery.com we're going to
03:31:43.760 deliver it to the email that we pass
03:31:46.319 through pams the subject will be the
03:31:48.840 subject we pass through perams allowing
03:31:50.760 us to modify it and then the HTML will
03:31:53.560 actually be equal to the message that we
03:31:56.279 pass through params as well so it is
03:31:58.160 fully customizable and believe it or not
03:32:00.560 that's all there is to this setup so
03:32:03.319 before we go ahead and modify the APA
03:32:05.160 route to send out emails based on
03:32:07.439 conditions we want to have a welcome
03:32:09.160 email when a user first signs up and
03:32:11.600 another email saying something like hey
03:32:14.080 how's it going if the user hasn't been
03:32:16.120 active for the last 3 days so we have to
03:32:18.319 prepare Logic for these conditions like
03:32:21.000 how and when we'll trigger it and if you
03:32:23.479 remember by heading back into schema of
03:32:26.239 our database we have added a last
03:32:28.920 activity date right here which stores
03:32:31.279 the last activity date of the user if we
03:32:34.120 keep updating this value whenever our
03:32:36.160 user visits our platform or maybe at
03:32:38.479 least once per day we then know when
03:32:40.800 this user was last active now as a good
03:32:43.080 react developer you might think of using
03:32:45.239 use effect and making a request to
03:32:47.199 update that field as soon as user opens
03:32:49.319 the application or if you're an okay
03:32:51.279 nextjs developer you might want to do it
03:32:53.359 on the server side to avoid writing lots
03:32:55.720 of code and avoid loading on client side
03:32:58.960 but if you're an excellent nextjs
03:33:00.680 developer who went through the ultimate
03:33:02.439 nextjs course on JS mastery. proo then
03:33:05.720 you'll want to use the latest nextjs
03:33:07.640 features like next after allowing to
03:33:11.239 schedule work to be executed after a
03:33:13.479 response is finished this is useful for
03:33:16.000 tasks and other side effects that should
03:33:17.920 not block the response such as logging
03:33:20.080 and analytics this way you won't be
03:33:22.640 blocking the UI and you can perform
03:33:24.520 tasks in the background with less code
03:33:26.720 which gives you the best of both worlds
03:33:29.359 perfect use case for this little feature
03:33:31.560 so let's head over to our root layout
03:33:34.760 and implement the logic to update the
03:33:36.680 user's last activity I'll do it right
03:33:38.680 here after we make a check if they're
03:33:40.199 signed in and say after here you can
03:33:43.279 define a callback function that happens
03:33:46.479 after the page loads and then within it
03:33:48.880 you can check if there is no session
03:33:51.520 question mark. user question mark. ID
03:33:54.880 you simply exit out of it this is just
03:33:57.080 an additional check even though it might
03:33:58.800 not be necessary because we're already
03:34:00.640 redirecting to sign in if the session
03:34:02.720 doesn't exist of course don't forget to
03:34:05.800 actually import after coming from next
03:34:08.840 server and then if a user does exist we
03:34:11.399 simply want to update our database by
03:34:13.520 saying await DB coming from from
03:34:15.840 database
03:34:17.040 drizzle. update users which is the
03:34:20.800 schema for the
03:34:22.239 users and then call the dot set last
03:34:25.560 activity date and set it to New
03:34:29.840 date. 2 ISO string. slice and you want
03:34:34.120 to slice from 0 to 10 what the slice
03:34:37.239 does is it simply takes the day month
03:34:40.120 and the year without the time we don't
03:34:42.239 necessarily care about the time in this
03:34:43.960 case and finally
03:34:46.160 we can use the wear method where we
03:34:49.040 check for the equality for the user ID
03:34:52.160 so we only want to update the last
03:34:54.040 activity date for the user that is
03:34:56.080 currently logged in so we'll say EQ
03:34:58.840 user. ID is session user ID like so and
03:35:03.720 this was supposed to be users right here
03:35:05.880 and the EQ is of course coming from
03:35:09.000 drizzle
03:35:10.359 orm great believe it or not that's it
03:35:13.680 that's everything we need to periodic
03:35:16.040 update the users's last activity date
03:35:18.479 when they revisit the website now you
03:35:20.560 know that we're all about production
03:35:22.279 ready applications and things that
03:35:24.319 you're not going to see in typical
03:35:25.720 courses so One update that we can do to
03:35:28.720 this is not update it always like every
03:35:31.520 time that a user does something and only
03:35:34.160 do it once a day okay so one mutation
03:35:37.199 per day let's do that by writing a
03:35:40.199 comment of something like get the
03:35:43.279 user and see if the last activity date
03:35:48.160 is today and in this case since I'm
03:35:51.239 using copilot or you can use any other
03:35:53.720 AI autofill it should already recommend
03:35:56.000 some things that you can do like const
03:35:58.239 user is equal to await DB where we want
03:36:01.840 to select from users so do from
03:36:07.479 users where user ID is equal to session
03:36:11.760 ID and we can even limit it to one by
03:36:14.720 saying Li limit to
03:36:17.680 one pretty cool right and then you can
03:36:21.120 write an if statement and checking if
03:36:24.279 user
03:36:26.120 z. last activity
03:36:28.479 date is triple equal to new date to ISO
03:36:32.000 string. slice then simply return meaning
03:36:35.160 exit out of the function and don't
03:36:37.319 perform the update so now this is even
03:36:39.760 more performant but not that it really
03:36:41.760 matters because this after ensures that
03:36:43.800 it never blocks the UI anyway so it will
03:36:45.960 not slow down your application but it
03:36:48.199 will knock down the number of mutation
03:36:50.560 calls to your database so with that in
03:36:52.399 mind let's modify the API workflow route
03:36:55.040 to include these conditions of checking
03:36:57.000 the last activity date and sending
03:36:58.920 emails according to that head over to
03:37:01.600 your
03:37:02.600 onboarding route. TS and add the logic
03:37:06.120 for sending emails according to those
03:37:08.160 conditions we can have two types of
03:37:09.960 users type user state will be either
03:37:14.239 nonactive or or it'll be
03:37:18.040 active and then for the initial data in
03:37:20.840 this case we get both the email as well
03:37:23.239 as the full name of a type string we can
03:37:26.920 also Define some constants at the top
03:37:29.800 such as different intervals in
03:37:31.600 milliseconds just so we can more easily
03:37:33.920 use them later on without using a
03:37:36.120 programming an pattern of magic numbers
03:37:39.199 like what do these numbers mean right
03:37:40.560 here I don't know it's much easier to
03:37:43.000 Define it as a variable something like
03:37:45.560 one day in Ms milliseconds and then make
03:37:50.279 it equal to 60 * 60 times I think the
03:37:55.199 first number is the number of hours so
03:37:57.439 24 hours time 60 seconds time 60 minutes
03:38:01.600 and then times 1,000 this should be one
03:38:04.640 day in milliseconds we can also create
03:38:07.080 some other intervals like maybe three
03:38:10.439 days Days in milliseconds which is going
03:38:14.160 to be three times and then we can simply
03:38:17.120 use one day in milliseconds much easier
03:38:19.560 right there we go and let's also do 30
03:38:22.279 days where we can simply say 30 times 1
03:38:25.840 day in milliseconds after that we want
03:38:28.040 to create a function that will check the
03:38:29.840 last activity State and derive if a user
03:38:32.479 is active or not during that period in
03:38:34.960 time so let me say const get user state
03:38:39.399 is equal to an async function that
03:38:41.600 accepts an email of a type string and
03:38:44.479 it'll return a promise that will return
03:38:47.199 a user State it'll look something like
03:38:49.239 this first we have to extract the user
03:38:51.800 which will be the same to what we have
03:38:53.239 done in the root layout get a single
03:38:58.000 user const user is equal to a wait db.
03:39:02.600 select from users where users email so
03:39:06.120 here we're going to take a look by email
03:39:07.960 not by ID is equal to the email we're
03:39:10.920 passing right here and we're going to
03:39:12.319 limit it to
03:39:13.840 one next we're going to check if user.
03:39:17.199 length is triple equal to zero that
03:39:19.960 means that it is nonactive it doesn't
03:39:22.560 exist so I'll simply say nonactive but
03:39:25.680 after that we want to make checks for
03:39:27.479 the last activity date so let me say
03:39:29.960 const last activity date is equal to new
03:39:34.359 date out of the user
03:39:37.560 z. last activity date and you can add an
03:39:40.840 exclamation mark here letting typescript
03:39:42.640 know that it will be there then with you
03:39:45.439 want to get the current date by saying
03:39:47.120 const now is equal to new date and
03:39:51.160 finally you want to compare the
03:39:52.560 difference by saying con time
03:39:56.080 difference is equal to now. get time
03:40:00.080 minus last activity date. get time and
03:40:03.600 then finally if time difference is
03:40:06.479 greater than 3 days in
03:40:09.680 milliseconds and if time
03:40:12.800 difference is lower than or equal to 30
03:40:17.359 days in milliseconds then you want to
03:40:20.160 return
03:40:21.279 nonactive else you want to return active
03:40:24.479 so this was some pretty custom example
03:40:26.720 of showing you how flexible your
03:40:29.439 workflows and queries are you can do
03:40:32.840 whatever you just have to write it in
03:40:35.000 plain JavaScript code and now that we
03:40:37.560 can get the user State we can actually
03:40:39.760 use it to perform some actions in the
03:40:41.840 workflows or use it as a trigger so
03:40:44.319 alongside the email right here in the
03:40:46.239 post request we're also going to get a
03:40:48.199 full name and first we're sending a
03:40:50.359 welcome email so I'll add a comment
03:40:52.399 right here and say welcome
03:40:54.680 email where we run a context new signup
03:40:58.520 await send email and instead of just
03:41:01.279 passing different programs we can pass a
03:41:03.120 single object with the settings and then
03:41:05.319 pass over an email we are sending to a
03:41:09.080 subject of something like welcome to the
03:41:13.399 platform and then a message
03:41:16.479 of something like template string of
03:41:20.880 Welcome full name and this send email
03:41:23.880 function will no longer be one provided
03:41:26.159 to us by up
03:41:28.239 stash because it's just a dummy one
03:41:31.000 actually will import it right at the top
03:41:33.600 so let's remove this and let's just
03:41:35.920 import it right here coming from lib
03:41:38.760 workflow so this is the custom email
03:41:40.960 function sending using resend as a
03:41:43.319 provider next we want to trigger the
03:41:45.080 work workflows it sleeps for 3 Days to
03:41:47.920 avoid any bills or server load and then
03:41:50.640 it enters the loop here we want to get
03:41:52.640 access to the state of the user so we
03:41:54.520 are running the check user State and
03:41:56.319 then we have an async function which
03:41:58.080 returns an await call to get user state
03:42:03.399 to which we have to pass the email so
03:42:05.800 this is the function we created to get
03:42:07.520 the current user State and then
03:42:08.840 according to that we have to send out
03:42:10.279 the emails so let's actually modify them
03:42:13.040 by passing an object into each one
03:42:16.159 for the first one I'll say send it to
03:42:19.000 this email with a subject saying are you
03:42:21.640 still there hey we miss you and then for
03:42:25.199 the second one we'll pass another object
03:42:28.960 and I'll say something like welcome back
03:42:31.920 it's good to see you active and that's
03:42:33.640 it then we can sleep the workflow once
03:42:35.920 again for a month and recheck once again
03:42:38.479 so with that in mind we have set up
03:42:40.520 absolutely
03:42:41.880 everything from the workflow client that
03:42:44.560 we have right here under workflow TS lib
03:42:48.560 to the qash client as
03:42:50.560 well the email mechanism to send out
03:42:53.359 emails and the integration with resent
03:42:56.040 and seemingly everything else needed for
03:42:58.640 this to work to test out our workflow we
03:43:01.199 can use the trigger method which starts
03:43:03.439 the workflow run and gets its run ID it
03:43:06.520 looks something like this pretty
03:43:08.399 straightforward but the main question is
03:43:10.880 where should we trigger it do you have
03:43:13.279 any guesses where should we trigger the
03:43:16.040 onboarding of the
03:43:17.640 user well of course when a user signs up
03:43:21.000 for the first time so head over to the
03:43:23.239 au. TS file in the lib actions and head
03:43:27.239 over into the sign up function as soon
03:43:30.239 as we create or insert a new user into
03:43:32.800 the database we want to trigger the
03:43:34.760 workflow by saying await workflow
03:43:38.560 client. trigger and then you have to
03:43:40.920 pass the URL pointing to the route of
03:43:43.800 the workflow in our case that is the
03:43:46.479 onboarding workflow right here under app
03:43:49.680 API onboarding route. DS which will
03:43:53.520 trigger this post request and with it
03:43:55.680 the workflow itself so we can say URL
03:43:59.040 and then make it a dynamic template
03:44:00.560 string of config
03:44:03.840 env.
03:44:05.399 prod API endpoint but first make sure to
03:44:09.359 import config coming from lib config and
03:44:13.120 it should point to your environment
03:44:14.319 variables and then to it append for SL
03:44:18.560 API slw workflow slash onboarding as the
03:44:22.880 second parameter add the body which will
03:44:26.199 contain the email we want to send to as
03:44:28.760 well as the full name and that's it we
03:44:31.080 sign the user in and the rest happens
03:44:33.399 behind the scenes so now we ready to
03:44:35.479 test it out but of course since
03:44:37.399 workflows require publicly deployed URLs
03:44:40.680 we have to get our latest environment
03:44:42.319 variables and the latest code and push
03:44:44.720 it to cell so first things first let's
03:44:48.120 get the environment variables we need to
03:44:50.960 get our resent token then head over to
03:44:54.120 your project settings environment
03:44:57.319 variables and add a recent token right
03:45:00.479 here and click save alongside that make
03:45:04.080 sure that your next public prod API
03:45:06.319 endpoint points to your currently
03:45:08.479 deployed website copy it and you can
03:45:11.600 also change the next public API endpoint
03:45:14.279 by editing it right here to also point
03:45:17.199 to the same URL no longer do we need to
03:45:19.880 refer to Local Host 3000 on the
03:45:22.159 deployment now to re-trigger these
03:45:24.439 changes you can either go to deployments
03:45:26.560 and then redeploy it
03:45:28.359 manually but we're not going to do that
03:45:30.680 because we have to push the changes
03:45:32.319 anyway containing the latest code for
03:45:34.600 all of the logic for sending emails so
03:45:37.560 let's actually just push the code once
03:45:39.399 again which should re-trigger the
03:45:41.239 deployment I'll say get add dot get
03:45:44.640 command DM and that'll be Implement qash
03:45:49.520 workflows for user
03:45:52.840 onboarding and then do get push this
03:45:56.000 will push the latest changes and
03:45:58.239 immediately trigger a redeployment on
03:46:00.680 res sell so let's give it a minute there
03:46:03.880 we go our new deployment is ready so
03:46:06.520 let's head over to our deployed website
03:46:09.199 and create a new account in this case
03:46:11.399 I'll use a different email enter my
03:46:13.760 password and my name we can also enter a
03:46:17.439 University ID and upload a university
03:46:20.239 card once you upload it click sign up
03:46:24.000 and there we go we got redirected back
03:46:26.479 to homepage but if you check your email
03:46:29.680 it is nowhere to be found at least I
03:46:32.120 can't find it in my inbox so what do you
03:46:34.439 say that we go ahead and debug it
03:46:36.239 together if you head over to qash and
03:46:39.120 move over to workflows you'll see that
03:46:41.520 there is one workflow that started
03:46:43.560 running which is a good sign right and
03:46:45.920 there's another one because one of you
03:46:47.720 was crazy enough to find the published
03:46:50.399 repo and already started testing the
03:46:52.560 application even before it went live or
03:46:55.080 before I finished recording it but here
03:46:57.239 is my attempt of trying to get my email
03:47:00.359 JavaScript Mastery right here and it
03:47:02.880 says retrying which means that it wasn't
03:47:04.920 really successful you can also head over
03:47:07.120 to resend and check the emails here it
03:47:09.840 looks like it's empty and the logs are
03:47:12.159 empty too so it looks like it's not Q
03:47:15.319 Stash's fault and it's not resent fault
03:47:18.199 so most likely we've done something
03:47:19.880 wrong so another place to look at for
03:47:22.279 errors is to head over to your server
03:47:24.760 logs on versell so find your versell
03:47:28.479 project head over to logs and then turn
03:47:31.560 on the live right here and look for when
03:47:34.239 you made that workflows onboarding call
03:47:37.080 it is right here we have my profile sign
03:47:40.159 in and then we have the API workflow on
03:47:43.239 boarding and in this case it looks like
03:47:45.560 it'll be pretty easy to debug as it's a
03:47:47.880 404 not found which indicates that the
03:47:51.359 API workflow on boarding cannot be found
03:47:54.399 but how is that the case we have created
03:47:56.159 it well if I go back right here and
03:47:59.199 check out my API workflows onboarding
03:48:03.199 route I can notice that it has an extra
03:48:05.560 S at the end it's not workflow it is
03:48:08.880 workflows so I have to go here and
03:48:11.880 search for where we have mentioned that
03:48:14.600 and and I think that's going to be
03:48:15.960 somewhere in the odds of actions so if
03:48:19.439 you scroll down you should be able to
03:48:21.319 see API workflow on boarding but we need
03:48:24.800 to switch this over to workflows on
03:48:27.239 boarding at least that's how I called it
03:48:29.359 so just make sure that matches once you
03:48:31.439 do that we'll have to redeploy our app
03:48:33.319 so go ahead and say get add dot get
03:48:36.080 commit dasm fix typo and get push after
03:48:42.080 you do that your app will get redeployed
03:48:44.520 and and you'll be able to sign in with
03:48:46.520 yet another account while it's being
03:48:48.439 deployed we can head over to Neon and
03:48:51.800 head over to tables just to quickly
03:48:53.880 remove the two existing users we have to
03:48:56.159 have a clean slate and to properly on
03:48:58.239 board our new upcoming user there we go
03:49:01.399 the application is now live so let's go
03:49:03.600 ahead and check it out I'll log out and
03:49:05.920 create a new account now I can use the
03:49:07.880 email that I used at the start I'll
03:49:09.640 enter some random University ID and
03:49:11.960 upload my University card it should
03:49:13.840 upload it right away if it doesn't try
03:49:15.920 to reload your page and then click sign
03:49:18.239 up immediately you'll be redirected back
03:49:20.880 to the homepage but what we care about
03:49:23.199 more is whether the workflow has been
03:49:25.560 triggered so even before I head over to
03:49:28.000 my email I'll head over to qash workflow
03:49:30.800 table and check this out new workflow
03:49:34.239 has been initialized and we have a new
03:49:36.800 signup action which ran successfully and
03:49:39.760 now it's going to sleep for 3 days but
03:49:42.439 if you head over to resent you'll notice
03:49:44.439 that no emails have been sent and also
03:49:47.640 the logs are empty so that means that
03:49:50.080 something went wrong when trying to send
03:49:51.720 out the email even though everything
03:49:53.439 went right with qash workflows so let's
03:49:56.120 actually check out our workflow. TS one
03:49:58.159 more time where we're actually setting
03:49:59.960 up the qash client and allowing it to
03:50:02.239 send emails I think we'll need to modify
03:50:04.600 this body from as an example before they
03:50:08.199 provided us with onboarding at recent.
03:50:11.279 deev which is an actual email domain
03:50:13.800 name not just just a website domain I
03:50:16.279 can show you what we had and compare it
03:50:18.439 with this there we go so you can see I
03:50:21.359 have hello. Adrian JSM mastery.com but
03:50:24.520 they have onboarding at recent. deev so
03:50:27.000 what I think we need to do is also get
03:50:29.080 an email account for our domain name
03:50:31.800 something like onboarding or contact so
03:50:34.319 I'll head back over to hostinger scroll
03:50:37.199 down and see here it says get a
03:50:39.720 professional email account for your
03:50:41.600 domain name just click try for free and
03:50:44.199 then it'll will be about less than a
03:50:45.880 dollar per month and you even get a free
03:50:48.120 30-day trial and once again if you
03:50:50.600 really can't put in a credit card or you
03:50:52.840 cannot spend this amount in that case
03:50:55.080 you can check out email JS I have a link
03:50:57.680 pointing to the complete implementation
03:51:00.120 within another video right below but in
03:51:02.399 this case I'll start with a free 30-day
03:51:04.359 trial there we go I got it if you don't
03:51:06.880 want to get charged you can cancel it
03:51:08.359 for free within 30 days or you can keep
03:51:10.640 it if you're going to use it for your
03:51:11.840 own portfolio it's always great to have
03:51:13.760 a professional main name and email so
03:51:16.439 I'll head over to manage email and I'll
03:51:18.960 create a new email account email can be
03:51:21.439 something like contact at Adrian
03:51:23.479 gsmaster pro.com and you can choose any
03:51:26.120 password you like and you can skip the
03:51:28.000 second step and now you have your email
03:51:30.680 so make sure to copy
03:51:33.040 it go back to your application and
03:51:36.040 replace it right here now we can send
03:51:38.800 emails from a real domain name even
03:51:41.319 though on recent domains we have entered
03:51:43.359 a subdomain as they recommended but I
03:51:45.760 don't think that's going to be a problem
03:51:47.239 if it poses some issues we can very
03:51:48.960 quickly add our main domain right here
03:51:51.359 to allow us to send
03:51:52.920 emails with that said let's go ahead and
03:51:55.199 push this change and test it once again
03:51:57.319 I'll run get add dot get commit
03:52:01.399 DM fix email domain and get push back on
03:52:06.479 resell we can wait until it is deployed
03:52:09.040 back on the deployed app I'll try to
03:52:11.040 create a new account I'll use my
03:52:13.439 personal one this time
03:52:16.159 enter my
03:52:18.800 name and my University ID number and the
03:52:21.920 card sometimes it's not uploading on the
03:52:24.000 first try for me but weirdly enough if I
03:52:28.319 reload and enter all my information once
03:52:33.399 again and try to reupload one more time
03:52:36.720 then it uploads it immediately I'll see
03:52:38.920 if this issue persists and then we can
03:52:40.479 fix it with that in mind let's click
03:52:42.680 sign up oh and I think I get an error
03:52:44.960 because I entered the same University ID
03:52:47.040 as before so I'll change it it's good to
03:52:49.319 know that our validation is working we
03:52:51.680 get redirected to the homepage looks
03:52:53.680 like a few more people have been
03:52:55.000 triggering these workflows but there's
03:52:57.199 one for my new user that's good to know
03:52:59.640 but now the main question is what
03:53:01.000 happens if I head over to resent and
03:53:03.720 would you look at that we got a 403
03:53:05.960 under logs happening just a minute ago
03:53:09.359 but unfortunately no emails just 403s
03:53:12.520 under logs hopefully the these 43s will
03:53:15.359 now give us a bit more information on
03:53:17.159 what went wrong we got a validation
03:53:19.000 error saying that Adrian jm.com the main
03:53:22.080 is not verified so it looks like I was
03:53:24.760 wrong even though they recommended to
03:53:26.560 have a subdomain there we have to use
03:53:28.640 the main domain for our email so I'll
03:53:31.479 just head over to domains and remove the
03:53:34.040 existing
03:53:35.000 domain by saying delete and add a new
03:53:38.080 domain but this time it will not be a
03:53:40.439 subdomain I'll just use my full domain
03:53:43.120 Adrien JSM tree.com and then
03:53:46.760 unfortunately we'll have to go through
03:53:48.080 the process of setting up our DNS
03:53:49.680 records one more time so get back to
03:53:51.840 your domain head over to DNS and let's
03:53:54.840 add a few more records the first one as
03:53:57.560 before is an MX record of send and the
03:54:01.439 following value the second one is a txt
03:54:04.680 record with the host name of send and
03:54:08.399 this value after that we have another
03:54:10.640 txt with this name and this value
03:54:15.040 and finally we have another txt of dmark
03:54:18.720 and a value of dmark B none there we go
03:54:21.880 I'm already well versed in adding those
03:54:23.920 DNS records now I'll click verify and
03:54:27.199 hopefully it'll verify them as quickly
03:54:29.399 as it did the last time they're still
03:54:31.840 pending now but let's give them a minute
03:54:34.840 two got verified in a second like the
03:54:37.000 last time and hopefully the last one
03:54:38.960 does get verified too there we go it
03:54:41.159 took a couple of seconds but now we're
03:54:43.040 fully verified and hopefully this time
03:54:46.359 emails will send as you can see this
03:54:49.080 took us some time to get everything up
03:54:50.920 and running and set up but that's the
03:54:52.960 difference between a small
03:54:54.399 non-production Ready YouTube tutorial
03:54:56.560 and this which is an Enterprise ready
03:54:58.920 course I actually wanted to guide you
03:55:01.040 through the real process of setting up
03:55:02.960 tools that companies and developers use
03:55:05.199 on the daily basis and I wanted to guide
03:55:08.000 you through the errors that I
03:55:09.439 experienced in my process and way of
03:55:11.760 fixing them this time we don't have to
03:55:13.600 redeploy our app we can just log out and
03:55:16.120 try to create another account I'll use
03:55:18.600 one of the last remaining emails I have
03:55:20.399 to test it
03:55:21.720 out enter my password and upload my
03:55:25.000 University card and click sign up there
03:55:27.760 we go now let's go through all the steps
03:55:29.880 one more time like we're firing up a jet
03:55:32.960 engine we're going to go through all the
03:55:35.120 steps and make sure everything is
03:55:36.760 running smoothly Q stash run started a
03:55:40.239 few seconds ago recent status 200 less
03:55:43.920 than a minute ago under emails we have
03:55:47.199 our welcome to the platform email and
03:55:49.399 finally in your inbox you should be able
03:55:51.520 to see a message from JS Mastery which
03:55:54.199 should come from your own domain contact
03:55:56.600 Adrian JS mastery.com that should say
03:55:59.040 something simple like welcome JSM even
03:56:02.439 though this is a very plain looking
03:56:04.560 email in plain text as I told you recent
03:56:07.560 allows you to craft your emails using
03:56:10.359 react components on recent landing page
03:56:13.399 if you scroll to the section of develop
03:56:16.000 emails using react you can see just what
03:56:18.880 is possible and just how beautiful these
03:56:21.279 emails look like this is something we'll
03:56:23.080 cover in the pro version of this course
03:56:24.840 so if you're already watching within JS
03:56:26.880 mastery. Pro platform keep watching but
03:56:29.760 if you're in YouTube you might want to
03:56:31.399 transition over there and get all of the
03:56:33.279 benefits by watching this on the
03:56:34.960 platform directly and I don't have to do
03:56:37.199 any further thinking for all of the
03:56:38.760 upcoming users I didn't share this app
03:56:41.479 anywhere so far but it looks like you
03:56:43.800 guys have been triggering workflows like
03:56:45.800 crazy I can already see like five or
03:56:48.239 more emails triggered just in the last
03:56:50.479 couple of minutes I can't imagine what
03:56:52.279 you'll do with this app once I actually
03:56:54.080 release it on YouTube but the good thing
03:56:55.960 to know is that Q Stash's workflows can
03:56:58.520 handle it all because they're incredibly
03:57:00.600 scalable making your app production
03:57:02.840 ready and that's how you do it that's
03:57:05.479 how you implement workflows in your
03:57:07.239 applications you should now be able to
03:57:09.319 do any kind of workflow needed for any
03:57:11.840 kind of application but later on as part
03:57:14.560 of the pro part of this course just for
03:57:17.040 practice I'll teach you how to implement
03:57:18.960 another workflow for reminding your
03:57:21.000 users as to when their book is due to be
03:57:23.560 returned so keep
03:57:27.239 watching so far you've developed a
03:57:29.840 feature packed library application but
03:57:33.239 it's not yet a library management system
03:57:36.159 as a matter of fact almost every single
03:57:39.000 Enterprise ready application isn't just
03:57:41.359 a single public facing website like this
03:57:43.600 one typically it consists of multiple
03:57:46.560 applications that work together think of
03:57:48.680 an e-commerce store where people can see
03:57:51.399 and buy the products but that store has
03:57:53.840 another admin interface through which
03:57:56.120 employers can add additional products
03:57:58.399 think of Netflix which is very similar
03:58:00.399 to a library application where people
03:58:02.600 can browse different movies but there's
03:58:05.239 a behind the-scenes interface through
03:58:07.159 which those movies can be added by now
03:58:09.279 I'm pretty sure you understand the
03:58:10.720 importance of having a complete admin
03:58:13.080 interface to manage the creation of
03:58:15.520 whatever we're seeing on the public
03:58:17.199 facing website so for this platform we
03:58:20.080 have already built a greatl looking user
03:58:22.399 facing platform where we can show the
03:58:24.479 books and allow users to borrow them but
03:58:27.359 now we'll develop a completely new app
03:58:30.000 allowing admins to manage those books
03:58:33.120 which makes it a fully-fledged full
03:58:35.600 stack Library management solution with
03:58:38.279 an admin dashboard first we'll focus on
03:58:41.080 taking a look at all of the users that
03:58:42.720 have been created so far and then
03:58:44.680 creating an interface that will allow us
03:58:46.560 to add new books to the library so I
03:58:49.560 hope you're excited what do you say are
03:58:51.600 you ready to bring this app to another
03:58:53.520 level and go from what we typically do
03:58:56.080 in YouTube tutorials and build something
03:58:58.159 that you don't see every day an admin
03:59:00.199 dashboard interface connected with the
03:59:02.279 public facing app so let me teach you
03:59:04.479 how we can approach creating these two
03:59:06.920 separate applications within a single
03:59:09.080 file and folder structure which
03:59:10.840 basically means that we're creating a
03:59:12.479 monol lifee application where everything
03:59:14.640 we need for whatever application we need
03:59:16.640 connected with the main app is consisted
03:59:18.880 right within the same folder so let's
03:59:21.000 create a new folder within which we'll
03:59:23.040 handle all of the admin related stuff
03:59:25.439 such as showing statistics users
03:59:27.720 requests book creation and more we can
03:59:30.520 do that right here within the app and
03:59:32.479 then create a new folder and call it
03:59:38.080 admin and then create a new page. DSX
03:59:44.840 and use rafc right within it and what do
03:59:48.120 you think why didn't we use parentheses
03:59:50.520 around the admin to make it a route
03:59:52.720 group well that's because we want to
03:59:55.439 have admin to be as part of the route so
03:59:59.000 we can go to admin and then maybe
04:00:01.040 forward slash is just the home or maybe
04:00:03.600 we can go to admin and then dashboard or
04:00:06.680 admin forward SL users that's the reason
04:00:09.199 why I didn't turn the admin folder into
04:00:10.760 a route group rather we want it to be
04:00:12.880 included within the URL path now if you
04:00:15.560 check out the design you'll notice that
04:00:17.199 the admin dashboard is completely
04:00:19.520 different from our user facing app
04:00:21.960 everything from the color which I have
04:00:24.040 purposely changed to light to look
04:00:25.960 similar to most admin dashboards also
04:00:28.560 here we have the sidebar and on the main
04:00:30.560 app we had the Navar and then here we
04:00:32.640 have some tables and so on so it is
04:00:35.199 completely different which means that we
04:00:37.199 have to create a completely new layout
04:00:39.640 for the admin folder so let's go ahead
04:00:42.239 and do that by creating a new new file
04:00:45.199 and call it layout. DSX run our afce
04:00:49.960 inside of here and let's quickly spin up
04:00:52.080 a new layout we'll create a main and
04:00:54.760 that main will have a class name equal
04:00:57.319 to flex m-- screen w- full and flex -
04:01:03.080 row right within it we'll render a
04:01:05.359 simple
04:01:06.399 sidebar and then we'll have a div with a
04:01:09.720 class name equal to admin-c container
04:01:14.760 and within it we'll render a P tag that
04:01:17.199 for now will'll say header and finally
04:01:19.680 here we can render the
04:01:21.880 children the children are coming through
04:01:24.199 props as with every layout so we can
04:01:26.760 destructure the children right here and
04:01:29.199 say that children are of a type react
04:01:33.120 node coming from react and we can also
04:01:35.920 check if there is an active session
04:01:37.880 right here by saying con session is
04:01:40.399 equal to a wait so let's add a sing
04:01:44.120 right here and we can check if o exists
04:01:48.520 or rather whether o returns a valid
04:01:51.319 session if there is no session question
04:01:55.199 mark. user. ID or question mark. ID in
04:01:59.680 that case we can simply redirect to SL
04:02:03.279 signin so we can sign that user in and
04:02:05.680 check whether they have admin privileges
04:02:07.800 another thing we need are the Styles so
04:02:10.359 let's create a new folder outside of the
04:02:13.080 app folder
04:02:14.479 and let's call it Styles and within
04:02:17.720 Styles we can create a
04:02:19.920 new admin. CSS style similar to the
04:02:24.080 global. CSS that we had before and then
04:02:26.520 if you head over below this video find
04:02:28.800 the GitHub repo and head over to code
04:02:30.880 Snippets to copy you can find this
04:02:32.920 complete admin. CSS file it won't
04:02:35.760 contain a lot of stuff just some helper
04:02:37.720 functions to make it easier to create
04:02:39.720 our sidebar headers and some error
04:02:42.319 handling no logic here just styles to
04:02:45.520 make sure that we can focus on what
04:02:47.159 truly matters so once you get it here
04:02:50.239 make sure to import it right within the
04:02:52.040 layout by saying
04:02:54.159 import at/ Styles SL admin.
04:02:59.520 CSS if you do that you can head back to
04:03:02.319 your application and navigate over to
04:03:05.359 localhost 3000 for sadmin and you'll see
04:03:09.319 that your entire application interface
04:03:11.399 will change in an instant now we have a
04:03:14.080 sidebar on the left with a header on the
04:03:15.960 top and then the main page in the middle
04:03:18.680 and of course this layout changes as we
04:03:20.880 expand the screen of course we have to
04:03:23.120 make it a bit more responsive but it'll
04:03:25.159 do the trick for
04:03:26.399 now this is just the layout so let's
04:03:29.399 focus on creating the sidebar first I'll
04:03:31.840 head over to the components folder and
04:03:34.120 create a new folder within it which I'll
04:03:36.920 call admin and within the admin folder
04:03:39.479 we can keep all of the components
04:03:41.199 dedicated strictly for the admin app so
04:03:44.159 let's create a new file within it and
04:03:46.359 let's call it sidebar. TSX run RFC
04:03:50.920 within it and then import it right here
04:03:53.479 within the
04:03:54.439 layout by simply saying sidebar and then
04:03:57.840 self close it right here like this and
04:04:00.680 now let's develop it together we can do
04:04:03.399 that by heading into the sidebar and
04:04:06.120 starting with a div that's wrapping it
04:04:08.760 let's give it a class name equal to
04:04:11.359 admin Das sidebar Within it create one
04:04:15.040 empty div and within that div create
04:04:17.560 another div with a class name equal to
04:04:20.479 logo within it render a nextjs image
04:04:24.239 with a source of SL ions SL admin
04:04:29.279 logo.svg with an Al tag of
04:04:32.520 logo a height of about 37 a width of
04:04:37.680 about 37 as well and you can close it
04:04:40.399 there that should show our admin side
04:04:43.279 logo
04:04:45.080 and you can also render an H1 and say
04:04:47.920 something like bookwise which is the
04:04:50.000 name of our application by implementing
04:04:52.120 the admin sidebar Styles you can notice
04:04:54.520 that the H1 is not present on smaller
04:04:56.640 devices but if I expand it you can see
04:04:59.040 it right here now let's head below the
04:05:01.080 div that is wrapping the H1 and let's
04:05:03.800 create another div with a class name
04:05:07.279 equal to margin top of 10 flex
04:05:11.359 flex-all and a gap of five and within
04:05:14.680 here we can map over all of our sidebar
04:05:17.520 elements it should look something like
04:05:19.159 this we need to have the homepage all
04:05:21.680 users all books borrower requests and
04:05:24.439 account requests and then at the bottom
04:05:26.439 we'll show some profile information to
04:05:28.279 do that you need to create some kind of
04:05:30.120 an array of links to map over that can
04:05:33.800 look like this an array of objects where
04:05:38.040 you can Define the icon and the text and
04:05:41.399 then you would need to duplicate it many
04:05:42.960 times and then run the dot map on
04:05:45.800 it but we never want to do this right
04:05:48.359 here within this file as it's clattering
04:05:50.359 the jsx view instead you can pull it
04:05:53.000 into constants so let's head over into
04:05:55.560 constants
04:05:56.960 index.ts and here alongside sample books
04:06:00.399 right at the top you should also be able
04:06:02.319 to see admin sidebar links allowing us
04:06:05.040 to quickly map over them so let's do
04:06:07.279 just that I'll say admin sidebar links.
04:06:11.560 map where we get each individual link
04:06:14.640 and for each link we can open up a
04:06:16.199 function block first we want to figure
04:06:19.239 out whether this link is currently
04:06:21.239 selected so I'll say is selected and
04:06:24.840 I'll set it equal to false right now
04:06:27.080 then we can return how each one of these
04:06:29.680 links will look like first of all it'll
04:06:32.279 be a nextjs link with an href pointing
04:06:35.560 to
04:06:36.840 link.
04:06:38.640 route and its key will also be link.
04:06:41.880 route since it is unique then within
04:06:44.520 that link we can render a div that div
04:06:47.199 will have a class name equal to it'll be
04:06:50.840 a dynamic class name so we can call the
04:06:53.080 CN and first it'll always have a class
04:06:56.840 name of Link but then only if it is
04:07:00.399 selected then we will also apply a class
04:07:03.239 name of BG primary admin and Shadow DSM
04:07:07.600 you'll see soon what difference that
04:07:08.920 will make within that div we can have
04:07:11.800 another div that'll have have a class
04:07:14.399 name equal to relative and a size of
04:07:18.159 five this is to wrap our
04:07:20.560 image so let's create an image right
04:07:23.080 here with a source of link. IMG and an
04:07:27.800 I'll tag of Icon a property of fill and
04:07:32.279 a class name of now this is a pretty
04:07:35.359 interesting feature in CSS that you can
04:07:37.760 do and that is to invert the color of
04:07:41.479 the image based on a specific proper
04:07:43.479 property making it work on both dark and
04:07:45.920 light backgrounds you can do it like
04:07:47.520 this first check if is selected and if
04:07:51.600 it is selected then change the
04:07:53.840 brightness over to zero and invert the
04:07:56.880 colors else simply apply nothing and
04:07:59.920 always it can have object contain if you
04:08:02.359 do that now and properly close it you
04:08:04.920 can see five different icons will appear
04:08:06.680 right here later on as we select them
04:08:09.399 you'll also be able to see that they'll
04:08:10.840 change color it should look something
04:08:12.600 like this typically they're gray but if
04:08:15.199 it's selected they should turn white I
04:08:17.479 remember first using this technique of
04:08:19.239 changing the icons maybe 5 years ago
04:08:22.159 when I was creating the filmire course
04:08:24.520 it was my first react course ever since
04:08:27.960 then I also used it within the ultimate
04:08:29.840 nextjs course and now finally within
04:08:32.080 this course as well I used to think we
04:08:33.840 need to have two separate images for
04:08:35.439 different colors but no with a bit of
04:08:37.600 CSS magic you can make it work there we
04:08:40.080 go I fixed the typo and now we can head
04:08:42.199 over below this div and render a P tag
04:08:45.359 that'll simply render the link. text it
04:08:48.040 can have a class name equal to if CN is
04:08:54.800 selected so if is selected then it'll
04:08:57.960 have a text white else it'll have a text
04:09:01.439 dark it's pretty easy to work with text
04:09:03.960 right to change colors now if I expand
04:09:06.640 this you'll see that on larger devices
04:09:09.000 there is text now how do we figure out
04:09:11.920 which link is currently Act active when
04:09:14.199 we're just on admin the homepage should
04:09:16.399 be active so we can do that by using the
04:09:20.319 route parameters or the path name so
04:09:23.439 right here at the top of our component
04:09:25.600 we can say const path name is equal to
04:09:28.479 use path name coming from next
04:09:31.080 navigation and since we're using path
04:09:33.239 name we have to use browser
04:09:35.600 functionalities which means that we have
04:09:37.359 to make this component client rendered
04:09:40.199 so let's add a use client directive at
04:09:42.520 the top with that in mind we can fix
04:09:44.920 this is selected to false to implement
04:09:47.479 the logic of actually changing it
04:09:49.720 dynamically we can do it like this put
04:09:52.600 parentheses and then check if link.
04:09:55.640 route is not equal to SL admin so this
04:09:59.920 is the
04:10:00.920 homepage and if path name do includes
04:10:06.319 link. route and if link.
04:10:09.760 route. length is greater than one exit
04:10:13.319 exit parenthesis and say or if path name
04:10:17.319 is triple equal to link. route in those
04:10:20.600 two cases the route is selected so you
04:10:24.319 can see that currently homepage is
04:10:26.239 selected I'm going to zoom it in a bit
04:10:28.359 so you can see that this icon indeed
04:10:30.319 turns white cool and as I Collapse this
04:10:34.159 to mobile we can only see the collapsed
04:10:36.600 icons without the text to conserve some
04:10:39.080 space perfect now let's head down and
04:10:42.439 let's implement the C for the user
04:10:44.279 profile we can do that by going below
04:10:46.760 two of these
04:10:47.920 divs and creating another div with a
04:10:51.279 class name equal to user within it we
04:10:55.239 can create an avatar this is a component
04:10:57.600 that we can import from components UI
04:10:59.880 Avatar and we can refer to how we called
04:11:02.359 it previously let me see Avatar it was
04:11:06.319 in the header yep we have to call it
04:11:08.920 like this so let's copy this part and
04:11:12.880 just let's let's call it here again
04:11:15.119 Avatar Avatar foldback get initials and
04:11:19.199 then we have to get access to the
04:11:20.640 session and we can get access to that
04:11:22.560 session by simply passing it over from
04:11:24.760 the layout so here I'll say session is
04:11:27.840 equal to
04:11:29.040 session and moving into the sidebar we
04:11:31.880 can destructure it right here and set
04:11:35.000 the type of session to be equal to
04:11:39.239 session coming from next o if you do
04:11:42.279 that you can now see see this little
04:11:43.880 Avatar icon which says a for Adrian and
04:11:46.800 right below it we can also render
04:11:48.520 another div with a class name equal to
04:11:51.640 flex
04:11:53.439 flex-all and on Max MD devices hidden
04:11:57.520 we're hiding it because we only want to
04:11:59.000 show it on desktop
04:12:00.680 devices and that something will actually
04:12:03.560 be a P tag that'll render the session
04:12:06.560 question mark. user question mark. name
04:12:09.840 we can duplicate it below and also
04:12:11.520 render the email so that'll look
04:12:14.239 something like this and we can also
04:12:16.960 provide some additional class names like
04:12:20.080 font - semi bold text- dark 200 and for
04:12:25.239 the second one we can give it a class
04:12:27.279 name equal to text- light 500 text- XS
04:12:32.560 for extra small there we go this is
04:12:35.279 looking better and as we collapse it to
04:12:37.560 mobile view you can see that now we have
04:12:39.600 only the Avatar perfect and now that we
04:12:41.880 have the sidebar let's Al create a
04:12:43.800 header which is the second and the last
04:12:45.760 component within our layout so I'll head
04:12:48.359 over to the components folder into the
04:12:50.960 admin folder and create a new file
04:12:53.760 called header. TSX and I'll run RFC
04:12:58.680 within it then within the layout we can
04:13:01.880 simply import it and use it right here
04:13:04.239 by saying header coming from components
04:13:07.359 admin header because they're different
04:13:10.040 and I'll also pass a session to it
04:13:12.439 because I'm sure will need to use it so
04:13:15.439 now let's get into the header and let's
04:13:17.680 implement it starting with getting
04:13:20.399 access to that session that we're
04:13:22.600 passing over that is of a type session
04:13:27.000 session we can change this over to an
04:13:29.119 HTML 5 semantic header tag as well as
04:13:32.520 give it a class name of admin Das header
04:13:36.000 within it we can render a div that'll
04:13:38.199 have an H2 which will render the session
04:13:41.040 question mark. user question mark name
04:13:43.920 and below the H2 we can render a P tag
04:13:46.800 that'll say something like monitor all
04:13:50.239 of your users and books here so let's
04:13:55.560 give them some styles by giving it a
04:13:58.040 class name equal to text- dark 400 and
04:14:02.279 font D semi
04:14:04.439 bold as well as text- 2
04:14:07.880 Excel and let's also give this ptag a
04:14:11.319 class name
04:14:13.439 equal to text- slate d500 and
04:14:19.119 text-base there we go looking good and
04:14:22.479 finally below this div we can render a P
04:14:25.520 tag which for now will'll say search
04:14:28.199 later on we'll convert this into a fully
04:14:30.399 fledged functional search but for now
04:14:32.560 we'll leave it as it is or you can even
04:14:35.359 comment it out and with that done we
04:14:37.760 have implemented the complete layout for
04:14:40.199 the admin dashboard of course that is
04:14:42.560 only the layout we are yet to implement
04:14:44.960 the main dashboard page so yep this
04:14:47.640 right here is the main admin
04:14:51.840 dashboard but what matters most is that
04:14:54.319 the main layout is now done so now we
04:14:56.800 can very easily switch between other
04:14:58.720 pages and Implement them first one of
04:15:01.080 which will be a page within which we can
04:15:03.520 add new books to the library as admins
04:15:07.000 so let's do that in the next
04:15:10.199 lesson first let's implement the ability
04:15:13.000 for admins to add new books for that we
04:15:16.040 have to implement the all books route so
04:15:18.359 heading back into the code let's head
04:15:20.560 over to our admin and create a new
04:15:23.560 folder called
04:15:25.439 books and within books Let's create a
04:15:28.279 new page. DSX within which we can run
04:15:31.720 rafc allowing us to visit this route
04:15:34.640 just to verify it's the one I can change
04:15:36.520 this text over to books and it changes
04:15:38.960 right here so let's turn this into a
04:15:41.159 section and let's give it a CL last name
04:15:43.840 of w fool rounded D2 XL as well as BG
04:15:49.319 white and p7 now we have a card-like
04:15:52.920 layout within it we can create a div and
04:15:56.279 that div will have a class name all Flex
04:16:00.359 flex-wrap items Das Center justify Dash
04:16:04.880 between and a gap of two within it we
04:16:08.040 can display an H2 that'll have a class
04:16:10.640 name of text- excl
04:16:13.720 and font D semi Boldt and it'll simply
04:16:16.960 say all
04:16:19.880 books there we go that's better below it
04:16:23.319 we can render a
04:16:24.880 button and that button will simply say
04:16:28.239 plus create a new book let's give the
04:16:32.319 button a class name of BG primary
04:16:37.080 dadmin and that button will actually be
04:16:39.439 a link so we can say as child which
04:16:42.239 means that the button will actually
04:16:43.880 become a link href will be SL admin SL
04:16:48.359 books slne and now the link will render
04:16:52.159 the text that the button was before
04:16:54.000 rendering that'll look something like
04:16:56.000 this of course let's style this further
04:16:58.479 by giving it a class name of text- light
04:17:02.680 100 or we can do just text white now we
04:17:07.040 can head below this button and below the
04:17:09.319 div and create another div which will
04:17:12.279 wrap our
04:17:13.800 table so we can just do a P tag for the
04:17:16.359 table right now but later on we'll turn
04:17:19.080 it into a fully fletched dashboard
04:17:21.239 worthy table it'll have a class name of
04:17:24.640 margin top of seven to divide it a bit
04:17:26.680 from the top w- full and overflow Dash
04:17:30.600 hidden so now this is looking more like
04:17:32.720 an actual page within a dashboard but
04:17:35.640 why do we need the all books page and
04:17:37.479 the table if we don't yet have any books
04:17:40.119 so what do you say that we focus on the
04:17:41.960 more important component first which is
04:17:44.560 the form that allows us to add books to
04:17:47.080 the library and utilize our full
04:17:49.239 permissions as admins of the site we can
04:17:51.680 do that by creating a new page within
04:17:54.199 books or it's going to be a new folder
04:17:56.560 rather called
04:17:58.920 new and within new we can create a new
04:18:02.199 page. TSX where we can run our afce so
04:18:06.119 now if you click on create a new book
04:18:08.199 you'll be redirected to that page within
04:18:10.720 it we can return an empty react thre M
04:18:13.840 and within it we can return a button
04:18:16.760 that button will once again render a
04:18:18.800 link with an href all SL admin SL books
04:18:23.680 and a text that says go back so if at
04:18:26.920 any point we want to go back to the old
04:18:28.479 books page now we can do that let's say
04:18:31.680 that this button will act as a child as
04:18:34.520 before to make it become a link and give
04:18:37.040 it a class name of back-
04:18:39.920 BTN perfect so now I can go back and we
04:18:43.119 can create a new book to create it
04:18:45.359 though we'll need a new section right
04:18:47.680 here below the button with a class name
04:18:50.600 of
04:18:51.520 w-o and Max
04:18:53.760 dw-2 EXL within it we'll render a new
04:18:57.920 book form that'll be a big form
04:19:01.920 component bigger than what we had on
04:19:04.159 registration form to allow us to add all
04:19:06.520 of the important information about a
04:19:08.319 book so before we create that form let's
04:19:11.080 actually head over to validation .ts
04:19:14.000 where we had validations for the signup
04:19:16.000 schema as well as the signin schema now
04:19:19.439 we want to have another one for the book
04:19:21.720 form so let's say
04:19:24.040 export const book schema is equal to z.
04:19:30.119 object and then what will a book have
04:19:33.399 well it'll have a title of z. string.
04:19:37.760 trim. min
04:19:39.920 2. max 100 meaning that it can have no
04:19:44.199 less than two characters and no more
04:19:46.040 than 100 now we can repeat this and
04:19:49.279 render the same thing for the author
04:19:52.000 next let's have a genre so we can have
04:19:54.279 something like genre will be very
04:19:57.279 similar but maybe it cannot have 100
04:20:00.279 characters it can be just about 50 a
04:20:02.720 book can have a rating which will be z.
04:20:05.680 number and it can be a Min of one and a
04:20:11.119 Max of five so it's a rating between one
04:20:13.239 and five it can also have a number of
04:20:15.680 total copies so that'll look something
04:20:18.000 like this total copies is z. coer coer
04:20:22.600 means that we want to turn it into a
04:20:24.479 number so we'll say int which means
04:20:27.399 integer do positive so it must be a
04:20:30.040 positive integer and LTE which means
04:20:33.040 lower than and then we can put something
04:20:34.960 like 10,000 here let's say that the
04:20:37.040 10,000 is the upper limit oh and under
04:20:39.560 cores you don't actually have to call it
04:20:41.479 you just say z.c
04:20:43.359 do number and then you keep writing it
04:20:46.720 as you're used to after that we can also
04:20:48.920 have a description which will be similar
04:20:50.920 to the title so let's add it right below
04:20:53.680 it'll be
04:20:55.359 description but let's say that it can be
04:20:57.840 a minimum of 10 characters and a maximum
04:21:00.800 of 1,000 characters after that we can
04:21:03.600 have a cover URL so let's say cover URL
04:21:07.880 is z. string and it must not be empty so
04:21:10.920 I'll say nonempty next we need a cover
04:21:13.800 color to be able to choose how the
04:21:15.560 covers of the book will look like so
04:21:17.800 that'll be a z. string. trm and it must
04:21:21.760 be a valid heximal color so here we
04:21:25.159 could write a regular expression that
04:21:27.159 will check for the validity of a hexol
04:21:29.800 code so say do Rex and here it must
04:21:33.720 start with a hash and then contain
04:21:35.960 numbers from 0 to 99 and letters from A
04:21:38.560 to F and it must have six characters
04:21:41.199 it's pretty crazy how get copilot fill
04:21:43.359 this out for me it'll also contain a
04:21:45.359 video URL about a book which is of a
04:21:47.840 type z.
04:21:49.239 string. non mty and finally it'll have a
04:21:52.760 summary of the book which is z. string.
04:21:56.800 trim. Min of 10 characters great so now
04:22:01.319 we have our book schema and we are ready
04:22:03.720 to create a new form so let's head over
04:22:07.000 to our components head over to admin
04:22:10.760 create a new folder called form
04:22:13.560 forms and within forms create a new file
04:22:17.520 called book form.
04:22:20.319 DSX and within it we'll actually want to
04:22:22.880 implement a regular shat CN form I think
04:22:25.640 we've already done something similar
04:22:27.439 back in our OD form right remember that
04:22:30.560 one it's this one right here it's a
04:22:33.279 pretty lengthy one but it has most of
04:22:35.640 the things that we already need for the
04:22:37.199 form so what do you say that we copy it
04:22:39.680 get rid of the things that we don't need
04:22:41.520 and then utilize the fields that we
04:22:43.159 actually need I'll copy the entire thing
04:22:45.600 and paste it into the book form now if I
04:22:47.880 save it we are ready to go back to the
04:22:50.119 page. TSX and import book form right
04:22:53.319 here you'll notice that webstorm will
04:22:55.279 automatically ask me to provide all of
04:22:57.239 these required props that we typically
04:22:59.119 provide to forms but for now I'll skip
04:23:01.840 providing any of them because we don't
04:23:03.880 actually have them as this is not an odd
04:23:05.880 form so let's head into the book form
04:23:08.159 and let's get it rid of all of these
04:23:09.760 props as in this case it doesn't have to
04:23:11.840 accept many I'll remove this T extends
04:23:14.199 values in this case we don't have to
04:23:16.040 make it as reusable as we did before
04:23:18.520 it'll only accept a prop of type and we
04:23:21.680 can also spread all of the properties
04:23:24.880 about the book this is if we're editing
04:23:27.239 a book that we already have the
04:23:28.560 information for and this can be of a
04:23:31.439 type props so now we can change the
04:23:34.239 props and it'll only accept one prop
04:23:37.080 which is an optional type of create or
04:23:42.119 update date pretty simple and instead of
04:23:45.880 extending field values props will now
04:23:49.000 extend a partial type off book coming
04:23:53.159 from types. D.S we are importing the
04:23:56.080 router that is good in this case we
04:23:58.080 don't have to be considered whether it
04:23:59.520 is sign in or sign up the form
04:24:01.560 declaration will look a bit simpler here
04:24:03.479 we can just say const form is equal to
04:24:06.479 use form z. infer type of book schema so
04:24:12.399 so here we're using that validation to
04:24:14.040 make sure that our form is filled in
04:24:15.560 correctly we pass in the resolver with
04:24:18.000 the book schema and let's not forget to
04:24:20.159 import Z from Zod which is actually
04:24:22.840 doing the validation and then here we
04:24:24.920 can provide the default values now for
04:24:27.359 the default values we can grab all of
04:24:29.359 the values from the validation from the
04:24:31.600 schema you can do that by holding the
04:24:33.800 option key and then selecting by double
04:24:37.239 clicking all of these fields right
04:24:39.560 here once you do that simply go ahead
04:24:42.399 and paste them here select the end of
04:24:45.399 each one to add multiple cursors and
04:24:48.199 then simply give them their default
04:24:50.439 value for most it'll be an empty string
04:24:53.439 but for some like the rating or the
04:24:55.840 number of total copies it'll actually be
04:24:58.040 set to a number like a one so now we
04:25:00.279 have the form set up as well after that
04:25:03.640 we'll have an onsubmit function so let's
04:25:05.640 actually remove the existing handle
04:25:07.520 submit and let's just make something
04:25:09.720 simple like const onsubmit
04:25:12.960 is equal to an asynchronous function
04:25:15.319 that accepts values of a type z. infer
04:25:19.439 type of book schema so what this means
04:25:22.760 is that we'll simply get the values off
04:25:24.279 of the fields of the form and then for
04:25:27.040 now we can simply leave it as an empty
04:25:29.199 callback function and then finally we
04:25:30.960 have the return in this case we simply
04:25:33.560 want to have the form nothing else so I
04:25:36.000 will remove everything before the form
04:25:38.199 and everything after the form right here
04:25:41.080 just keeping the form element I'll
04:25:42.880 change the forms handle submit to be
04:25:44.760 equal to onsubmit remove this W full and
04:25:48.359 just make it space Y8 to give it some
04:25:51.000 more space and in this case we won't be
04:25:53.600 mapping over any default values we'll be
04:25:56.119 just rendering different form Fields one
04:25:58.040 by one so the first one will be a form
04:26:00.920 field that'll have a name of title and
04:26:03.760 we can remove the rest then it'll render
04:26:05.800 a form item with a class name equal to
04:26:09.159 flex flex-all and the gap of
04:26:12.960 one with a form label of class name
04:26:17.720 text-base font dormal and text- dark
04:26:22.920 500 and here we don't have to do any
04:26:25.159 kind of magic here mapping over the
04:26:26.920 items in this case we can make it simple
04:26:29.279 so I have shown you both of how we can
04:26:31.239 make it super reusable by mapping over
04:26:33.760 all of the fields similarly to what we
04:26:35.760 have done within the OD form and then
04:26:37.880 here we can literally just say hey this
04:26:40.159 is a single form field doing a single
04:26:42.080 thing thing so let me spell it out for
04:26:43.800 you book title after that we have a form
04:26:46.239 control which will render just a simple
04:26:48.920 input so the only thing we can keep is
04:26:50.680 an input which will be required it'll
04:26:52.880 have a
04:26:54.080 placeholder equal to book title we'll
04:26:58.279 spread the field and it'll have a class
04:27:00.279 name of book-
04:27:02.600 formore input finally we can exit the
04:27:05.640 form control render the form message
04:27:08.239 remove all of these additional
04:27:10.800 parentheses and move the button that we
04:27:13.080 have at the bottom and this should leave
04:27:15.040 us with a pretty straightforward looking
04:27:17.720 form we did do a lot of the cleanup you
04:27:20.399 can see some values are still unused
04:27:22.359 we'll use them
04:27:23.560 soon and we can definitely remove many
04:27:26.040 of the Imports here as well as here and
04:27:29.000 here bam only now I can see how big and
04:27:31.760 reusable the initial odd form really was
04:27:34.600 now that I see how many Imports there
04:27:36.159 are but as you can see now we have a
04:27:38.560 very clean and straightforward not odd
04:27:41.800 form we can actually rename this to book
04:27:46.159 form and we can rename it at the bottom
04:27:48.920 allowing us to create new
04:27:50.840 books so far we only have one single
04:27:53.800 form field which is the book title but
04:27:56.680 we actually need many many more the full
04:27:59.520 form will look something like this
04:28:01.680 everything from book title to author
04:28:03.840 genre total number of books book image
04:28:06.359 primary color video and so on so the
04:28:10.199 reason why I didn't just map over all of
04:28:11.920 these these inputs and do it similar to
04:28:14.040 the OD form is because here we have a
04:28:16.640 couple of different types of inputs the
04:28:18.680 first three are regular text inputs the
04:28:21.040 fourth one is a number input then we
04:28:24.000 have two different file uploads one for
04:28:26.560 images and one for videos that'll be
04:28:28.640 exciting then we have a specialized
04:28:31.000 hexadecimal input for color selection
04:28:33.479 and finally we have a long text area for
04:28:35.920 the book summary so let's go ahead and
04:28:37.920 code out all of these inputs I think the
04:28:39.880 simplest way to do that is to Simply
04:28:42.159 copy this form field and duplicate it
04:28:44.560 below now if you go back you immediately
04:28:47.720 have two different inputs but this time
04:28:49.880 we'll change the name from title to
04:28:52.159 author we'll also change the form label
04:28:54.439 to say author and then in the input we
04:28:56.600 can just say something like book author
04:28:59.760 there we go as simple as that let's also
04:29:02.199 copy it one more time and paste it just
04:29:05.800 below this time we won't be dealing with
04:29:08.439 the author we'll be dealing with the
04:29:09.880 genre of the book so let's say genre or
04:29:12.840 the category and then here we can say
04:29:15.040 book
04:29:16.199 genre there we go now let's go for the
04:29:19.600 fourth one so I'll copy the same input
04:29:21.880 once again but this time we'll have to
04:29:23.479 modify it just a bit this time it'll be
04:29:25.720 rating so we can say rating here as well
04:29:29.239 and we can say book rating and change
04:29:32.279 the type over to number okay pretty cool
04:29:35.560 right I think the number also allows us
04:29:37.840 to provide a Min and a Max so if I set
04:29:40.359 Min to one and Max to 5 I actually
04:29:43.680 believe it'll limit it from 1 to 5 there
04:29:46.560 we go this is pretty cool right after
04:29:48.800 that we can copy this input or form
04:29:51.680 field and create another one for the
04:29:54.279 total number of copies so I can say
04:29:56.399 total copies and then say total copies
04:29:59.239 here and
04:30:00.680 finally total copies here as well I
04:30:03.640 think the max here is 10,000 so I'll set
04:30:06.119 it to 10,000 and set to Min to be equal
04:30:08.960 to zero or if we're adding a book it
04:30:11.279 must be one right right after that we
04:30:13.080 can duplicate this form field one more
04:30:15.080 time this time we're dealing with a
04:30:17.159 cover URL for this book so we can change
04:30:21.439 the form label to book image and then
04:30:24.520 within the form control for now I'll
04:30:26.479 leave it empty because here we want to
04:30:28.479 have a specialized file upload component
04:30:32.479 even though so far we've created an
04:30:34.040 image upload we'll take that image
04:30:36.040 upload and make it more reusable to
04:30:38.359 allow us to upload both images and
04:30:40.680 videos we can also duplicate it one more
04:30:43.279 time this one will deal with the cover
04:30:45.680 color so we can say primary color here
04:30:48.760 as well and instead of rendering a file
04:30:51.359 upload here we'll Implement a Color
04:30:54.359 Picker which we don't yet have so we'll
04:30:56.600 also leave it commented out for now and
04:30:58.920 I'll duplicate it once more this time
04:31:01.119 for the description so I'll say
04:31:03.199 description the form label will say book
04:31:07.239 description and within the form control
04:31:09.560 we can render a text area element text
04:31:12.080 area has to be added from shaten and we
04:31:14.760 haven't installed it yet so let's do
04:31:16.479 that now by saying MPX shaten add latest
04:31:20.960 add text area there we go it got added
04:31:24.560 very quickly so let's one more time
04:31:27.319 import it from a proper
04:31:29.960 place it's coming from UI components
04:31:33.520 it's a self-closing component that has a
04:31:36.080 placeholder we can say something like
04:31:38.279 book description let's also spread all
04:31:40.359 the field information into it so we can
04:31:42.479 modify the form give it 10 rows because
04:31:45.720 somebody might write a long description
04:31:48.319 and then give it a class name of book-
04:31:51.840 formore input just to make it look a bit
04:31:54.600 nicer finally below it we'll have
04:31:56.720 another file upload so I'll copy the
04:31:59.319 initial cover
04:32:01.520 URL and paste it below the book
04:32:05.199 description and this one will say video
04:32:10.279 URL and it'll say book video or we can
04:32:15.080 call it book
04:32:16.720 trailer and here we also have to
04:32:18.880 implement a file upload component
04:32:21.159 finally we'll have a summary a book
04:32:23.680 description is a bit different than a
04:32:25.080 book summary but they're still similar
04:32:27.600 so I'll go ahead and copy the book
04:32:29.880 description form field and paste it
04:32:32.479 right here at the bottom and call it
04:32:35.479 summary book summary change the
04:32:38.279 placeholder to book summary maybe make
04:32:41.199 it five
04:32:42.680 rows I think we're good finally what
04:32:45.600 would the form be without a button so
04:32:47.920 right below the last form input let's
04:32:50.399 create a button a button that will say
04:32:53.119 add book to library it'll have a type of
04:32:56.920 submit so it'll submit the full form and
04:32:59.960 a class name equal to book-
04:33:05.000 formore
04:33:06.840 BTN so it'll look something like
04:33:10.160 this we can also get it a text- white
04:33:14.438 property there we go so with that in
04:33:17.039 mind we have just built out the entire
04:33:19.199 UI of our form it looks good on mobile
04:33:21.799 but here's how it looks like on desktop
04:33:23.879 of course it could have been further
04:33:25.320 stylized by maybe making the book title
04:33:28.118 take half a row and then the author
04:33:30.080 could take another half a row but you
04:33:32.400 know what with these admin dashboard
04:33:34.840 applications design is never what
04:33:37.160 matters you know how I always talk about
04:33:39.400 how UI ux and design really matter
04:33:41.879 because people are visual beings well it
04:33:43.919 does matter on public client facing
04:33:46.160 websites does it matter in an admin
04:33:48.240 dashboard that only people adding those
04:33:50.359 books will see not at all there the most
04:33:53.160 important thing is that it's simple to
04:33:55.118 understand and simple to use so we can
04:33:57.160 very quickly go here and add new books
04:34:00.639 in a matter of seconds so with that in
04:34:03.039 mind we now have a nice skeleton of the
04:34:05.480 form but we're still missing some Fields
04:34:08.359 so let's go ahead and add them in the
04:34:10.199 next lesson
04:34:13.400 for admins to be able to add new books
04:34:15.639 to the library they need to be able to
04:34:17.840 upload some files be that a book in a
04:34:20.359 PDF format maybe a cover image of that
04:34:23.080 book or even a video trailer they'll
04:34:25.480 need to upload some files and make them
04:34:27.799 accessible for everyone to see so back
04:34:30.520 on the public facing website we can
04:34:32.561 quickly retrieve those files and show
04:34:34.359 them to the users if you remember we
04:34:36.438 already had to do something like that on
04:34:37.958 our signup page where we provided the
04:34:40.000 users with the ability to upload their
04:34:42.199 University ID card and for that we used
04:34:44.719 image kit and created this image upload
04:34:47.118 component now since we'll have to upload
04:34:49.359 both videos and images let's modify that
04:34:52.278 image upload component to handle uploads
04:34:54.561 of both of these file types I'll rename
04:34:57.000 the image upload component to file
04:35:00.561 upload and will once again use image
04:35:03.278 Kit's grade feature to allow us to
04:35:05.320 upload those images and now even videos
04:35:08.480 and then later on very easily deliver
04:35:10.840 them to our user
04:35:12.160 to do that first let's accept some more
04:35:14.438 props into our file upload component
04:35:17.199 I'll leave the on file change here but
04:35:19.400 I'll actually copy its type declaration
04:35:22.359 and I'll just change it to props because
04:35:24.359 we'll be adding many more props to it so
04:35:26.599 let me declare a new interface called
04:35:28.919 props right here and Define the on file
04:35:31.919 change type but on top of that we want
04:35:34.199 to add many more Fields such as type to
04:35:38.320 allow us to figure out whether we want
04:35:40.000 to accept an image or a video next we
04:35:43.118 have the accept property I'll explain
04:35:45.240 very soon what that does a placeholder
04:35:48.320 also of a type string a folder in which
04:35:50.561 you want to place that file a variant
04:35:53.958 which can be either dark or light and
04:35:56.639 finally the on file change so now let's
04:35:59.278 accept all of these props right here so
04:36:01.199 we can later on pass them into this new
04:36:03.400 reusable file upload component I'll be
04:36:06.000 getting a type accept placeholder folder
04:36:11.039 variant and on file change great from
04:36:14.919 before we have this ik upload ref
04:36:17.840 allowing us to upload those files and we
04:36:20.240 have a state allowing us to set that
04:36:22.160 file to the state I'll introduce yet
04:36:24.400 another state right here called
04:36:27.320 progress and set progress at the start
04:36:30.359 set to zero image kit will very easily
04:36:32.879 allow us to track the progress of our
04:36:34.639 upload which is super handy for larger
04:36:37.199 files or videos then we can Define some
04:36:39.561 Styles right here at the top so we can
04:36:41.278 very easily use them later on within the
04:36:43.438 code we can Define the styles for the
04:36:45.879 button depending on the variant so if
04:36:48.680 the variant is triple equal to dark that
04:36:51.719 means that we're showing this component
04:36:53.480 on the public facing website not on the
04:36:55.719 admin dashboard in that case we can give
04:36:58.199 it a BG dark of 300 but if we're showing
04:37:01.359 it on the admin dashboard we can give it
04:37:03.520 a BG light of 600 border gray of 100 and
04:37:09.680 a border we can also mod modify the
04:37:11.958 color of the placeholder so if the
04:37:14.199 variant is triple equal to dark we can
04:37:17.438 change the text to light 100 else it can
04:37:22.639 be text- slate d500 and finally we can
04:37:26.879 create styles for the text itself where
04:37:29.278 if the
04:37:30.359 variant is triple equal to dark in that
04:37:33.958 case we can change the color to light
04:37:36.438 100 else we can have dark 400 the on
04:37:40.799 eror that's we had here will remain the
04:37:43.000 same but we'll just say not image right
04:37:45.919 here we'll say type upload
04:37:49.359 fail which will look something like this
04:37:51.958 so if it's an image it'll say image
04:37:53.879 upload failed else it'll say video
04:37:55.919 upload failed same thing here I'll just
04:37:58.799 change this over for type we can also
04:38:01.160 collapse everything that we don't need
04:38:03.080 so Styles and the on error after that we
04:38:06.039 have the on success where we can do the
04:38:08.719 same thing instead of saying image we
04:38:10.599 can say type upload failed and then we
04:38:13.320 can leave this the same perfect now an
04:38:15.879 additional thing that we can do with
04:38:17.320 image kit is provide validation for the
04:38:20.080 files we're uploading so I'll say const
04:38:22.719 on
04:38:23.680 validate is equal to a function where we
04:38:26.799 accept a file of a type file and then we
04:38:29.639 can check if the type of the file is
04:38:33.000 image and if the file size is greater
04:38:36.639 than 20 * 124 * 124 which is is 20
04:38:41.879 megabytes we can return some kind of a
04:38:45.080 toast where we can say title file size
04:38:49.039 too large upload a file that is less
04:38:51.840 than 20 megabytes in size and a variant
04:38:54.160 of destructive and after the toast we
04:38:56.480 can return false as in we're not going
04:38:59.080 to validate this we're not going to let
04:39:00.480 it slide we can exit this if the one
04:39:03.118 that says type is image and add an else
04:39:05.719 if and check if type is triple equal to
04:39:09.719 video if that is the case we want to
04:39:12.160 check if file. size is greater than 50
04:39:15.438 megabytes so that's 50 * 124 * 124 and
04:39:20.799 we want to do a similar thing saying
04:39:22.680 file size too large upload a file that
04:39:24.958 is less than 50 megabytes in size and
04:39:27.400 once again we want to return false oh
04:39:29.561 and it looks like I added an else on the
04:39:31.561 wrong if the else was actually supposed
04:39:34.320 to go under this if so let me actually
04:39:36.759 copy this part of the
04:39:38.160 code and put it one if below
04:39:43.200 there we go this is good so now we have
04:39:44.958 if image and then we have an else if
04:39:47.200 video perfect and if we reach outside of
04:39:50.040 both of these ifs that means that we can
04:39:51.878 say return true the validation is good
04:39:55.000 finally we can now improve our image kit
04:39:57.480 upload to make it more versatile more
04:40:00.160 robust and more flexible we'll do that
04:40:02.840 first by defining the ref attached to
04:40:05.040 this I upload after the ref we have an
04:40:07.760 on error and on success we can remove
04:40:10.560 this file name right here and then we
04:40:12.680 have a class name hidden because
04:40:14.240 remember we wanted this component to
04:40:16.040 look nicer so we're actually hiding it
04:40:18.160 here but then we're calling this
04:40:19.798 component on a click of the button that
04:40:21.958 is then more properly styled and now we
04:40:24.400 can use many different props that image
04:40:26.600 kit provides out of the box that give
04:40:28.280 you additional
04:40:29.600 functionality such
04:40:31.400 as use unique file name and we can said
04:40:35.520 that to
04:40:36.638 True validate file and here we can call
04:40:40.000 on validate
04:40:42.000 on upload start we can call the set
04:40:44.520 progress and set it to zero on upload
04:40:47.760 progress you get access to a callback
04:40:50.080 function where you can destructure the
04:40:52.320 loaded property as well as the total and
04:40:55.040 then you can return the percentage by
04:40:57.638 calculating it by doing math. round and
04:41:01.400 then dividing the loaded by the total
04:41:04.600 and multiplying it by 100 to get a
04:41:07.000 percentage and then you can set progress
04:41:09.360 to be equal to percent so this allows
04:41:11.878 you to very neatly track percent by
04:41:14.878 percent how your upload is going we can
04:41:17.280 also Define to which folder we want to
04:41:19.520 upload this file and we can also pass
04:41:21.520 the accept equal to accept we'll modify
04:41:24.878 this variable to say something like
04:41:26.920 image everything or video everything for
04:41:29.718 now we'll just leave it like this
04:41:31.160 Dynamic so whenever we change the type
04:41:33.920 from image to video we can also modify
04:41:36.360 which types of files do we accept great
04:41:38.798 I think that's more or less it for the
04:41:40.280 ik upload and we were using that one on
04:41:42.718 o form right so let's actually go ahead
04:41:45.080 and log out and head over to create an
04:41:48.040 account there we go it's still looking
04:41:49.878 the same we still have to test the
04:41:51.360 functionality though so let's scroll
04:41:53.160 down here we have the upload button but
04:41:56.000 alongside that class name I'll also
04:41:58.080 provide some additional Styles so I'll
04:42:00.600 say CN and always it'll have the upload
04:42:04.320 BTN class name but then we'll also
04:42:06.840 provide it styles. button which will
04:42:08.920 change it depending on whether we're on
04:42:11.000 the public facing website or on the
04:42:12.958 admin dashboard then within the button
04:42:15.280 we have the image below it we have a
04:42:17.680 piece of text so let's style it as well
04:42:19.920 by giving it a CN property of
04:42:23.000 text-base and then give it a styles.
04:42:26.798 placeholder and here we can dynamically
04:42:29.160 render a placeholder text because now
04:42:31.200 we're making this component reusable and
04:42:33.400 right below this P tag we can check if a
04:42:35.760 file has been uploaded so if file is
04:42:38.440 there then render a P tag that will
04:42:40.920 render under defile. file path and it
04:42:44.280 can have a class name equal to
04:42:47.400 CN of upload file name and a styles of
04:42:52.560 text I noticed that this file upload
04:42:54.760 change color right now and it doesn't
04:42:56.760 look that good also remember how our
04:42:58.638 toast component didn't look that good I
04:43:00.560 think that's because when setting up
04:43:02.000 shat CN I actually chose to use CSS
04:43:05.000 variables but I think we can change that
04:43:07.958 if we head over to components. Json file
04:43:10.320 you see CSS variables to set to true we
04:43:12.878 can set that over to false and that'll
04:43:14.638 make it not use the CSS variables which
04:43:17.200 will then fix some overrides in shats
04:43:19.360 and components that will not fix this
04:43:21.320 button though this one is white because
04:43:23.480 we are not yet passing the prop of
04:43:26.080 variant to this component we'll do that
04:43:28.718 very soon but before let's just finalize
04:43:31.240 what shows up when we actually upload
04:43:33.200 the file right here below this button we
04:43:36.080 can show the progress yep now we have
04:43:38.520 that too so we can say progress if if
04:43:41.160 it's greater than zero then we can
04:43:43.400 display a
04:43:45.120 div with a class name of
04:43:48.480 w-o rounded Dash fo BG green of 200
04:43:54.200 within it yet another div with a class
04:43:57.320 name of
04:43:58.878 progress and a style of width and what
04:44:03.160 will be as long as the progress is so we
04:44:06.440 can say progress and then percentage so
04:44:10.040 width will be 1% % 2% 3% and it'll go
04:44:13.840 all the way to 100% as the progress
04:44:16.320 reaches the Finish finally within it we
04:44:18.560 can also display a progress percentage
04:44:21.878 now you cannot see it because it's zero
04:44:23.920 but you'll see it soon as we start
04:44:25.560 testing some file uploads and finally
04:44:28.920 here if a file exists we were showing a
04:44:31.360 preview of that file but now we can show
04:44:34.440 a different thing depending on the file
04:44:36.240 type so if file exists and if type is
04:44:41.040 triple equal to image in that case
04:44:43.878 render whatever we had here an ik image
04:44:48.160 with a path and Al tag a width and a
04:44:51.000 height but else if type is triple equal
04:44:54.600 to
04:44:56.000 video then render ik video which is a
04:45:00.480 self-closing component that accepts a
04:45:03.400 path equal to file. file
04:45:06.920 path controls equal to true as well as a
04:45:11.240 class name equal to
04:45:13.760 h-96 w-o and rounded D excl and finally
04:45:18.958 if it's neither image or video then
04:45:20.840 simply show null there we go are you
04:45:23.120 excited to test it we can first test it
04:45:25.638 within the OD form to make sure that we
04:45:27.520 didn't break anything so let's head over
04:45:30.360 to our OD
04:45:32.280 form.
04:45:33.920 DSX and let's properly use this
04:45:37.240 form you can see my webstorm
04:45:39.520 automatically changed the file name for
04:45:41.240 me to file upload you might have needed
04:45:43.200 to do that
04:45:44.360 manually but now it's saying that we
04:45:46.440 need to pass some different kinds of
04:45:48.000 props like type accept placeholder
04:45:50.878 folder variant and more so let's do just
04:45:53.920 that the type in this case will be image
04:45:56.520 because that's what we're uploading we
04:45:58.280 can also say that accept will be equal
04:46:00.400 to image SL asterisk meaning any kind of
04:46:04.440 image type placeholder will be equal to
04:46:08.958 upload your ID folder will go into IDs
04:46:13.320 so you can choose where you want to
04:46:14.480 place that image variant will be dark
04:46:17.560 because we're on our public facing
04:46:18.878 website with a dark theme and then on
04:46:21.280 file change is equal to files.on change
04:46:25.000 let's fix this typo and no more warnings
04:46:28.080 and it is looking great matching the
04:46:30.000 Dark theme so what do you say that we
04:46:31.878 tested out just before doing that I'll
04:46:33.878 head over to local. drizzle. studio and
04:46:36.878 I'll remove all of the users that are
04:46:38.600 currently here I notice we have a lot of
04:46:40.558 you we testing already sorry about that
04:46:43.040 I'll need to have a clean slate while
04:46:44.400 developing to test everything properly
04:46:46.920 bye-bye now I'll enter my
04:46:49.680 email I'll enter my password as well as
04:46:53.120 a full name and my University ID and
04:46:57.240 most importantly we'll try to upload our
04:46:59.558 University ID card so let me click
04:47:02.680 here and select it you can immediately
04:47:05.958 see the progress bar appear but it looks
04:47:08.160 like the file name is too long so head
04:47:10.200 over into your file upload and first of
04:47:12.400 all let's hide the progress if it
04:47:14.080 reaches 100 so if progress is greater
04:47:16.798 than zero and progress is not equal to
04:47:21.360 100 so if we do that you'll now see that
04:47:23.160 the progress is gone but we also need to
04:47:25.240 remove this name right here so it could
04:47:27.520 be this file path right here I think
04:47:29.718 it's fine if we even just remove that or
04:47:31.558 comment it out yep it looks a bit better
04:47:34.558 that way so let me actually remove
04:47:37.000 that and now let's go ahead and click
04:47:39.240 sign up to fully test out our new form
04:47:41.798 there we go it looks like an account is
04:47:43.480 being created oh but we do have a sign
04:47:45.840 of error even though it's hard to spot
04:47:47.760 it with this broken toast it looks like
04:47:49.718 it fails right here where we're trying
04:47:51.600 to trigger the workflow so we'll need
04:47:53.400 this production URL Even in our local
04:47:55.400 enironment because our workflows can
04:47:57.280 still be triggered so let me head over
04:47:59.718 to our env. loal I'll head over to my
04:48:02.680 versel environment variables and I'll
04:48:05.040 grab the next public prod API endpoint
04:48:08.440 and just copy it so that'll look
04:48:11.240 something like this next public prod API
04:48:14.840 endpoint is equal to your deployed URL
04:48:17.480 once you do that we should get a 200 but
04:48:20.240 it looks like I was trying to sign up
04:48:21.840 with an already existing user so I'll
04:48:24.120 just use another email right here and
04:48:26.240 then click sign up and I'll have to
04:48:27.920 change my University ID as
04:48:30.878 well there we go we have successfully
04:48:33.600 signed up and uploaded our ID let's just
04:48:36.280 see if we can properly retrieve it by
04:48:38.520 finding my user right here and then
04:48:40.798 heading over to the university card and
04:48:42.798 you can see that this even though it
04:48:44.760 seems like it's a URL it's actually a
04:48:47.040 path pointing to where this image is
04:48:49.080 stored within image Kit's file storage
04:48:51.878 so head out to your image kit dashboard
04:48:54.040 and then go over to media
04:48:56.000 library right there you should see a
04:48:57.958 folder called IDs and if you double
04:49:00.280 click into it you can see all of the
04:49:02.080 different users identity cards safely
04:49:04.480 stored with all of the corresponding
04:49:06.160 information metadata Tags and More not
04:49:10.040 to mention that we can also edit this
04:49:12.000 image right here with many different
04:49:14.120 editing options and since in our code we
04:49:16.520 are referring to this path right here
04:49:18.958 pointing to this image whatever
04:49:20.760 operations you perform on this image
04:49:22.920 such as remove backgrounds or do
04:49:24.840 anything else the changes will
04:49:27.240 immediately be reflected in the code
04:49:30.040 perfect and now that we know that we
04:49:31.878 brought our file upload back to the
04:49:33.920 working State for the O form let's see
04:49:36.638 what it will do for the admin state so
04:49:39.200 if I head over to admin I'll head over
04:49:41.240 to books and create a new book and now
04:49:44.120 we want to use that input here for the
04:49:46.320 image and then right here for the
04:49:48.680 trailer which is going to be a video
04:49:50.240 upload so I'll head over to a form this
04:49:53.638 time a book form and I'll see where we
04:49:56.280 said we want to add an image that is
04:49:59.920 right here file upload for the cover URL
04:50:02.958 Yep this this file upload will act as an
04:50:05.680 image upload so we can simply use it
04:50:07.958 like this I'll say file
04:50:11.240 upload imported webstorm will
04:50:13.718 automatically let me know which props I
04:50:15.400 need it'll be a prop of image accept
04:50:19.440 will be of image/ asterisk meaning all
04:50:22.958 image types placeholder will be upload a
04:50:26.240 book
04:50:27.040 cover folder in this time will be books
04:50:30.878 slash covers variant will be light
04:50:34.040 because we're on an admin dashboard and
04:50:36.080 on file change we can simply call the
04:50:39.400 field on on change and we can also give
04:50:42.280 it a value equal to field. value and we
04:50:46.280 can self close it right here with that
04:50:48.200 in mind you can see how great it looks
04:50:49.840 like here as we made it completely
04:50:51.480 reusable both in terms of the variant so
04:50:54.160 light and dark mode as well as in terms
04:50:56.440 of the placeholder the icon that we show
04:50:58.638 and more now let's copy it and let's
04:51:01.798 move a bit down to where we have the
04:51:04.280 video input or the trailer so I'll put
04:51:07.320 it right here but this time we'll make
04:51:09.520 it upload a video video so we will only
04:51:12.480 accept video
04:51:14.798 files we can say upload a book
04:51:17.718 trailer and it'll go under books
04:51:21.120 videos and the rest can remain the same
04:51:24.240 if you go down you can now see upload a
04:51:26.638 book trailer if I click here you'll see
04:51:29.040 that it'll let me upload a PNG but if I
04:51:31.558 click on upload a book trailer you'll
04:51:33.320 see that it won't let me upload a PNG
04:51:35.480 and instead it is expecting a video with
04:51:38.120 that in mind we have now successfully
04:51:39.840 completed the file upload component but
04:51:42.440 just before we test it out we'll also
04:51:44.160 have to implement one more field which
04:51:46.480 is a Color Picker and then we'll be able
04:51:48.638 to test the entire form out so let's do
04:51:51.200 that
04:51:52.840 next to implement our Color Picker
04:51:55.558 component we'll use a very simple
04:51:57.600 package called react colorful which
04:52:00.200 spins up this nice component allowing
04:52:02.160 you to select a color Hue as well as
04:52:05.120 opacity so let's go ahead and simply
04:52:07.280 install it by running mpm install react
04:52:10.520 D
04:52:11.840 colorful and once it gets installed now
04:52:14.798 let's copy this block of code and let's
04:52:17.280 create a new component called Color
04:52:19.240 Picker under admin components and then a
04:52:23.520 new file called color
04:52:26.920 picker. DSX there simply paste what you
04:52:30.440 copied rename it to Color
04:52:33.878 Picker make sure to export it at the
04:52:36.280 bottom by saying export default Color
04:52:39.520 Picker make sure to import use State as
04:52:43.600 well in this case we'll need the state
04:52:46.080 to manage the color but we'll also open
04:52:48.760 or close this Color Picker so let's also
04:52:51.320 create another used State allowing us to
04:52:54.440 control the is open State at the start
04:52:57.320 set two false when it comes to the props
04:52:59.760 we'll pass into this Color Picker we can
04:53:01.840 Define them right here by saying
04:53:03.638 interface of props will accept a value
04:53:06.760 which is the color value of a type
04:53:08.558 string as well as on picker change which
04:53:12.600 will then accept a color of a type
04:53:15.000 string and return nothing meaning void
04:53:18.120 it'll just modify the color so now we
04:53:21.240 can destructure the value and the on
04:53:23.600 picker change and we can set that equal
04:53:26.680 to the props interface now let's try to
04:53:29.080 use it within the book form component
04:53:31.600 I'll head down right here to where we're
04:53:34.240 referring to the color and I'll import
04:53:37.160 Color Picker coming from components
04:53:39.520 Color Picker and and onp picker change
04:53:41.680 will be equal to field. on change which
04:53:44.440 is provided to us by react hook form and
04:53:46.920 the value will be equal to field that
04:53:48.878 value which is the currently selected
04:53:51.040 color now if we go back you should be
04:53:53.600 able to see something that looks like
04:53:55.440 this and we could already leave it as it
04:53:57.760 is I mean this is more than good enough
04:53:59.760 provides a lot of flexibility but some
04:54:02.480 people might want to specifically choose
04:54:04.718 the color of their book to choose the
04:54:06.840 exact color so for that reason let's
04:54:09.718 head into the color picker let's wrap
04:54:12.120 this return statement in a
04:54:14.558 div with a class name of
04:54:18.080 relative within which we'll have another
04:54:20.400 div with a class name equal to Color
04:54:24.718 Picker now let's put this hex Color
04:54:27.000 Picker right within it there we go this
04:54:29.200 is looking good but what we can do as
04:54:31.440 well is add a hex color input as a
04:54:35.400 self-closing component which is also
04:54:37.680 coming from react colorful and we can
04:54:41.520 provide it the color we can provide it
04:54:43.400 the on change which is going to be the
04:54:45.160 same and we can also give it a class
04:54:47.400 name equal to hex Das input and now we
04:54:50.878 can see the live number of this input
04:54:53.440 and as you change it it changes as well
04:54:55.718 now to make it look a bit nicer we can
04:54:58.120 wrap this hex Color Picker within a
04:55:01.240 div give it a class name of flex Flex D
04:55:05.400 row and items Das Center we can put it
04:55:08.280 within it and we can also render A P tag
04:55:11.240 in front of it which will simply say
04:55:13.000 hash because all heximal colors start
04:55:15.600 with a hash so that'll look something
04:55:18.080 like this and we can maybe leave this
04:55:20.160 hex Color Picker outside of the div so
04:55:22.600 now we can both type the color as well
04:55:25.120 as select it looking great I was wrong
04:55:28.878 we don't even need this is open we made
04:55:30.878 it a bit simpler and we might not even
04:55:33.320 need this state right here of color
04:55:35.558 instead we can automatically use the
04:55:37.400 value that we're passing through props
04:55:39.558 to this component
04:55:40.798 and then on picker change as the on
04:55:42.840 change that way we can automatically
04:55:45.240 change it and you can see that the color
04:55:47.120 changes in real time perfect so that
04:55:50.280 means that the Color Picker is done as
04:55:52.400 well now the last thing is to test the
04:55:54.440 whole UI to see if the data is being
04:55:56.680 logged properly so let's first check if
04:55:59.000 we have any errors or Warnings right
04:56:00.878 here it's saying that this value is red
04:56:03.958 because the value does not exist on type
04:56:06.600 file upload oh this is interesting did
04:56:09.680 we forget to accept the value if we head
04:56:12.520 over to file upload it looks like we
04:56:15.798 don't have the value let's add it
04:56:17.520 immediately so value optional of a type
04:56:20.480 string and we can accept it right here
04:56:22.958 through props value and then if a file
04:56:25.718 exists we can use it right here by
04:56:27.760 setting up the initial state of the file
04:56:29.920 so I'll turn it into an object and say
04:56:32.680 file
04:56:33.718 path is equal to either a value or null
04:56:37.920 if value doesn't exist and since we're
04:56:40.878 doing this object we also have to define
04:56:42.920 the type and it looks like webstorm did
04:56:44.878 it automatically for me saying that this
04:56:46.798 use state will accept a file path of a
04:56:49.200 type string or null so let's just fix it
04:56:52.040 file path is string or null and we can
04:56:55.600 close it right
04:56:57.638 here perfect now a few of these errors
04:57:00.718 are gone we have a few more at the top
04:57:03.638 just unused values and some unused
04:57:06.680 values as well but we should be able to
04:57:08.840 test out all of the inputs so let's head
04:57:10.920 over to the onsubmit and let's actually
04:57:13.040 console log those values right here to
04:57:16.080 see what we're getting back I'll enter
04:57:18.000 some random information for now because
04:57:19.840 we're not yet submitting for real so
04:57:22.200 I'll say test title test
04:57:25.480 author test genre rating can be two
04:57:29.718 copies can be
04:57:32.040 10 we need to enter the book image so
04:57:35.160 for now I'll pick one of our default
04:57:37.080 ones that we have on our homepage
04:57:40.440 so let me upload it right here it'll be
04:57:43.440 this one there we go it nicely shows up
04:57:46.638 we can then select the color to match it
04:57:48.840 I think this one is good we can enter a
04:57:51.680 test
04:57:52.878 description and finally we can enter a
04:57:55.080 title this is a real file that we're
04:57:57.240 about to upload typically for videos I
04:57:59.680 use a website called cover with a
04:58:03.240 r and they allow you to download some
04:58:05.840 free videos so let's get this one with
04:58:08.080 pouring coffee into a mug it'll very
04:58:10.600 quickly download it and I'll be able to
04:58:12.400 upload it as the trailer of this book A
04:58:14.878 book about coffee so if I select pouring
04:58:17.760 coffee stock video you see the progress
04:58:20.600 bar works it uploaded it we can fix this
04:58:22.920 long name very soon but as soon as it
04:58:25.120 loads it you'll be able to play it right
04:58:27.160 here to see whether this is the trailer
04:58:28.920 you wanted to upload looking good oh and
04:58:32.120 silly me I was supposed to be testing
04:58:33.798 this on desktop because that's where
04:58:35.680 most books are going to be added anyway
04:58:37.520 it's not like somebody's going to go on
04:58:39.120 a phone and then add a book there and
04:58:41.360 finally we have a test
04:58:43.440 summary so what will happen if I go
04:58:46.120 ahead and click add book to library
04:58:48.520 let's go to the console clear it and
04:58:51.878 click it it says expected number
04:58:54.680 received string for the rating okay
04:58:56.680 that's interesting let's head over to
04:58:58.480 the rating component which is right here
04:59:01.400 we did specify that the type is number
04:59:03.400 here and if we head over into
04:59:05.920 validations and search for rating we can
04:59:09.200 see that it is a z. number oh but what
04:59:11.840 we should have done instead is coerced
04:59:13.798 it into a number right here by saying z.
04:59:16.600 co. number like this so similar to what
04:59:21.040 we have done with total copies so if I
04:59:23.760 do this and try it one more time it's
04:59:26.520 good to know that the validation is
04:59:27.638 working at least I can go ahead and
04:59:29.920 click add book to library and we get
04:59:32.680 back a conol log of the entire form we
04:59:35.718 get all the information such as the
04:59:37.440 author cover color oh the cover URL is
04:59:40.798 actually here it got uploaded to image
04:59:43.200 kit which means that it is working and
04:59:45.160 same thing happened to the video URL
04:59:47.080 which is amazing test title test summary
04:59:49.840 rating and total copies as a number and
04:59:53.000 the color right here as a hexadecimal
04:59:54.878 value that means that all of the
04:59:56.718 different inputs that should have been
04:59:58.240 accepting numbers strings images videos
05:00:02.440 colors and everything are working
05:00:04.558 properly so now that we know that that
05:00:06.840 is the case we are ready to implement a
05:00:09.240 create book action which will allow us
05:00:12.160 to actually create a book and add it to
05:00:14.878 the database and then later on we'll be
05:00:16.840 able to display it to the public facing
05:00:19.160 Library website so let's do that
05:00:23.480 next to implement a create book action
05:00:27.320 head over to lib create a new folder and
05:00:31.040 call it admin within it create another
05:00:33.958 folder called
05:00:36.160 actions and within actions create a new
05:00:39.360 book. TS
05:00:41.320 file as you already know we have to use
05:00:44.040 the use server directive at the top for
05:00:46.320 the server actions to be executed well
05:00:48.760 on the server and we're ready to add a
05:00:50.840 new book to the database we can do that
05:00:53.760 by creating a new function const create
05:00:57.200 book is equal to an async callback
05:00:59.958 function that accepts some programs of a
05:01:02.360 type book programs we have to Define
05:01:05.958 these in our Global types and we can
05:01:08.558 open up a try and C catch Block in the
05:01:11.120 catch we get access to the error and if
05:01:14.280 something goes wrong we can simply
05:01:15.958 consol log that error and return some
05:01:19.200 kind of an object that'll say success is
05:01:23.240 false and a message saying an error
05:01:25.718 happened while creating a book okay that
05:01:28.160 was pretty simple so what params do we
05:01:30.798 actually need to create a book well
05:01:33.200 let's head over to types. D.S and let's
05:01:36.680 create an interface called book parap
05:01:40.878 and here we can Define different things
05:01:42.400 that we need to pass over such as a
05:01:44.520 title of a type string an author of a
05:01:47.878 type string as well a genre of a type
05:01:50.680 string a rating of a type number a cover
05:01:54.360 URL of a type string a cover
05:01:58.120 color of a type string a description of
05:02:02.200 a type string the number of total copies
05:02:06.040 so total copies which is going to be a
05:02:08.360 number video URL which will be a string
05:02:12.400 and a summary which will be a string as
05:02:14.798 well and now that type should
05:02:16.558 automatically be recognized right here
05:02:18.680 at the top next let's actually create a
05:02:20.878 new book and you might think how are we
05:02:23.558 going to do that this is the second time
05:02:25.160 we're doing a creation action within our
05:02:26.840 code we already created users and trust
05:02:29.480 me neon and drizzle make it super simple
05:02:32.680 I'll just say const new book is equal to
05:02:36.840 await db. insert we're going to insert
05:02:41.400 the books schema so we're going to get
05:02:43.520 the books and we're going to insert into
05:02:45.440 the books schema so we have to get those
05:02:48.240 books and that means that we have to
05:02:49.840 create a new postgress table so we have
05:02:53.320 to head over to schema. TS and create a
05:02:56.840 new one for the table similarly to what
05:02:59.120 we did with the users let's go ahead and
05:03:01.160 do that right below by saying export
05:03:04.080 const books is equal to PG table where
05:03:07.920 we can Define that specific name name of
05:03:10.200 the table which is books and then Define
05:03:12.958 all of the fields that it'll have it'll
05:03:15.200 have an ID of a type uu ID with the name
05:03:18.638 of
05:03:19.840 ID which is not null it is the primary
05:03:23.558 key and by default it'll be random and
05:03:27.080 unique we also need to get a title which
05:03:29.958 is a varar meaning it's just a string of
05:03:32.360 Max 255 characters and it must not be
05:03:35.760 null we can do a similar thing with the
05:03:38.320 author by simply saying author is a VAR
05:03:42.200 Char with the name of author that is not
05:03:45.360 null after that we can have a genra
05:03:48.798 which is going to be a text of genre and
05:03:51.878 it must not be null after that we'll
05:03:54.160 have a rating which will be an integer
05:03:56.080 meaning a number called rating and it
05:03:59.440 will not be null so we can say Do not
05:04:01.638 null after that we'll have a cover URL
05:04:04.240 which will be of a type text and we have
05:04:06.958 to pass the name of cover uncore URL
05:04:10.840 which will also not be null after that
05:04:13.718 we have a cover color which will be a
05:04:17.040 varar and it'll be called cover uncore
05:04:20.000 color with a max length of seven
05:04:23.120 characters and it must not be null seven
05:04:26.958 because it's six numbers and a hash to
05:04:29.798 create a hexadecimal value then we get a
05:04:32.718 description which is a text of
05:04:34.320 description and not null we can also get
05:04:36.558 a number of total copies which is an
05:04:38.760 integer that is is not null and the
05:04:41.120 default value can be set to one after
05:04:43.638 that we have available copies which will
05:04:46.240 be an integer of available copies that
05:04:48.440 is not null and the default will be set
05:04:50.718 to zero finally we have a video URL
05:04:54.558 which will be a text of video URL that
05:04:59.360 is not null we can do a similar thing
05:05:02.160 with the summary which will be a
05:05:05.040 varar of summary that is not null and
05:05:09.200 finally a created ad field that'll be of
05:05:12.040 a type timestamp called created ad with
05:05:15.360 time zone true and it'll default to now
05:05:18.760 and this is our book schema now we can
05:05:21.520 head back over to book. DS and insert it
05:05:25.120 into books coming from schema. TS what
05:05:28.160 are we going to insert well we're going
05:05:29.958 to insert the following values we're
05:05:32.480 going to Simply spread all the prams
05:05:34.558 coming from a book and we'll set the
05:05:36.798 available copies to be equal to super
05:05:40.240 rams. total copies because we're just
05:05:43.240 creating it for the first time so all
05:05:45.120 the books are available and then we can
05:05:46.798 also say dot returning returning simply
05:05:49.958 means that we want to get that value
05:05:51.520 back that was just created in the
05:05:52.958 database oh and looks like I forgot to
05:05:55.160 import the DB from drizzle there we go
05:05:58.798 so once we created we can just return a
05:06:01.360 success of true and we can return the
05:06:04.480 data of json.parse
05:06:07.638 json. stringify just to make sure to
05:06:10.120 properly move it over to our front end
05:06:12.240 from the server action and we're going
05:06:14.040 to return the new book zero because
05:06:17.200 that's the one and only book that was
05:06:19.080 created and let's not forget to add the
05:06:21.400 export right here in front of our server
05:06:23.760 action completing its functionality and
05:06:26.200 allowing us to use it within our form
05:06:28.400 that's it that's all there is to it it
05:06:30.638 took us a bit more time because we
05:06:32.120 actually had to create a book schema but
05:06:34.360 in all future mutations it's going to be
05:06:36.520 even easier it is basically a couple of
05:06:39.080 lines of code so let's integrate it
05:06:41.638 within our book form which we completed
05:06:44.240 just recently we'll do it within the
05:06:46.600 onsubmit function I'll say const result
05:06:50.480 is equal to await create book and this
05:06:54.718 is coming from our actions to it we want
05:06:57.400 to pass all of the values from the form
05:06:59.920 see how simple it is once you make the
05:07:01.718 form and typescript and Zod and
05:07:04.320 validation and all of these different
05:07:05.798 tools work together you can pass exactly
05:07:08.000 what you get you can get exact actly
05:07:09.798 what you want and everyone's happy so
05:07:12.520 let's check if result is equal to
05:07:15.280 success or result. success is true then
05:07:18.320 we can return a toast which will render
05:07:21.000 a title of success and it'll also render
05:07:24.718 some kind of a description of book
05:07:27.440 created successfully don't forget to
05:07:30.320 import the toast at the top and after we
05:07:32.798 show the toast we also want to use the
05:07:35.000 router. push and push to/ admin SL book
05:07:40.440 slash and then result. dat. ID allowing
05:07:44.878 you to see the details of the book that
05:07:46.760 you just published else if result is not
05:07:49.400 success we can simply show a toast
05:07:52.440 that'll render a title of error it'll
05:07:56.600 render some kind of a description of
05:07:59.120 result.
05:08:01.200 error and finally the variant will be
05:08:05.120 set to destructive there we go and looks
05:08:08.280 like typescript is complaining bit about
05:08:09.920 this error I think it was result.
05:08:12.360 message there we go that's good so with
05:08:15.558 that in mind the only thing that's
05:08:17.200 remaining for us to do is test the book
05:08:19.840 creation process and to do that I'll
05:08:22.160 open up our public facing website where
05:08:24.160 we have mock data for now and our admin
05:08:26.958 panel to turn that mock data into a real
05:08:29.480 book in the database so let's go ahead
05:08:31.638 and copy all the parts from the book
05:08:33.798 title to
05:08:36.240 author you can follow the same thing and
05:08:39.520 then category as well we can do the
05:08:41.360 rating which is
05:08:42.760 4.6 total copies is 20 looks like I
05:08:45.958 already entered this book title before
05:08:47.958 but you can basically just save image as
05:08:50.080 and then upload it here you can choose
05:08:51.798 the primary color that matches the
05:08:53.520 covers I think it's somewhere near here
05:08:56.120 like a darkish purplish color we have a
05:09:00.000 description and then a book trailer can
05:09:02.280 remain this Coffey right here telling us
05:09:04.360 how we can pour ourselves a nice cup of
05:09:06.440 coffee while reading it for now I'll
05:09:09.400 leave the summary to be equal to the
05:09:12.520 description and let's give it a shot if
05:09:15.280 everything works our server action
05:09:17.120 should be triggered and it should create
05:09:19.040 a new book I'll say add book to library
05:09:21.878 oh the rating should actually be an
05:09:23.240 integer this is interesting if you want
05:09:25.958 you can turn it into a float which would
05:09:27.798 allow you to have decimal values but in
05:09:29.878 this case I'll just bring it over to
05:09:31.400 five I'm feeling generous today and I'll
05:09:34.040 add it to the library considering we
05:09:36.200 didn't get redirected I'm guessing an
05:09:38.000 error has happened and if you go into
05:09:39.840 our terminal you'll notice an error
05:09:42.120 right here saying neon DP error relation
05:09:45.360 books does not exist and I'm actually
05:09:48.280 super glad that this happened because
05:09:50.958 this is something that happens to
05:09:52.240 everybody and happens often so the
05:09:54.520 sooner you start understanding why this
05:09:56.440 happened and you start putting into
05:09:57.920 practice to automatically generate and
05:10:00.000 migrate over your database as soon as
05:10:02.240 you change the schema the better
05:10:04.280 remember how I told you that whenever
05:10:05.718 you change the schema you'll have to
05:10:07.480 then rerun the commands that we added
05:10:09.360 over to our package.json it's generate
05:10:12.680 and
05:10:13.558 migrate so let's do just that I'll go
05:10:17.280 into our new terminal and run mpm run DB
05:10:20.840 generate you can see it provided a new
05:10:23.120 SQL migration and then I'll say mpm run
05:10:26.680 DB migrate we have that warning as
05:10:29.600 before but no errors which means that
05:10:31.558 we're
05:10:32.440 good and if you check out our migrations
05:10:35.798 you'll see a second SQL file which
05:10:38.520 simply adds to the first one so it
05:10:40.520 doesn't have to repeat the creation of
05:10:42.200 those tables they're already there but
05:10:44.400 now it created a new table for books and
05:10:47.120 with that the relation books should
05:10:49.120 actually exist and we should be able to
05:10:50.878 create it so let me click add book to
05:10:53.480 library and we get success and even
05:10:56.160 though we're seeing a 404 error here
05:10:58.160 that's good we just got redirected to
05:11:00.600 the book Details page which we haven't
05:11:02.360 yet created but that's a good sign so
05:11:05.240 head over either to your drizzle Studio
05:11:07.480 or to Neon tables
05:11:10.400 where you'll be able to see your
05:11:11.718 database and a new table should appear
05:11:14.360 called books where we can see all the
05:11:16.480 information such as the title of
05:11:18.240 Midnight Library Matt who is the author
05:11:21.200 genre rating and more it is all here
05:11:24.878 which means that our book creation
05:11:26.440 process is fully functional but there's
05:11:28.680 one problem with it everybody can head
05:11:31.120 over from just a general URL over to
05:11:34.958 admin books new and create a new book
05:11:37.600 that doesn't feel right does it
05:11:39.798 they need to have privileges to be able
05:11:41.360 to create a book so let's head over to
05:11:44.360 app admin layout and let's add a check
05:11:49.480 alongside checking whether a user exists
05:11:51.558 we also need to check whether that
05:11:52.958 currently logged in user is an admin so
05:11:55.760 I'll say const is admin is equal to
05:11:59.958 await DB coming from drizzle. select we
05:12:04.480 want to select only the is admin field
05:12:07.280 which is under users.
05:12:09.718 we want to select it from users where we
05:12:14.080 have an equality of users ID which
05:12:17.638 matches the currently logged in user
05:12:19.840 which is the session. user. ID we can
05:12:23.200 limit it to only return one user and we
05:12:25.878 can run a do then on it and check the
05:12:29.200 response and if the response zero
05:12:32.400 question mark do is admin is triple
05:12:35.400 equal to admin all operas then that
05:12:39.240 means that we want to return true so by
05:12:42.040 default when you're making an equality
05:12:44.920 comparison the output of that is a
05:12:46.958 bullion so if this matches this function
05:12:49.718 will return true and if this function
05:12:51.760 returns true that true will be
05:12:53.400 transitioned over to this is admin
05:12:55.240 variable so the only thing we have to do
05:12:57.520 is say if not is
05:13:01.600 admin then we can redirect over to
05:13:05.200 forward
05:13:06.878 slash so let's test it out reload your
05:13:10.040 page and then if you try to sneak your
05:13:12.000 way over to the admin interface of this
05:13:14.280 great Library management platform you'll
05:13:16.200 Simply Be redirected to the public
05:13:17.920 facing website access denied for now
05:13:21.040 just to allow ourselves the access to
05:13:22.878 the platform you can find your user in
05:13:24.798 the
05:13:26.240 database find the role right here which
05:13:28.878 is currently user and manually switch it
05:13:31.360 over to admin if you do that head back
05:13:34.160 to the app and head over to admin you'll
05:13:37.000 see that it'll work because now we have
05:13:38.760 the necessary permissions later on we'll
05:13:41.000 implement the ability to change the user
05:13:42.760 role directly from the admin side but
05:13:45.320 for now this is good too now finally
05:13:47.638 that we can create new books and now
05:13:49.558 that we know that they have been added
05:13:50.840 to the database we are ready to display
05:13:52.958 them on the homepage currently we're
05:13:54.920 displaying mock data here but now we're
05:13:57.400 ready to start fetching real data from
05:13:59.280 the
05:14:01.160 database to start displaying real books
05:14:03.680 from our database head over to app rout
05:14:07.240 and then page that DSX with then here we
05:14:09.840 can first get the user session by saying
05:14:12.000 con session is equal to await o coming
05:14:15.718 from OJs then instead of just getting
05:14:18.520 all the users we can just get the latest
05:14:20.558 books by saying something like const
05:14:23.120 latest books is equal to we can put it
05:14:27.040 in parenthesis and say await DB do
05:14:31.280 select and now we can select do from
05:14:34.798 books specifically we'll limit it to
05:14:37.600 about let's do 10 books books and let's
05:14:39.958 order it by descending order so we can
05:14:43.600 say DEC which we can import from drizzle
05:14:46.320 orm and then say books. created at just
05:14:49.718 like this and finally we can wrap all of
05:14:52.160 that in
05:14:53.080 parentheses and say as an array of books
05:14:56.638 because that's exactly what we'll be
05:14:57.920 returning now one problem will appear as
05:14:59.958 soon as you do that and that is that
05:15:01.840 everything will become red you'll notice
05:15:03.878 that the conversion of type ID title
05:15:06.280 author genre and so on may be mistaken
05:15:09.120 because neither type sufficiently
05:15:10.920 overlap with the others so why is it
05:15:13.638 saying that we have an overlap well
05:15:15.320 that's because before our books looked
05:15:17.680 something like this they had available
05:15:20.280 copies with an underscore total copies
05:15:22.240 with an underscore and they were coming
05:15:25.000 from sample books but now they're coming
05:15:27.440 from a real schema books which is
05:15:29.958 looking something like this even though
05:15:31.958 it has underscores in the database when
05:15:34.320 we're trying to fch data using drizzle
05:15:36.600 it automatically converts it over to
05:15:38.480 camel cas
05:15:39.920 so we have to head over into this book
05:15:42.200 type and we have to fix it ID title
05:15:44.958 author genre rating it'll stay the same
05:15:48.040 but it'll say total copies available
05:15:50.920 copies in camel case no longer it'll be
05:15:53.400 a cover now it'll be a cover URL same
05:15:56.080 thing for the video URL and then it'll
05:15:58.360 also have a created
05:16:00.638 ad which will be a date or null and we
05:16:04.240 don't need this is loan book so if we do
05:16:07.080 this now the type should be a bit more
05:16:09.080 precise but it still says that it's not
05:16:10.840 a perfect match let's see if we have
05:16:12.638 everything color right here we called
05:16:15.000 cover color so this also has to match
05:16:17.520 the same schema in the database more or
05:16:19.558 less the rest should be okay it says
05:16:21.360 that the only property that is
05:16:22.520 incompatible right now is the ID
05:16:25.280 property which is interesting oh yeah it
05:16:27.440 shouldn't be a number it should indeed
05:16:28.878 be a string thank you typescript for
05:16:31.080 saving me here and now you can see the
05:16:32.958 error is gone so finally instead of
05:16:35.760 Simply passing sample books which we no
05:16:38.000 longer need so I can completely remove
05:16:39.760 it from here we'll be passing real books
05:16:42.840 so let's spread dot dot dot
05:16:45.878 latest books zero we'll pass that over
05:16:49.360 to the book overview and let's also pass
05:16:51.680 the user
05:16:52.600 ID equal to session question mark. user
05:16:57.040 question mark. ID and we'll say as
05:16:59.480 string because we know that it'll
05:17:01.160 actually exist there and we can also
05:17:03.160 pass those books right here as latest
05:17:05.558 books but we'll run a slice one which
05:17:09.080 means that we'll make the array start
05:17:10.600 from the second element and not the
05:17:12.400 first one because we're already showing
05:17:14.160 the first one in the book overview we
05:17:16.160 don't want to repeat ourselves so let's
05:17:18.160 head into the book list everything
05:17:19.798 should be the same here we're mapping
05:17:21.240 over books and then rendering a book
05:17:23.160 card but we changed the name of some of
05:17:24.718 the properties from the time when we had
05:17:26.440 a sample book and now that we have the
05:17:28.360 real data in the database so let's
05:17:30.240 quickly change those as well you can
05:17:32.160 rename the color to cover color and you
05:17:34.718 can use it wh we're using it below you
05:17:37.680 can also do cover that is now a cover
05:17:40.638 URL so let's copy it and paste it
05:17:43.878 wherever we're using the cover that is
05:17:46.120 here and finally is loan book no longer
05:17:49.320 exists but for now I'll leave it as it
05:17:51.280 defaults to false anyway and let's also
05:17:53.440 head back over to the book list and
05:17:56.160 let's hide the book list in case we
05:17:58.080 don't have any books to show so I'll say
05:18:00.200 only if books. length is greater than
05:18:04.120 two because the first element actually
05:18:06.200 is in the hero so we're already covering
05:18:08.360 that so only if it's greater than two
05:18:10.798 then show this UL as a matter of fact we
05:18:13.680 should show the entire section only if
05:18:16.000 it has any elements to show so I'll do
05:18:18.638 it right
05:18:19.958 here if book. length is greater than two
05:18:24.600 then we'll return this but if it's lower
05:18:26.760 than two we'll simply exit out of this
05:18:29.320 return meaning show nothing so now if I
05:18:32.120 go back we don't see any latest books
05:18:34.400 because the only book we have added to
05:18:35.878 the database is this book right here and
05:18:38.360 it looks looks like it is properly
05:18:40.160 taking all of the information from the
05:18:41.680 book which is amazing but everything
05:18:44.440 besides the C photo so let's head over
05:18:47.120 to our book
05:18:48.600 overview and here we also have to change
05:18:50.840 some naming total copies will be renamed
05:18:53.400 over to Total copies in camel case same
05:18:56.920 thing for available copies color will be
05:19:00.160 cover color and cover will be cover URL
05:19:05.520 so let's make sure to change those in
05:19:07.480 the code as well
05:19:10.160 total copies available
05:19:13.240 copies next we have a cover color we
05:19:17.280 have a cover URL for the image and once
05:19:20.558 again we have a cover
05:19:23.160 color and cover URL right here so if we
05:19:28.400 make all the changes properly to work
05:19:30.200 with our new database schema now with
05:19:32.160 real data you can see that at least the
05:19:34.040 book gets colored but the image is still
05:19:36.360 not showing we are rendering that image
05:19:38.920 right here as cover URL which we're
05:19:41.840 passing over to book cover and then it's
05:19:43.878 rendering it as an image so let's
05:19:45.638 actually conso log this cover URL to see
05:19:48.520 what we're getting
05:19:50.000 back I'll do a conso log of cover URL
05:19:53.680 and then reload and it looks like we're
05:19:56.040 getting back/ books SL covers and a
05:20:00.000 correct webp address but this is not a
05:20:02.680 full address it is a path pointing to
05:20:04.958 image kit our image solution so let's
05:20:08.120 actually head over to the book cover
05:20:11.440 component and instead of just rendering
05:20:13.680 it as a regular image let's actually use
05:20:16.120 the i k
05:20:19.160 image where the path will now be set to
05:20:22.558 cover image URL endpoint will be set to
05:20:25.958 config coming from lib config env.
05:20:30.840 imagit URL endpoint Al tag will be book
05:20:34.160 cover we'll have
05:20:36.120 fill class name will be the same we can
05:20:39.120 also use something known as lazy loading
05:20:41.000 so we can say loading is lazy to load
05:20:43.400 other things before it and then with
05:20:45.200 image kit you're also getting a lot of
05:20:46.958 these great functionalities out of the
05:20:48.600 box such as L qip which is lower quality
05:20:52.280 image placeholder which we can set
05:20:54.400 active to true so first it'll render a
05:20:56.558 lower quality placeholder and only then
05:20:59.040 it will render the full image which
05:21:00.920 optimizes website performance now image
05:21:03.240 kit has to be used on the client side so
05:21:05.360 for the time being I will change this
05:21:07.280 over to a use client comp
05:21:09.680 component and with that our book is
05:21:12.480 right here it's looking great and now
05:21:14.840 it's coming from the database now in the
05:21:17.160 next lesson I'll show you another
05:21:18.878 production ready technique that allows
05:21:20.920 us to quickly fill up the entire
05:21:24.200 database in this lesson I'll teach you
05:21:26.558 how to seed a database database seedings
05:21:29.480 simply means populating a database with
05:21:31.718 an initial set of data it is so common
05:21:34.160 to load seed data such as initial user
05:21:36.320 accounts or dami data in this case our
05:21:39.040 images which allows us to see more data
05:21:41.520 without necessarily needing to manually
05:21:43.400 go ahead and add every single book and
05:21:45.558 since it happens so often within
05:21:47.160 companies and larger applications I
05:21:48.878 wanted to teach you how to do that first
05:21:50.920 head over into
05:21:52.878 constants and then right here find our
05:21:55.558 sample books remove them and instead
05:21:59.520 where you found other Snippets to copy
05:22:01.400 you can also find another file called
05:22:03.680 dummy books create a new file in the
05:22:06.360 root of your application and call it
05:22:08.718 dummy books. Json there we go so this is
05:22:13.400 simply a list of all of the dummy data
05:22:15.798 for some programming related books we
05:22:17.718 won't just show this fake data within
05:22:19.400 our application we'll actually use it to
05:22:21.638 populate our database for real so those
05:22:24.000 rows appear there so head over into your
05:22:26.958 database folder and create a new file
05:22:29.320 called
05:22:30.798 seed. DS within it let's create a new
05:22:33.840 function const seed is equal to a
05:22:37.080 function which will consol
05:22:40.000 log something like seeding data dot dot
05:22:43.480 dot and we can open up a try and catch
05:22:46.680 Block in the catch we'll simply say
05:22:49.718 something like error seaing data and in
05:22:52.600 the try we'll actually try to do that
05:22:54.600 and if you go back to your application
05:22:56.080 you'll notice that the profile page will
05:22:57.958 broke for a second so for the time being
05:23:00.280 we can bring back our old books the
05:23:02.558 sample books that we had here just so we
05:23:04.160 don't break that there we go now in the
05:23:06.638 try let's Loop over our c data by saying
05:23:10.520 for const Book of dummy books so let's
05:23:15.360 try to import those dumy books we can do
05:23:18.320 that right here at the top to get them
05:23:19.920 from our Json dumy books coming from do
05:23:23.920 SL dummy books. Json and we can map over
05:23:27.840 them right here after that before we
05:23:30.240 actually insert them into the database
05:23:32.040 we first have to upload the images and
05:23:34.200 cover videos to image kit so let's say
05:23:36.920 const cover UR
05:23:39.400 is equal to a wait upload to image kit
05:23:45.040 and then we can pass a book. coverurl
05:23:47.680 the second parameter can be the title
05:23:50.680 which can be something like book. tile
05:23:54.080 and then an extension of JPEG and
05:23:57.360 finally we can pass the path which will
05:24:00.120 be something like for SL
05:24:03.160 books slash covers for this to work we
05:24:06.798 have to do two things the first one is
05:24:09.600 to turn this into an async function and
05:24:12.280 the second one is to create this upload
05:24:14.718 to image kit function so const upload to
05:24:17.718 image kit it'll be an async function
05:24:19.920 that will accept a
05:24:21.840 URL a file name as well as the folder
05:24:24.878 path So within there we can open up
05:24:27.280 another try and
05:24:29.000 catch within the catch you know the deal
05:24:31.958 we get the error and then we simply
05:24:33.680 conso log it but in the try we'll try to
05:24:36.760 get the response
05:24:38.680 so const response out of the image
05:24:41.638 upload so let's simply set a new
05:24:43.798 instance of image kit by saying const
05:24:46.160 image kit is equal to New Image kit and
05:24:51.000 then we can pass all of our
05:24:52.520 configuration options such as a public
05:24:55.040 key equal to process. env. imagit public
05:24:59.718 key private key which is equal to
05:25:02.160 process. env. imagit private key and
05:25:05.360 then a URL endpoint equal to image kit
05:25:07.878 URL endpoint now only the private key is
05:25:11.160 private but the first two the public key
05:25:13.920 and the URL endpoint are public so we
05:25:16.638 need to add a next public right here in
05:25:19.958 front perfect and now that we have that
05:25:22.600 we can say await image
05:25:25.200 kit do upload and we can pass all these
05:25:29.718 configuration options such as file is
05:25:32.520 equal to URL then we pass the file name
05:25:35.840 and finally we pass the folder once we
05:25:38.760 get the response we can just return
05:25:41.040 response. file
05:25:43.600 path perfect so now we can upload images
05:25:47.040 or files and videos to image kit and we
05:25:49.760 actually want to duplicate
05:25:51.520 this and do the same thing with the
05:25:53.600 video so we can say const video URL is
05:25:56.920 equal to upload to image kit book. video
05:25:59.840 URL and we'll upload it to books videos
05:26:03.480 and it'll be an mp4
05:26:05.798 file finally we are ready to insert that
05:26:08.840 into our database by saying await DB
05:26:12.400 coming from drizzle do insert into
05:26:16.440 books the values that are as follows
05:26:20.760 we're going to spread all of the
05:26:22.320 properties of the book and we're going
05:26:24.680 to add a cover URL as well as a video
05:26:28.878 URL perfect we'll also have to make a
05:26:31.680 connection to this database one more
05:26:33.558 time we cannot use our previous
05:26:35.240 connection because we will not be
05:26:37.280 running this file from our typical
05:26:39.000 nextjs application rather we'll be
05:26:41.400 running it as a script from a package
05:26:43.558 file like running a separate node file
05:26:46.240 not nextjs so right here at the end of
05:26:49.200 this
05:26:50.600 four I'll add a conso log data seated
05:26:54.280 successfully I'll collapse the function
05:26:57.120 collapse the upload to image kit as well
05:26:59.638 and we have to set up an instance of our
05:27:01.480 database by saying
05:27:04.520 config of path isv
05:27:08.760 . local to get access to our environment
05:27:11.120 variables then we can say const SQL is
05:27:14.240 equal to Neon and then to it we pass the
05:27:17.320 process. env. database URL and finally
05:27:22.040 we can export const DB is equal to
05:27:26.160 drizzle to which we pass the client
05:27:28.920 equal to SQL so in this case we're not
05:27:31.200 importing the DB from database drizzle
05:27:33.600 we're just creating a new instance of
05:27:35.360 that right here since this file is
05:27:37.520 standal from other files we can also add
05:27:40.280 exclamation marks right here at the end
05:27:41.878 to let it know that we actually know
05:27:43.680 that these keys will be there and we
05:27:46.400 have to import the config coming from
05:27:49.320 EnV and I think that's it the only thing
05:27:51.798 we have to do is call the seed function
05:27:53.958 right here at the end as soon as we call
05:27:55.920 this file oh and I think typescript
05:27:57.840 saved me one more time there's a red
05:27:59.920 squiggly line right here saying property
05:28:01.920 cover URL does not exist actually since
05:28:04.760 we're just seating it manually we cannot
05:28:06.798 use the camel case it'll have to be the
05:28:08.760 exact format we're seating the database
05:28:10.920 with so we'll have to use a cover uncore
05:28:13.920 URL here as well as the video uncore URL
05:28:18.480 right here same thing here cover URL and
05:28:23.040 video
05:28:24.480 URL so let's do it properly and we can
05:28:27.718 rename it here as well cover URL now you
05:28:31.200 can see here it says did you mean cover
05:28:33.120 URL in camel case so looks like I was
05:28:36.520 wrong we still needed to do everything
05:28:38.440 in camel case as we're just inserting
05:28:40.240 the value using drizzle but in dummy
05:28:42.280 data so far I use snake case so actually
05:28:45.360 I'm interested in seeing whether this
05:28:46.680 will work if not I'll transition it over
05:28:48.878 to camel case so now let me head over to
05:28:52.240 my package.json and the way that you
05:28:54.840 typically seed your databases is by
05:28:57.080 adding a seed command to package Json so
05:29:00.000 right here on top of our DB commands
05:29:02.080 I'll add seed and I'll simply make it
05:29:04.600 run that file MPX TSX datab
05:29:08.680 b/ seed. DS so let's head over to our
05:29:13.040 terminal and let's run mpm run seed and
05:29:18.120 I'll expand it so we can see what's
05:29:19.638 happening and press enter it says you
05:29:22.080 need to install the TSX package sure
05:29:24.320 let's go ahead and do that it looks like
05:29:26.200 we got a connection string issue with
05:29:28.280 neon so we have to head back over to the
05:29:30.878 seed database and check whether we have
05:29:33.120 properly provided the URL it looks like
05:29:35.680 we are passing it properly but it's like
05:29:37.798 it's not reading it from our environment
05:29:40.240 variables process. env. database URL oh
05:29:44.600 it looks like I have an extra space
05:29:45.920 right here hopefully you had it right so
05:29:48.798 let's go ahead and rerun that command
05:29:51.440 that'll be mpm run
05:29:53.320 seed it's seeding data okay so it looks
05:29:57.040 like it fails after all as you can see
05:30:00.360 so far whenever we have been inserting
05:30:02.440 the values into the database we have
05:30:04.480 used this schema right here which has
05:30:07.320 camel case for our properties but then
05:30:09.760 later on in database rows it converts
05:30:12.080 them into snake case so I'm actually
05:30:14.000 very glad that we tested this out
05:30:15.680 because now we know that we cannot
05:30:17.120 insert properties using the final format
05:30:20.120 that they'll be saved within the
05:30:21.320 database with rather we can use camel
05:30:24.160 case so by the time you're watching this
05:30:25.958 video for you I might have provided the
05:30:27.958 right file right off the bat the Json
05:30:30.440 file that contained camel case but for
05:30:33.000 myself I will modify it right away there
05:30:35.600 we go I've simply overridden the
05:30:37.440 previous file file with the one with the
05:30:39.280 values in camel case so now I'll just
05:30:41.920 have to make a small modification right
05:30:43.638 here and change these to camel Cas as
05:30:45.878 well you'll have to do that change as
05:30:47.600 well so wherever they're saying video or
05:30:50.440 cover URL simply change it to video and
05:30:53.600 cover URL in commel case but why is
05:30:56.920 there still a red Squigly line right
05:30:58.680 here well because to insert it into the
05:31:01.160 database we want to make sure that the
05:31:02.878 value is there so we can say that this
05:31:05.840 will be string
05:31:09.280 and same thing for the video URL as
05:31:11.840 string that way tab script will know
05:31:14.558 that we are properly returning these
05:31:16.400 values so let's go ahead and seat our
05:31:18.680 database one more time with one more
05:31:21.200 lesson learned we're seaing the data
05:31:24.600 this time is taking a bit longer which
05:31:26.520 is a good sign when we're seaing
05:31:28.240 databases as there's a lot of data to
05:31:30.520 upload we could have added some
05:31:32.360 additional conso logs to know when the
05:31:34.600 images are uploaded when videos are
05:31:36.400 uploaded and when the books are inserted
05:31:39.000 but as of now we can stare into the
05:31:40.718 screen and look at this blinking cursor
05:31:43.160 and wait for it to say
05:31:46.320 success and there we go data seated
05:31:49.120 successfully head over to your table and
05:31:51.798 just check this out all of these books
05:31:54.040 are right here and if you head over to
05:31:56.840 your local host 3000 check this out we
05:31:59.480 have a book Overview at the top and then
05:32:01.440 we have some more books right here at
05:32:02.958 the bottom this is looking great and now
05:32:05.760 you know what it takes to seed any data
05:32:07.878 database to quickly get your project
05:32:09.718 data up and
05:32:12.280 running now that we have all of these
05:32:14.520 great books Let's actually create a
05:32:16.558 Details page for each and every one of
05:32:18.558 them let's go with JavaScript the good
05:32:20.400 parts right now we get a 404 as we don't
05:32:23.520 yet have a book Details page so let's
05:32:25.920 head over back into the code head over
05:32:27.878 into app rout and create a new folder
05:32:31.480 called
05:32:32.638 books and within books create a new
05:32:35.718 Dynamic
05:32:36.840 route of ID within square brackets and
05:32:41.320 within it create a new page.
05:32:44.480 DSX there run rafc and first we can
05:32:48.360 accept the ID of the book we're
05:32:50.040 currently on through params so let's
05:32:52.440 destructure the pams and that'll be of a
05:32:55.200 type pams is a promise which in this
05:32:58.920 case will include an ID of a type string
05:33:02.638 so let's destructure that ID by saying
05:33:04.878 const ID is equal to await per rams. ID
05:33:10.000 and we can make this function async and
05:33:12.360 now based off of that ID we can fetch
05:33:14.558 the book from our database so I'll write
05:33:17.320 a comment and that'll look like this
05:33:19.878 const book details is equal to DB coming
05:33:24.798 from database drizzle do select. from
05:33:29.920 books. where and now we can use an
05:33:33.400 equality sign EQ books. ID and then we
05:33:37.480 match it with the ID we're getting
05:33:38.920 through params do limit to one and I
05:33:42.240 think this is good so let's just await
05:33:44.280 it right here and I think this will
05:33:46.160 return an array so to get the exact book
05:33:48.480 details we can destructure the first
05:33:50.360 parameter out of that array which should
05:33:52.320 bring us back the book details finally
05:33:54.718 if there is no book details we can
05:33:57.280 simply redirect to 404 this is how it's
05:34:00.520 going to look like and before we go
05:34:02.200 ahead and return it let's actually just
05:34:04.558 conso log it to see what we're getting
05:34:06.638 back from book details it looks like
05:34:08.520 we're getting back all the correct data
05:34:10.638 so to render the book details I'll
05:34:13.080 simply return an empty react fragment
05:34:15.958 and within it I'll return a component we
05:34:18.040 already created the book overview
05:34:20.760 component you can see we have to pass a
05:34:22.878 lot of props into it or we can simply
05:34:25.480 spread the book details to it we can
05:34:28.160 also pass a user ID equal to session
05:34:32.000 question mark. user question mark. ID as
05:34:35.320 string and you already know how we can
05:34:37.280 get this session right at the top by
05:34:39.878 saying session is equal to await o and
05:34:44.440 the O is coming from next o or OJs let's
05:34:47.958 close the book or your component and
05:34:50.200 let's properly import it coming from
05:34:52.200 components if you do that you should be
05:34:54.400 able to see the details of the book you
05:34:56.080 just clicked on so if I head over to
05:34:58.400 react in action you can see the details
05:35:00.798 of that book perfect you also have the
05:35:03.920 button to borrow it which will make full
05:35:06.000 use of very soon now right below this
05:35:08.718 primary information we also want to show
05:35:11.000 a video trailer of that book so head
05:35:13.878 just below it and create a new div with
05:35:16.920 a class name of book
05:35:20.520 details within it there's another div
05:35:23.480 with a class name of flex d1.5mm
05:35:37.958 there we can render an H3 that'll say
05:35:40.760 video and later here we can display the
05:35:43.520 video component to actually allow people
05:35:46.240 to play that trailer so if we put it
05:35:48.600 side by side you can see how that looks
05:35:51.160 like so right below this section let's
05:35:54.320 also create another section for the book
05:35:56.080 summary it'll have a class name equal to
05:36:00.400 margin top of 10 to divide it a bit from
05:36:02.520 the top it'll be a flex container it'll
05:36:05.680 have a flex column so the element appear
05:36:08.080 one below another and a gap of seven
05:36:11.400 there we can render an H3 of
05:36:14.120 summary and within it render a div with
05:36:17.878 a class name of space-
05:36:21.760 y-5 text- extra large and text- light of
05:36:26.680 100 within it we can render the book
05:36:29.280 details. summary which would look
05:36:31.120 something like this but we can split it
05:36:33.680 by new lines by saying do split and then
05:36:37.000 choosing the back slash and character as
05:36:39.638 the
05:36:40.320 separator and then mapping over each
05:36:42.638 individual line which will look
05:36:44.320 something like this we simply want to
05:36:45.920 show A P tag for each one of the
05:36:48.798 Lines within this summary and that'll
05:36:51.480 make it look like this it'll be split
05:36:53.600 into paragraphs looking great and later
05:36:56.400 on beneath this section and beneath one
05:36:58.840 more div we could have a section to
05:37:00.760 maybe show similar books which would
05:37:02.840 allow us to Traverse between page
05:37:04.558 details of similar books and finally
05:37:07.120 let's implement this video component
05:37:09.480 which will allow us to play the video
05:37:11.160 trailer of that book so let's create a
05:37:13.480 new component in the components folder
05:37:16.480 and let's call it book video.
05:37:21.480 DSX run rafc right within it and this
05:37:26.160 will actually be super simple thanks to
05:37:28.320 the image kit video
05:37:30.040 component first we have to wrap it in an
05:37:33.160 image kit
05:37:35.798 provider which will look something like
05:37:38.080 this to it as you might already know we
05:37:41.040 need to provide a public key equal to
05:37:44.000 config env. imagit dopu
05:37:48.680 key and also the URL endpoint which will
05:37:52.280 be equal to config make sure to import
05:37:55.320 it from our lib config not. EnV
05:37:59.798 config and then say. env. imag kit. URL
05:38:04.798 endpoint and within it we can render the
05:38:07.798 ik video component and then pass the
05:38:10.840 necessary props let's first call the
05:38:12.840 book video as a component right
05:38:15.558 here it'll be a book video component as
05:38:18.840 a self-closing component to which we can
05:38:21.400 pass a video
05:38:23.040 URL equal to book
05:38:26.160 details. video URL and then within the
05:38:29.760 component we can get access to that
05:38:32.000 video URL right
05:38:34.160 here which will be equal to video URL of
05:38:37.760 a type string and then we can set the
05:38:39.760 path of the video to be equal to video
05:38:42.958 URL if you want to you can set controls
05:38:45.798 to be true or false depending on whether
05:38:47.958 you want to show them and you can
05:38:50.200 provide a class name of w fo and rounded
05:38:53.920 Das excl and let's not forget to turn
05:38:56.558 this into a client
05:38:59.160 component as ik video request us to do
05:39:02.718 that and if you do that check this out
05:39:06.080 there is now a video trailer related to
05:39:08.080 this book and if we expand it to look at
05:39:10.440 it in its full Glory this is looking
05:39:13.160 even better a simple and optimized video
05:39:16.600 player component and then a full book
05:39:18.718 summary completing our work on the book
05:39:20.958 Details page finally let's Implement
05:39:23.520 that borrow
05:39:29.080 functionality to start implementing the
05:39:31.558 borrow functionality head over to lib
05:39:34.520 and within actions create a new file
05:39:36.878 called book. TS here we can declare that
05:39:41.080 this is a used server file so the code
05:39:43.240 will only be executed on the server and
05:39:45.240 we can create a server action that will
05:39:47.240 initialize the borrowing process so
05:39:49.958 let's say export const borrow book which
05:39:53.878 is equal to an async function which will
05:39:56.240 accept some prams and these will be of a
05:39:58.718 type borrow book
05:40:01.840 prams so let's head into the types. D.S
05:40:06.240 and let's define those borrow book
05:40:07.718 perams we can do that simply by saying
05:40:11.120 interface borrow book perams and it'll
05:40:15.840 be just a book ID because we need to
05:40:18.120 know which book to borrow and then
05:40:19.958 finally the user ID to know who is
05:40:22.478 borrowing the book finally we can
05:40:24.478 destructure those two params by saying
05:40:26.840 const user ID as well as the book ID are
05:40:31.718 coming from pams and we can open up a
05:40:34.320 try and catch
05:40:36.240 block in the catch you already know the
05:40:38.718 deal we get the error and then we can
05:40:41.120 simply consol log it as well as
05:40:44.080 return a
05:40:46.400 success of false and an error something
05:40:49.478 like an error occurred while borrowing
05:40:51.320 the book and then we can focus on the
05:40:54.120 tribe part here we can make a new
05:40:56.600 mutation to the database by saying const
05:41:00.280 book is equal to await DB coming from
05:41:05.200 drizzle do select and and we only want
05:41:07.958 to get access to the number of
05:41:11.080 available copies and that's coming from
05:41:13.840 books. available copies then we want to
05:41:17.240 make sure that we're getting it from the
05:41:19.558 books schema or books
05:41:22.120 table where we have an equation sign
05:41:25.558 books. ID is equal to the book ID that
05:41:29.958 we're currently trying to borrow and
05:41:32.478 we're going to limit it to only one book
05:41:36.000 that should look something like this
05:41:38.558 after that we first of all need to check
05:41:40.718 whether that book even exists the book
05:41:42.718 that we want to borrow so if no book.
05:41:46.478 length or if book zero do available
05:41:51.240 copies is lower than or equal to zero in
05:41:54.920 that case we're going to
05:41:56.638 return a success of false as well as an
05:42:00.798 error of something like let's do book is
05:42:03.958 not available for borrowing if we can
05:42:06.320 borrow the book though we need to get
05:42:08.200 its due date as to when we need to
05:42:10.200 return it so let's say const due date is
05:42:13.840 equal to and here we can use the DJs
05:42:16.558 Library which helps us deal with dates a
05:42:18.840 bit more easily so let's just install it
05:42:21.120 by running mpm install DJs and then we
05:42:24.958 can say
05:42:26.080 djs. add
05:42:29.478 7 Day 7 days to
05:42:34.718 date do to dat
05:42:38.400 string so we're simply going to add 7
05:42:40.798 days from today that's the deadline
05:42:44.360 later on we can make this Dynamic by
05:42:46.200 passing a dynamic return value right
05:42:48.440 here instead of the number seven and
05:42:50.520 then we are ready to insert a new record
05:42:53.400 a new borrowing record we can do that by
05:42:55.958 saying db. insert and specifically we
05:42:59.080 want to insert something into the
05:43:00.360 database but into a completely new table
05:43:04.320 called borrow records so think of this
05:43:07.558 as a huge library of different records
05:43:09.920 that keep track of which users borrowed
05:43:12.600 which books you don't want to Simply
05:43:14.240 mutate the book itself you want to
05:43:16.160 create a new record that connects a
05:43:18.240 specific user with a specific book so to
05:43:21.718 do that we have to create a new table so
05:43:23.798 let's head into
05:43:25.558 schemas and Below books we'll create
05:43:28.280 another table now since it'll be very
05:43:30.558 similar to the tables we created so far
05:43:32.840 I'll provide you with a code for this
05:43:34.320 one you can just find it where you found
05:43:36.240 all other Snippets code and then paste
05:43:38.718 it right here you'll notice that it has
05:43:40.718 the ID the user ID who is borrowing the
05:43:43.718 book the book ID so we know which book
05:43:46.120 is being borrowed the borrow date the
05:43:48.798 due date and finally we'll later on
05:43:51.000 mutate it with the return date so we
05:43:53.160 know what is the status of that return
05:43:55.638 as you know whenever we change the
05:43:57.040 schema we have to rerun mpm run DP
05:44:00.240 generate and then once again rerun mpm
05:44:02.798 run DB migrate once you do that we can
05:44:05.638 now insert this right here here by
05:44:07.958 saying DB insert into
05:44:11.360 borrow records and specifically we want
05:44:14.680 to insert the following values user ID
05:44:19.000 book ID due
05:44:21.320 date and Status which by default will be
05:44:24.878 set to Borrowed great and then finally
05:44:28.638 once we create this new record we want
05:44:30.558 to mutate the original books by saying
05:44:33.680 await db. update
05:44:38.200 books and we want to set the number of
05:44:41.920 available
05:44:44.080 copies to be equal to book zero do
05:44:47.920 available copies minus one because
05:44:50.320 somebody just borrowed one instance of
05:44:52.160 that book and we want to do it
05:44:55.080 where EQ books ID is equal to the
05:44:59.360 current book ID we're
05:45:01.000 on beautiful finally let's return it by
05:45:05.000 saying success is true and and as the
05:45:07.718 data we can do json.parse
05:45:11.360 json. stringify and we can return that
05:45:14.120 borrow record right within so now let's
05:45:16.760 actually go ahead and call this borrow
05:45:18.638 book action when we click this borrow
05:45:21.200 button right there I'll head over into
05:45:23.520 the book
05:45:24.718 overview as I think that's where the
05:45:26.600 button is yep here it is but since this
05:45:29.760 click will now involve client side
05:45:31.520 actions such as clicking on a click
05:45:33.240 Handler we'll have to either turn the
05:45:35.478 entire book a component into a client
05:45:37.920 component or create a separate client
05:45:40.520 side component just for the borrow
05:45:42.160 button for better SEO and to get more
05:45:45.000 code generated on the server itself
05:45:47.000 we'll create a separate component for
05:45:48.520 the button so copy this button right
05:45:51.000 here create a new component and call it
05:45:53.920 borrow book.
05:45:56.958 DSX run
05:45:59.798 rafc and paste the button code right
05:46:02.798 here make sure all the Imports are in
05:46:05.000 order
05:46:07.120 and then simply import the button where
05:46:09.120 it used to be right here I think it was
05:46:11.280 below the description so that's going to
05:46:13.120 be borrow
05:46:15.638 book and if you save it here we have it
05:46:19.120 but now we can turn it into a client
05:46:21.160 component while keeping everything else
05:46:23.600 server rendered and this is something
05:46:26.040 that I dive into much more detail within
05:46:27.958 the ultimate nextjs course so if you
05:46:29.958 want to learn a bit more about server
05:46:32.080 and client components server actions and
05:46:34.360 how all of that works behind the scenes
05:46:36.400 definitely check out that course on JS
05:46:38.600 mastery. proo but with that in mind
05:46:40.798 we'll have to pass some props into this
05:46:42.638 button the first one will be just the
05:46:44.558 book ID so we can say book ID is equal
05:46:47.200 to book
05:46:48.520 ID and the second one will be equal to
05:46:51.040 the user ID which is equal to user ID
05:46:54.638 and I think book ID actually is just the
05:46:56.600 ID because we're already on the book
05:46:58.120 Details page so let's get those values
05:47:00.558 we can get them right here at the top of
05:47:02.280 the book overview and I think we're
05:47:03.958 already passing it through the props
05:47:05.638 into the book overview if I'm not
05:47:07.200 mistaken so we should be able to just
05:47:08.798 destructure them right here that'll be
05:47:10.638 ID as well as user ID and we need to
05:47:13.240 also let typescript know that alongside
05:47:15.520 the book properties will'll also be
05:47:17.040 accepting a user ID we can do that by
05:47:19.520 saying interface props extends book with
05:47:25.040 the user ID of a type string so now we
05:47:28.240 can make the type of props and it'll
05:47:30.638 know that all of this is a book and then
05:47:32.558 it also has a user ID great now if I
05:47:35.680 remember correctly our users currently
05:47:37.760 also have a status and a status can be
05:47:40.680 pending or approved so far we don't yet
05:47:43.638 have the functionality on the admin side
05:47:45.638 to approve certain users but that's
05:47:48.080 definitely something we can do later so
05:47:49.958 for example a book clerk who is sitting
05:47:51.958 in a library sees your ID checks whether
05:47:54.920 you're from the University that this
05:47:56.360 library is from and then if that is the
05:47:58.440 case they can approve you else they can
05:48:00.440 reject you so for now I'll manually
05:48:02.558 approve my user right here and let's
05:48:04.400 fetch our user data by saying const
05:48:07.840 destructure the first user and make it
05:48:10.760 equal to the call to the database by
05:48:12.840 saying await DB from database
05:48:16.798 drizzle let's make it into an async
05:48:20.440 function and we're going to do DB do
05:48:25.080 select. from users. where EQ users. ID
05:48:32.000 is equal to the user
05:48:34.320 ID and liit to
05:48:38.000 one now we get the user if a user
05:48:41.080 doesn't exist that means that we can't
05:48:42.798 borrow so I'll say if no user then
05:48:45.360 simply return null and then finally we
05:48:48.160 can figure out can
05:48:51.240 user borrow this is going to be a
05:48:53.760 Boolean variable and then we can create
05:48:55.920 a new object called borrowing
05:48:59.000 eligibility which will be equal to an
05:49:00.920 object that'll have an is eligible
05:49:03.000 Boolean variable and we can check the
05:49:04.920 status of that variable by checking
05:49:06.718 checking if available copies is greater
05:49:09.878 than zero and if user. status is triple
05:49:13.760 equal to approved only in that case they
05:49:16.600 should be eligible to borrow it and if
05:49:19.558 not we can render a message saying
05:49:22.040 available copies is lower than or equal
05:49:24.478 to zero in that case we can render
05:49:27.600 something like an error message saying
05:49:30.280 book is not available else we can say
05:49:33.760 something like you're not eligible to
05:49:35.478 borrow this book per perfect and now we
05:49:38.080 can pass that object into the borrow
05:49:40.400 book button so I'll do it here borrowing
05:49:44.160 eligibility is equal to borrowing
05:49:46.718 eligibility so let's head into the
05:49:48.718 borrow book and let's get access to all
05:49:50.840 of these props that'll be user ID book
05:49:54.200 ID and borrowing eligibility and that'll
05:49:57.760 be of a type props so let's define those
05:50:00.920 props at the top by saying interface
05:50:03.840 props is equal to and then we can say
05:50:06.440 that it has a user ID of a typee string
05:50:09.160 book ID of a type string and borrowing
05:50:11.600 eligibility which is an object with a
05:50:13.840 Boolean and a string within here we'll
05:50:16.520 need to get access to the router
05:50:18.080 properties to be able to renate the user
05:50:20.360 to another page after the borrow so we
05:50:22.440 can say router is equal to use router
05:50:26.200 coming from next navigation and we'll
05:50:28.840 also need to create a new use state so
05:50:31.680 we can handle the loading state of the
05:50:33.080 borrow function like borrowing and and
05:50:36.840 set borrowing at the start set defaults
05:50:39.520 and finally we can implement the const
05:50:42.320 handle borrow which is equal to an Asing
05:50:45.280 function that'll be executed once we
05:50:47.798 actually click on that button there we
05:50:50.200 can first check if no borrowing
05:50:54.280 eligibility do is
05:50:57.240 eligible what we can do actually is
05:50:59.520 maybe destructure the is eligible and
05:51:01.920 the message from that so we can just do
05:51:04.520 a colum and then D structure them is
05:51:07.638 eligible and message and then we can
05:51:10.120 simply say if not is eligible a bit
05:51:12.440 simpler to do it that way then we can
05:51:14.400 render a toast with a title of error a
05:51:19.760 description of message and a variant of
05:51:24.280 destructive and that'll look something
05:51:25.840 like this if we pass that if statement
05:51:28.320 that means that we're eligible so then I
05:51:30.440 can set borrowing to true so we can
05:51:32.840 start the loading and open up a new try
05:51:35.440 and catch block in the catch we get an
05:51:37.718 error and we'll render a
05:51:40.360 toast that will say something like title
05:51:43.200 error description an error occurred
05:51:45.798 while borrowing the book and a variant
05:51:48.040 of destructive we can also add a finally
05:51:50.558 clause in this case because no matter
05:51:52.360 whether it succeeds or fails we'll set
05:51:54.520 borrowing back to false because we want
05:51:57.400 to stop the loading and finally in the
05:52:00.000 try the only thing we have to do is get
05:52:02.520 a
05:52:03.920 result from the server action we create
05:52:06.520 created so we can await borrow book
05:52:09.958 server action to which we can then pass
05:52:12.638 an object of book ID and user ID which
05:52:17.160 is exactly what it accepts then if a
05:52:20.680 result is a success so if result success
05:52:23.878 then we show a toast of title success
05:52:28.040 description book borrowed successfully
05:52:30.600 and we use the router. push to push to
05:52:34.400 the profile page so my profile to see
05:52:37.680 the book we just
05:52:39.080 borrowed else will show a toast of title
05:52:44.638 error the description can be something
05:52:47.000 like an error curred while borrowing the
05:52:48.760 book and we're not going to Route
05:52:50.240 anywhere finally on click of this button
05:52:53.878 we can say on click is equal to handle
05:52:57.760 borrow book that is this action right
05:53:00.840 here also we can set a disabled State
05:53:04.120 and if we're currently borrowing it'll
05:53:06.200 be disabled and we can change the text
05:53:08.798 depending on the borrowing status so if
05:53:10.958 we're borrowing then we'll say
05:53:13.120 borrowing do do dot else we'll say
05:53:16.080 something like borrow book there we go
05:53:20.080 you can see that changed and we are
05:53:22.320 already to test it out I'll open up my
05:53:24.360 neon DB table right here on the left
05:53:27.040 while I click the button and in terminal
05:53:29.760 we get some kind of an other error so at
05:53:31.958 least now we know that the book
05:53:33.680 eligibility test is good and if you're
05:53:35.798 not eligible
05:53:37.080 you'll not be able to borrow it but wait
05:53:39.638 I actually thought we approved ourselves
05:53:41.878 looks like I forgot to click the enter
05:53:43.798 or click save changes so now I approved
05:53:46.760 myself for real let's see if I can
05:53:48.920 borrow the book
05:53:50.400 now I click borrow book it says
05:53:52.958 borrowing and now we didn't get that
05:53:55.160 flash that said you're not eligible but
05:53:57.840 we just got an error saying an error
05:53:59.558 occurred while borrowing the book and we
05:54:01.558 get that same converting circular
05:54:03.040 structure object okay so now we know
05:54:05.440 that it's not about the eligibility but
05:54:08.080 something else and for the time being we
05:54:11.160 can just remove these fake dummy books
05:54:13.440 from the profile page and if you remove
05:54:16.160 that the only thing that'll remain on
05:54:17.840 the profile page is the logout button so
05:54:20.160 let's actually move that right here to
05:54:21.840 the top right we have enough space there
05:54:24.878 we can do that by copying these form
05:54:26.840 right here that is within my profile
05:54:30.200 page and then head over into the header
05:54:33.920 in the header you can comment out the
05:54:36.080 link L right here and instead of the
05:54:38.840 link you can simply render that
05:54:41.600 form you'll need to import all of the
05:54:44.160 things from here such as sign out from o
05:54:46.520 and so on and we'll no longer need to
05:54:49.080 get the
05:54:50.400 session because we don't need to show
05:54:52.400 the username there so we can remove
05:54:55.280 these the initials and
05:54:58.200 more and if we do that we can turn this
05:55:01.440 into a server component so let's
05:55:03.600 actually remove the use client directive
05:55:05.440 at the top
05:55:07.000 and remove this first link pointing to
05:55:08.958 the library we can already see a lot of
05:55:10.920 the books on the homepage so if we do
05:55:13.718 that we have successfully turned this
05:55:15.600 into a server component and now the
05:55:18.200 logout button is at the top perfect so
05:55:21.638 now we have a nice looking homepage we
05:55:23.920 have all of the functionalities that
05:55:25.440 happen in the back end when a book is
05:55:27.840 borrowed we create a borrow record and
05:55:31.718 more now now seemingly this is a simple
05:55:35.478 application
05:55:37.958 at least on the front end but you know
05:55:40.120 how much stuff is happening on the back
05:55:41.920 and side we're handling the users we're
05:55:44.280 handling the addition of books we're
05:55:46.478 tracking borrow statuses borrow requests
05:55:48.878 and more and in this one I really wanted
05:55:51.440 to go all out and Implement all of these
05:55:54.040 crazy
05:55:55.878 features but doing that is taking so
05:55:58.600 much time and I think this YouTube video
05:56:01.080 is already a bit too
05:56:02.958 long so I want to continue developing
05:56:05.520 this app even further Implement a
05:56:08.120 workflow that'll update the user to let
05:56:10.200 them know when their book is due manage
05:56:13.080 user approvals and book statuses from
05:56:14.920 the admin side and more so let's keep
05:56:18.240 this app at the current state as it is
05:56:20.120 and let's get it deployed and then after
05:56:22.280 that we'll plan a way to improve it even
05:56:25.040 further the only thing we need to do to
05:56:27.080 deploy it is push the GitHub so I'll run
05:56:30.558 git add dogit commit
05:56:33.600 DM we can say Implement board
05:56:36.920 records and finish the
05:56:39.680 app and then get push this will
05:56:42.760 automatically push it to your
05:56:45.240 repo and since we already deployed our
05:56:47.680 app before if you go to deployments you
05:56:50.080 should be able to see that your app is
05:56:51.958 building right now so let's wait until
05:56:55.000 it finishes and then we can go ahead and
05:56:57.040 check it out live and
05:56:59.240 deployed there we go the status is ready
05:57:02.160 so let's go ahead and visit it and we
05:57:04.718 are in but it looks looks like we had an
05:57:06.840 issue with a check for displaying the
05:57:08.958 book overview in the code we're looking
05:57:11.478 if we can fetch a user in the book
05:57:13.558 overview code we're ret turning null for
05:57:15.718 this entire component if we can't fetch
05:57:17.558 a user but that shouldn't really be the
05:57:20.440 case if we can fetch the user then we
05:57:23.240 simply cannot figure out the borrowing
05:57:26.400 eligibility so hiding the borrowing
05:57:28.798 button makes more sense than hiding the
05:57:30.558 whole thing
05:57:31.920 right so right here I'll say if no user
05:57:37.400 then simply don't show the book or in
05:57:40.638 other words if a user exists then show
05:57:43.520 the borrow book and we can remove this
05:57:46.160 check right here so let's go ahead and
05:57:48.638 push it one more time by running get add
05:57:51.840 dot get commit Dash fix if check and get
05:57:57.718 push and very soon we'll be able to
05:58:00.000 recheck it it build successfully so I'll
05:58:03.478 reload and there we go the book is back
05:58:06.958 just to check out the login
05:58:08.040 functionality one more time you can try
05:58:10.718 the sign up but in this case I'll try
05:58:12.520 just the sign in success we're logged in
05:58:15.760 and this time we have the borrow book as
05:58:17.680 well and if you click
05:58:20.000 it success book borrowed successfully oh
05:58:23.840 but we still have that old redirect to
05:58:25.718 the profile
05:58:26.878 page so if you just bear with me and you
05:58:29.638 want to do one more quick push you can
05:58:32.120 head over to where we actually borrow
05:58:33.920 the book so that is the borrow book
05:58:35.798 button
05:58:37.240 and the only thing we have to do is just
05:58:39.280 push it to the homepage once we borrow
05:58:41.680 instead of pushing to the profile so if
05:58:44.400 you fix this you can do another G add.
05:58:48.440 get commit DM fix redirect and get push
05:58:54.240 this is typically how it is when you're
05:58:55.520 pushing changes and you want to see them
05:58:56.958 live in production so with that in mind
05:58:59.920 the app is done and there you have it
05:59:03.240 you just built a production grade
05:59:05.478 Library system with features that most
05:59:08.080 tutorials wouldn't even dare to touch
05:59:10.958 rate limiting DDOS protection automated
05:59:14.200 workflows with emails and complex
05:59:16.360 database queries you've learned to
05:59:18.760 implement it all but here's the thing
05:59:22.440 everything you build today it's just the
05:59:25.120 beginning remember those Advanced
05:59:27.240 features I showed you in the demo like
05:59:29.760 the analytics dashboard and the admin
05:59:32.200 panel with different
05:59:33.680 tables and even automated workflow CL
05:59:36.320 with performance optimizations yeah
05:59:38.558 those aren't just for the show they're
05:59:40.638 complete systems that showcase the
05:59:42.520 functionalities of real modern web
05:59:45.320 applications now you could absolutely
05:59:47.718 take what you learned so far and build
05:59:49.638 those features yourself that's the
05:59:51.320 beauty of understanding The Core
05:59:52.920 Concepts you have the foundation to
05:59:55.200 explore and create and heck you even
05:59:58.600 have the complete codebase with all of
06:00:00.280 those changes already implemented on
06:00:02.200 GitHub so you can check it out and give
06:00:04.400 it a spin but if you want to skip trial
06:00:06.920 and error and dive straight into the
06:00:09.080 advanced patterns I prepared a second
06:00:12.040 part of this course the pro version
06:00:15.120 where we'll build the entire platform
06:00:17.240 together and even more features that
06:00:19.120 would make senior developers not in
06:00:21.760 approval the platform includes deep
06:00:24.558 dives into advanced react patterns
06:00:27.240 step-by-step commits so you never get
06:00:29.200 lost real world challenges to test your
06:00:32.080 skills progress tracking to keep you
06:00:34.360 moving forward and community of
06:00:36.600 developers to build amazing things
06:00:38.718 together and as I said at the start
06:00:41.160 there's a link to join the pre-launch of
06:00:43.000 the course down in the description the
06:00:45.520 first 100 developers who join will get a
06:00:48.200 lifetime access completely for
06:00:50.440 free and even if you miss it once I
06:00:53.240 actually release it I'll reach out to
06:00:55.240 you via email with a special pre-launch
06:00:57.878 discount the link is in the description
06:01:00.958 but no pressure though you came to the
06:01:02.958 end of this video and that's amazing the
06:01:05.478 proon content is there if you want to
06:01:07.280 take your skills to the senior
06:01:09.320 level once again thank you so much for
06:01:11.878 coding along and I'll see you in the
06:01:14.200 next one or maybe inside JS mastery.
06:01:17.240 proo keep building things that matter
06:01:19.840 and have a wonderful day
