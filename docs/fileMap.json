{
  "note": "This file map provides a high-level overview of key application modules and their relationships. It should be iteratively updated as the codebase evolves. IMPORTANT: This project does not use a top-level 'src/' directory; all paths are relative to the project root.",
  "fileMap": {

    "services/excel/ExcelParserService.ts": {
      "description": "Parses Excel/Text files into structured shipment data (ParsedShipmentBundle). Handles header detection, row grouping, and basic data extraction.",
      "relatedFiles": ["services/excel/parserUtils.ts", "services/excel/shipmentBuilder.ts", "services/excel/fieldMappings.ts", "types/parser.types.ts", "app/api/documents/route.ts"]
    },
    "services/excel/parserUtils.ts": {
        "description": "Utility functions for the parsing process, including header normalization and finding mapped keys.",
        "relatedFiles": ["services/excel/ExcelParserService.ts", "services/excel/shipmentBuilder.ts"]
    },
    "services/excel/shipmentBuilder.ts": {
        "description": "Builds the final ParsedShipmentBundle structure from processed row data, including handling specific field logic (contacts, status normalization).",
        "relatedFiles": ["services/excel/ExcelParserService.ts", "services/excel/parserUtils.ts", "types/parser.types.ts", "services/database/shipmentInserter.ts"]
    },
    "services/excel/fieldMappings.ts": {
        "description": "Defines constant mappings from known header names to standard internal field names.",
        "relatedFiles": ["services/excel/ExcelParserService.ts"]
    },
    "services/excel/dataValidationUtils.ts": {},
    "services/excel/contactUtils.ts": {},
    "app/api/documents/route.ts": {
        "description": "API route for handling document uploads (POST) and retrieving document lists (GET). Initiates parsing process via ExcelParserService. Contains internal helper functions (mapDbStatusToSummary, calculateAggregateStatus, etc.) for status calculations.",
        "relatedFiles": ["services/excel/ExcelParserService.ts", "services/database/shipmentInserter.ts", "app/documents/page.tsx", "lib/database/schema.ts", "types/shipment.ts"]
    },
    "app/api/shipments/route.ts": {
        "description": "API route for fetching shipment details, primarily used by the /shipments/[id] page. Contains logic for filtering by document ID and mapping DB data to ApiShipmentDetail.",
        "relatedFiles": ["lib/database/schema.ts", "types/api.ts", "app/shipments/[documentid]/page.tsx"]
    },
     "app/api/shipments/[id]/route.ts": {},


    "app/simulation/[documentId]/page.tsx": {
      "description": "Client component page displaying the interactive simulation view for shipments within a specific document. Fetches shipment list, manages selection state, loads/rejoins simulation via server actions, and renders the SimulationMap and SimulationControls.",
      "keyImports": ["react", "next/navigation", "@/utils/logger", "@/types/api", "@/components/shipments/ShipmentCard", "@/components/map/SimulationMap", "@/components/simulation/SimulationControls", "@/lib/store/useSimulationStoreContext", "@/lib/actions/simulationActions", "@/components/ui/accordion"],
      "relatedFiles": ["app/api/simulation/shipments/[documentId]/route.ts", "lib/actions/simulationActions.ts", "lib/store/useSimulationStore.ts", "components/map/SimulationMap.tsx", "components/simulation/SimulationControls.tsx", "components/shipments/ShipmentCard.tsx"]
    },
     "app/api/simulation/shipments/[documentId]/route.ts": {
        "description": "API route handler fetching all shipments associated with a specific document ID for the simulation page. Uses explicit Drizzle joins and mapping logic to construct nested ApiShipmentDetail objects.",
        "keyImports": ["next/server", "@/lib/database/drizzle", "@/lib/database/schema", "@/types/api", "@/utils/logger", "drizzle-orm"],
        "relatedFiles": ["lib/database/schema.ts", "lib/database/drizzle.ts", "types/api.ts", "app/simulation/[documentId]/page.tsx", "lib/actions/simulationActions.ts"]
    },
     "app/api/simulation/tick-worker/route.ts": {
        "description": "API route (POST) acting as the worker for simulation ticks. Triggered by Vercel Queues (from enqueue-ticks). Fetches state from KV, calculates next step using utils/simulationUtils, updates KV, persists last known location to DB via VehicleTrackingService.",
        "keyImports": ["next/server", "@/utils/logger", "@/services/kv/simulationCacheService", "@/services/VehicleTrackingService", "@/types/vehicles", "@/utils/simulation/simulationUtils"],
        "relatedFiles": ["services/kv/simulationCacheService.ts", "services/VehicleTrackingService.ts", "types/vehicles.ts", "app/api/simulation/enqueue-ticks/route.ts", "utils/simulation/simulationUtils.ts"]
    },
     "app/api/simulation/enqueue-ticks/route.ts": {
        "description": "API route (GET) previously triggered by Cron job. Fetches active simulation IDs from KV, checks status, enqueues tick jobs to Vercel Queue via fetch POST to queue endpoint for 'En Route' simulations, cleans up inactive IDs. Requires EXTERNAL TRIGGER.",
        "keyImports": ["next/server", "@/utils/logger", "@/services/kv/simulationCacheService", "@/types/vehicles"],
        "relatedFiles": ["services/kv/simulationCacheService.ts", "app/api/simulation/tick-worker/route.ts"]
    },
     "app/api/maps/directions/route.ts": {
        "description": "API route proxying requests to the Mapbox Directions API to avoid exposing the token client-side. Used by fetchRouteGeometry.",
        "keyImports": ["next/server", "@mapbox/mapbox-sdk/services/directions", "@/utils/logger"],
        "relatedFiles": ["app/shipments/[documentid]/page.tsx", "services/map/MapDirectionsService.ts"]
     },
    "lib/actions/simulationActions.ts": {
      "description": "Defines Next.js Server Actions related to simulation lifecycle: `getSimulationInputForShipment` (fetches DB data, prepares simulation input), `startSimulation` (initiates/rejoins simulation via KV cache, returns vehicle state), `stopSimulation` (cleans up KV state), `confirmShipmentDelivery` (updates final DB status).",
      "keyImports": ["server-only", "@/lib/database/drizzle", "@/lib/database/schema", "@/types/simulation", "@/types/api", "@/services/map/MapDirectionsService", "@/utils/logger", "@/services/shipment/SimulationFromShipmentService", "@/services/kv/simulationCacheService", "@/services/VehicleTrackingService"],
      "relatedFiles": ["app/simulation/[documentId]/page.tsx", "app/shipments/[documentid]/page.tsx", "services/map/MapDirectionsService.ts", "types/simulation.ts", "services/shipment/SimulationFromShipmentService.ts", "services/kv/simulationCacheService.ts", "lib/store/useSimulationStore.ts"]
    },
    "types/vehicles.ts": {
        "description": "Defines core TypeScript interfaces for vehicle simulation state, including VehicleStatus enum and the main SimulatedVehicle interface. Defines the shape of data within the simulation store.",
        "keyImports": ["geojson"],
        "relatedFiles": ["lib/store/useSimulationStore.ts", "services/shipment/SimulationFromShipmentService.ts", "components/map/SimulationMap.tsx", "utils/simulation/simulationUtils.ts", "utils/simulation/etaUtils.ts"]
    },
    "types/simulation.ts": {
        "description": "Defines the SimulationInput interface, specifying the data contract required by the server action (getSimulationInputForShipment) and the simulation service (createVehicleFromShipment). Includes fields for initial state setting.",
        "keyImports": ["geojson", "@/lib/database/schema", "@/types/vehicles"],
        "relatedFiles": ["lib/actions/simulationActions.ts", "services/shipment/SimulationFromShipmentService.ts"]
    },
    "types/api.ts": {
        "description": "Defines TypeScript interfaces for API response structures (e.g., ApiShipmentDetail) used across frontend components and API route mappings.",
        "keyImports": ["@/lib/database/schema"],
        "relatedFiles": ["app/api/shipments/route.ts", "app/api/simulation/shipments/[documentId]/route.ts", "app/shipments/[documentid]/page.tsx", "app/simulation/[documentId]/page.tsx", "components/shipments/ShipmentCard.tsx", "components/shipments/ShipmentDetailView.tsx"]
    },
    "types/parser.types.ts": {
        "description": "Defines TypeScript interfaces specific to the document parsing process, including ParsedShipmentBundle and related types for raw data and insertion.",
        "keyImports": ["@/lib/database/schema"],
        "relatedFiles": ["services/excel/ExcelParserService.ts", "services/excel/shipmentBuilder.ts", "services/database/shipmentInserter.ts"]
    },
    "services/shipment/SimulationFromShipmentService.ts": {
        "description": "Service responsible for converting SimulationInput data into a SimulatedVehicle object. Handles initial state calculation (position, bearing based on status, defaults for AWAITING_STATUS). Uses a singleton pattern.",
        "keyImports": ["@/types/vehicles", "@/types/simulation", "@/utils/logger", "@turf/turf", "geojson", "uuid", "@/lib/database/schema"],
        "relatedFiles": ["lib/store/useSimulationStore.ts", "types/vehicles.ts", "types/simulation.ts", "lib/actions/simulationActions.ts"]
    },
    "services/map/MapDirectionsService.ts": {
        "description": "Encapsulates direct interactions with the Mapbox Directions API (if used directly by backend services). Provides fetchRoute method. Requires NEXT_PUBLIC_MAPBOX_TOKEN.",
        "keyImports": ["@mapbox/mapbox-sdk/services/directions", "@/utils/logger"],
        "relatedFiles": ["lib/actions/simulationActions.ts", "app/api/maps/directions/route.ts"]
    },
    "services/VehicleTrackingService.ts": { 
      "description": "Service responsible for persisting vehicle tracking state (e.g., last known location, final status) to the database via updateShipmentLastKnownLocation and updateShipmentStatusToDelivered methods. Called by backend simulation/confirmation logic.",
      "keyImports": ["@/lib/database/drizzle", "drizzle-orm", "@/lib/database/schema", "@/utils/logger"],
      "relatedFiles": ["lib/database/schema.ts", "lib/database/drizzle.ts", "app/api/simulation/tick-worker/route.ts", "lib/actions/simulationActions.ts"] 
    },
    "lib/store/useSimulationStore.ts": {
      "description": "Zustand store managing the client-side state for vehicle simulations. Includes vehicle data, simulation status (running, speed), selected vehicle, UI flags (isFollowing), and actions to interact with simulation server actions and control local state (e.g., tickSimulation triggers backend worker). Added setVehicleFromServer action for direct state updates.",
      "keyImports": ["zustand", "@/types/vehicles", "@/utils/logger", "@/utils/simulation/simulationUtils", "@/types/simulation", "@/services/shipment/SimulationFromShipmentService", "@/lib/actions/simulationActions"],
      "relatedFiles": ["components/map/SimulationMap.tsx", "components/simulation/SimulationControls.tsx", "utils/simulation/simulationUtils.ts", "types/vehicles.ts", "lib/context/SimulationStoreContext.tsx", "lib/store/useSimulationStoreContext.ts", "app/simulation/[documentId]/page.tsx", "lib/actions/simulationActions.ts"]
    },
    "lib/context/SimulationStoreContext.tsx": {
      "description": "Defines and provides the React Context for accessing the Zustand simulation store instance. Ensures store is created only once per application lifecycle.",
      "keyImports": ["react", "zustand", "@/lib/store/useSimulationStore"],
      "relatedFiles": ["app/layout.tsx", "lib/store/useSimulationStore.ts", "lib/store/useSimulationStoreContext.ts"]
    },
    "lib/store/useSimulationStoreContext.ts": {
      "description": "Defines the custom hook (useSimulationStoreContext) for safely accessing the simulation store state and actions via the React Context provider.",
      "keyImports": ["react", "zustand", "@/lib/context/SimulationStoreContext"],
      "relatedFiles": ["lib/context/SimulationStoreContext.tsx", "components/map/SimulationMap.tsx", "components/simulation/SimulationControls.tsx", "app/simulation/[documentId]/page.tsx"]
    },
    "components/map/SimulationMap.tsx": {
      "description": "Renders the main interactive map for vehicle simulation using react-map-gl. Displays simulated vehicle markers (styled by status, rotated), origin/destination markers, and route lines (with progress gradient). Connects to useSimulationStoreContext for state and handles map interactions (zoom, pan, follow mode, marker clicks). Uses forwarded ref for external control.",
      "keyImports": ["react", "mapbox-gl", "react-map-gl/maplibre", "@/lib/store/useSimulationStoreContext", "@/lib/context/SimulationStoreContext", "@/types/vehicles", "@/utils/logger", "geojson", "lucide-react", "@/lib/utils"],
      "relatedFiles": ["app/simulation/[documentId]/page.tsx", "lib/store/useSimulationStore.ts", "types/vehicles.ts", "components/simulation/SimulationControls.tsx"]
    },
     "components/map/StaticRouteMap.tsx": {
        "description": "Renders a non-interactive map displaying a static route, origin/destination markers, and optionally the last known vehicle position. Used for map previews (e.g., on /shipments/[id]). Includes refresh button for LKL.",
        "keyImports": ["react", "mapbox-gl", "react-map-gl/mapbox", "@/utils/logger", "geojson", "lucide-react", "@/components/ui/button", "lucide-react"],
        "relatedFiles": ["app/shipments/[documentid]/page.tsx", "lib/actions/shipmentActions.ts"]
     },
    "components/simulation/SimulationControls.tsx": {
      "description": "Provides UI controls for the simulation: Start/Stop/Confirm buttons, speed slider, reset button, follow toggle, ETA display. Connects to useSimulationStoreContext to read state and dispatch actions. Disables controls based on vehicle status and simulation state.",
      "keyImports": ["react", "@/lib/store/useSimulationStoreContext", "@/lib/store/useSimulationStore", "@/components/ui/button", "@/components/ui/slider", "lucide-react", "@/components/ui/label", "@/components/ui/switch", "@/utils/logger", "@/utils/simulation/etaUtils", "date-fns"],
      "relatedFiles": ["app/simulation/[documentId]/page.tsx", "lib/store/useSimulationStore.ts", "@/utils/simulation/etaUtils.ts"]
    },
     "components/shipments/ShipmentCard.tsx": {
        "description": "Component displaying summary information for a single shipment in list views (e.g., /shipments, /simulation). Includes title fallback, status badge, core details, address tooltips, and action buttons. Used within an Accordion structure.",
        "keyImports": ["react", "lucide-react", "@/components/ui/button", "@/components/ui/dropdown-menu", "@/lib/utils", "@/lib/formatters", "@/types/api", "@/components/ui/tooltip", "@/components/ui/accordion", "@/components/shipments/StatusBadge"],
        "relatedFiles": ["app/shipments/[documentid]/page.tsx", "app/simulation/[documentId]/page.tsx", "types/api.ts", "@/components/shipments/StatusBadge.tsx"]
     },
     "components/shipments/ShipmentDetailView.tsx": {
        "description": "Component displaying detailed information about a selected shipment, typically shown alongside a list or map view. Uses tabs to organize details.",
        "relatedFiles": ["app/shipments/[documentid]/page.tsx", "types/api.ts"]
     },
     "components/shipments/StatusBadge.tsx": {
         "description": "Reusable badge component to visually represent shipment status with appropriate colors and icons.",
         "keyImports": ["react", "lucide-react", "@/components/ui/badge", "@/lib/database/schema", "@/lib/utils"],
         "relatedFiles": ["components/shipments/ShipmentCard.tsx"]
     },
    "components/logistics/shipments/AIMappingLabel.tsx": {
        "description": "Displays a label indicating an AI-mapped field with confidence level via tooltip.",
        "keyImports": ["react", "@/components/ui/tooltip", "lucide-react", "@/types/shipment"],
        "relatedFiles": ["components/logistics/shipments/ShipmentDetailsView.tsx"]
    },
    "components/ui/data-table.tsx": {
        "description": "Generic data table component used for displaying tabular data. Relies on TanStack Table concepts but implemented directly.",
        "keyImports": ["react", "@/lib/utils"],
        "relatedFiles": ["components/users/UserManagement.tsx", "components/drivers/DriverManagement.tsx"]
    },
    "components/ui/label.tsx": {
        "description": "UI component for form labels, wrapping Radix UI Label primitive.",
        "keyImports": ["react", "@radix-ui/react-label", "class-variance-authority", "@/lib/utils"],
        "relatedFiles": ["components/ui/input.tsx", "components/ui/select.tsx", "components/AuthForm.tsx"]
    },
    "components/ui/select.tsx": {
        "description": "UI components for select dropdowns, wrapping Radix UI Select primitives (Root, Group, Value, Trigger, Content, Label, Item, Separator).",
        "keyImports": ["react", "@radix-ui/react-select", "lucide-react", "@/lib/utils"],
        "relatedFiles": ["components/ui/input.tsx", "components/ui/label.tsx", "components/AuthForm.tsx"]
    },
    "components/ui/enhanced-file-upload.tsx": {
        "description": "Advanced file upload component supporting drag-and-drop, previews, progress simulation, and multiple file handling.",
        "keyImports": ["react", "@/components/ui/input", "@/components/ui/button", "@/lib/utils", "lucide-react", "next/image"],
        "relatedFiles": []
    },
    "components/ui/file-upload.tsx": {
        "description": "Basic file upload component supporting drag-and-drop, file type/size limits, and progress simulation.",
        "keyImports": ["react", "@/components/ui/input", "@/components/ui/progress", "lucide-react", "@/lib/utils"],
        "relatedFiles": []
    },
    "utils/simulation/simulationUtils.ts": {
      "description": "Utility functions supporting the simulation logic, specifically calculateNewPosition which uses Turf.js to determine a vehicle's next position and bearing along a route.",
      "keyImports": ["@/types/vehicles", "@turf/turf", "@/utils/logger"],
      "relatedFiles": ["lib/store/useSimulationStore.ts", "app/api/simulation/tick-worker/route.ts"]
    },
    "utils/simulation/etaUtils.ts": {
        "description": "Utility function (calculateEta) to estimate arrival time based on vehicle state (route distance, traveled distance) and simulation speed.",
        "keyImports": ["@/types/vehicles", "@/utils/logger"],
        "relatedFiles": ["components/simulation/SimulationControls.tsx"]
    },
    "components/map/BasicMapComponent.tsx": {"status": "deprecated/review"},
    "components/map/CustomerTrackingView.tsx": {"status": "deprecated/review", "note": "Renamed to ShipmentSnapshotMapView in plan, likely replaced by StaticRouteMap"},
    "components/map/FleetOverviewMap.tsx": {"status": "deprecated/review", "note": "Fleet view scrapped, functionality likely merged into SimulationMap"},
    "components/map/FleetOverviewMapWrapper.tsx": {"status": "deprecated/review"},
    "components/map/DriverInterface.tsx": {"status": "deprecated/review", "note": "Logic potentially referenced for simulation controls"},
    "components/map/MapView.tsx": {"status": "deprecated/review", "note": "Non-functional placeholder"},
    "components/map/VehicleMarkerLayer.tsx": {"status": "deprecated/review", "note": "Marker logic integrated into SimulationMap"},
    "components/map/MapDirectionsLayer.tsx": {"status": "deprecated/review", "note": "Route logic integrated into SimulationMap"},
    "store/map/useMapViewStore.ts": {"status": "deprecated/review"},
    "store/useUnifiedVehicleStore.ts": {"status": "deprecated/review", "note": "Replaced by useSimulationStore"},

    "lib/database/drizzle.ts": {},
    "lib/database/schema.ts": {},

    "services/kv/simulationCacheService.ts": {
        "description": "Provides functions to interact with Vercel KV for caching transient simulation vehicle state (get/setSimulationState, setActiveSimulation, getActiveSimulations).",
        "keyImports": ["@vercel/kv", "@/types/vehicles", "@/utils/logger"],
        "relatedFiles": ["@/types/vehicles", "services/kv/simulationCacheService.test.ts", "lib/actions/simulationActions.ts", "app/api/simulation/tick-worker/route.ts", "app/api/simulation/enqueue-ticks/route.ts"]
    },
    "services/kv/simulationCacheService.test.ts": {
        "description": "Unit tests for simulationCacheService using Jest, mocking @vercel/kv.",
        "keyImports": ["jest", "@vercel/kv", "@/utils/logger", "./simulationCacheService", "@/types/vehicles"],
        "relatedFiles": ["services/kv/simulationCacheService.ts"]
    },
    "components/AuthForm.tsx": {
        "description": "Generic authentication form component for sign-in, sign-up, and forgot password flows.",
        "keyImports": ["react", "react-hook-form", "zod", "next/navigation", "@/lib/simple-auth", "@/components/ui/button", "@/components/ui/input", "@/components/ui/label"],
        "relatedFiles": ["app/auth/sign-in/page.tsx", "app/auth/sign-up/page.tsx", "app/auth/forgot-password/page.tsx", "lib/simple-auth.ts"]
    },
    "hooks/use-debounce.ts": {
        "description": "Custom React hook to debounce a value, updating only after a specified delay.",
        "keyImports": ["react"],
        "relatedFiles": []
    },
    "lib/actions/shipmentActions.ts": {
      "description": "Defines Next.js Server Actions related to non-simulation shipment updates, specifically getShipmentLastKnownLocation.",
      "relatedFiles": ["app/shipments/[documentid]/page.tsx"]
    },

  
    "types/tracking.ts": {
        "description": "Defines core interfaces for live tracking: LiveVehicleUpdate (data from source) and StaticTrackingDetails (data fetched on page load).",
        "keyImports": ["geojson"],
        "relatedFiles": ["services/tracking/LiveTrackingService.ts", "lib/store/useLiveTrackingStore.ts", "tools/mock-tracker/index.js", "components/map/TrackingMap.tsx", "app/tracking/[shipmentId]/page.tsx"]
    },
    "services/tracking/LiveTrackingService.ts": {
        "description": "Defines the interface/contract for services handling real-time vehicle location subscriptions (e.g., Firestore implementation).",
        "keyImports": ["@/types/tracking"],
        "relatedFiles": ["types/tracking.ts", "services/tracking/FirestoreLiveTrackingService.ts", "lib/store/useLiveTrackingStore.ts"]
    },
    "services/tracking/FirestoreLiveTrackingService.ts": {
        "description": "Concrete implementation of LiveTrackingService using Firebase Firestore (onSnapshot) for subscribing to updates. Uses clientApp for Firebase instance.",
        "keyImports": ["firebase/firestore", "@/lib/firebase/clientApp", "@/services/tracking/LiveTrackingService", "@/types/tracking", "@/utils/logger"],
        "relatedFiles": ["services/tracking/LiveTrackingService.ts", "lib/firebase/clientApp.ts", "lib/store/useLiveTrackingStore.ts"]
    },
    "lib/store/useLiveTrackingStore.ts": {
        "description": "Zustand store managing client-side state for live vehicle tracking. Handles subscription lifecycle, latest updates, static details, errors, and map interaction state (isFollowingVehicle).",
        "keyImports": ["zustand", "@/types/tracking", "@/services/tracking/FirestoreLiveTrackingService", "mapbox-gl"],
        "relatedFiles": ["types/tracking.ts", "services/tracking/LiveTrackingService.ts", "services/tracking/FirestoreLiveTrackingService.ts", "components/map/TrackingMap.tsx", "app/tracking/[shipmentId]/page.tsx", "components/map/TrackingControls.tsx"]
    },
    "lib/firebase/clientApp.ts": {
        "description": "Initializes the Firebase client-side application instance using environment variables (NEXT_PUBLIC_...). Ensures singleton pattern.",
        "keyImports": ["firebase/app", "firebase/firestore"],
        "relatedFiles": ["services/tracking/FirestoreLiveTrackingService.ts", ".env.local"]
    },
    "components/map/TrackingMap.tsx": {
        "description": "Renders the interactive map for LIVE vehicle tracking using react-map-gl. Displays vehicle marker from GeoJSON source, handles popups, follow mode, zoom-to-fit (via ref), origin/destination markers, and planned route layer. Connects to useLiveTrackingStore.",
        "keyImports": ["react", "mapbox-gl", "react-map-gl/mapbox", "@/lib/store/useLiveTrackingStore", "@/types/tracking", "@/utils/logger", "geojson", "lucide-react", "@/utils/formatters"],
        "relatedFiles": ["lib/store/useLiveTrackingStore.ts", "app/tracking/[shipmentId]/page.tsx", "components/map/TrackingControls.tsx", "utils/formatters.ts"]
    },
     "components/map/TrackingControls.tsx": {
        "description": "Provides UI controls (buttons) for the TrackingMap, specifically Zoom-to-Fit and Follow Vehicle toggle. Interacts with map via ref and store actions.",
        "keyImports": ["react", "lucide-react", "@/components/ui/button", "@/lib/store/useLiveTrackingStore", "./TrackingMap", "@/utils/logger", "@/lib/utils"],
        "relatedFiles": ["components/map/TrackingMap.tsx", "app/tracking/[shipmentId]/page.tsx", "lib/store/useLiveTrackingStore.ts"]
    },
    "utils/formatters.ts": {
        "description": "Utility functions for formatting data for display, e.g., timestamps and speeds.",
        "keyImports": [],
        "relatedFiles": ["components/map/TrackingMap.tsx"]
    },
    "tools/mock-tracker/index.js": {
        "description": "Standalone Node.js script to simulate a device sending LiveVehicleUpdate data to Firestore. Uses Firebase Admin SDK and reads config from tools/mock-tracker/.env.",
        "relatedFiles": ["tools/mock-tracker/.env", "tools/mock-tracker/.gitignore", "tools/mock-tracker/loadup-logistics-dev-firebase-adminsdk.json", "types/tracking.ts"]
    },
    "tools/mock-tracker/.env": {
        "description": "Environment variables specifically for the mock-tracker Node.js script (contains GOOGLE_APPLICATION_CREDENTIALS path). Should be gitignored.",
        "relatedFiles": ["tools/mock-tracker/index.js", "tools/mock-tracker/.gitignore"]
    },
    "tools/mock-tracker/.gitignore": {
        "description": "Git ignore file specifically for the mock-tracker tool directory, ensuring key files and .env are not committed.",
        "relatedFiles": ["tools/mock-tracker/.env", "tools/mock-tracker/loadup-logistics-dev-firebase-adminsdk.json"]
    },
    "lib/actions/trackingActions.ts": {
        "description": "Defines Server Actions for live tracking page: getShipmentsForDocumentContaining (fetches related shipments, maps to full ApiShipmentDetail) and getStaticTrackingDetails (fetches data for StaticTrackingDetails).",
        "keyImports": ["server-only", "@/lib/database/drizzle", "@/lib/database/schema", "@/types/api", "@/types/tracking", "@/utils/logger", "drizzle-orm"],
        "relatedFiles": ["app/tracking/[shipmentId]/_components/TrackingPageView.tsx", "types/api.ts", "types/tracking.ts", "lib/database/schema.ts"]
    },
    "app/tracking/[shipmentId]/page.tsx": {
        "description": "Minimal page component for the /tracking/[shipmentId] route. Extracts param and renders TrackingPageView.",
        "keyImports": ["react"],
        "relatedFiles": ["app/tracking/[shipmentId]/_components/TrackingPageView.tsx"]
    },
    "app/tracking/[shipmentId]/_components/TrackingPageView.tsx": {
        "description": "Main client component for the live tracking page. Handles fetching shipment list and static details via Server Actions, manages selection, integrates TrackingMap and TrackingControls, and orchestrates live data subscription via useLiveTrackingStore.",
        "keyImports": ["react", "@/utils/logger", "@/types/api", "@/types/tracking", "@/components/shipments/ShipmentCard", "@/components/map/TrackingMap", "@/components/map/TrackingControls", "@/lib/store/useLiveTrackingStore", "@/lib/actions/trackingActions", "@/components/ui/accordion", "lucide-react"],
        "relatedFiles": ["app/tracking/[shipmentId]/page.tsx", "lib/actions/trackingActions.ts", "lib/store/useLiveTrackingStore.ts", "components/map/TrackingMap.tsx", "components/map/TrackingControls.tsx", "components/shipments/ShipmentCard.tsx"]
    },
    "lib/actions/auth.ts": {
        "description": "Defines Next.js Server Actions for handling user sign-in (with credentials) and sign-up (currently disabled). Interacts with NextAuth.js signIn function.",
        "keyImports": ["server-only", "@/lib/auth", "@/lib/validations", "@auth/core/errors"],
        "relatedFiles": ["lib/auth.ts", "app/api/auth/[...nextauth]/options.ts", "lib/validations.ts", "components/AuthForm.tsx"]
    },
    "lib/auth.ts": {
        "description": "Initializes and exports NextAuth.js core functions (auth, signIn, signOut), handling a development bypass flag. Imports main configuration from options.ts.",
        "keyImports": ["next-auth", "@/app/api/auth/[...nextauth]/options"],
        "relatedFiles": ["lib/actions/auth.ts", "app/api/auth/[...nextauth]/options.ts", "app/api/auth/[...nextauth]/route.ts"]
    },
    "app/api/auth/[...nextauth]/options.ts": {
        "description": "Defines the core NextAuth.js configuration (AuthOptions). Includes providers (Credentials with mock data), JWT/Session callbacks (adding user role), pages, and role-based route access logic.",
        "keyImports": ["next-auth", "next-auth/providers/credentials", "bcryptjs", "next-auth/jwt"],
        "relatedFiles": ["lib/auth.ts", "lib/actions/auth.ts", "app/api/auth/[...nextauth]/route.ts", "types/next-auth.d.ts"]
    },
    "app/api/auth/[...nextauth]/route.ts": {
        "description": "Standard Next.js route handler that exports the GET and POST handlers from NextAuth.js initialized with authOptions.",
        "keyImports": ["next-auth", "@/app/api/auth/[...nextauth]/options"],
        "relatedFiles": ["lib/auth.ts", "app/api/auth/[...nextauth]/options.ts"]
    }
  }
}
