import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

export interface Viewport {
  center: [number, number];
  zoom: number;
  bearing?: number;
  pitch?: number;
}

interface MapViewState {
  viewport: Viewport;
  mapToken: string | null;
  isMapReady: boolean;
  isMapError: boolean;
  mapErrorMessage: string | null;
}

interface MapViewActions {
  setViewport: (viewport: Partial<Viewport>) => void;
  setMapToken: (token: string | null) => void;
  setMapReady: (ready: boolean) => void;
  setMapError: (error: boolean, message?: string) => void;
}

type MapViewStore = MapViewState & MapViewActions;

// Initial viewport (San Francisco area)
const initialViewport: Viewport = {
  center: [-122.4194, 37.7749], // San Francisco
  zoom: 12,
  bearing: 0,
  pitch: 0
};

// Create the store
export const useMapViewStore = create<MapViewStore>()(
  devtools(
    (set) => ({
      // Initial state
      viewport: initialViewport,
      mapToken: null,
      isMapReady: false,
      isMapError: false,
      mapErrorMessage: null,
      
      // Actions
      setViewport: (partialViewport) => 
        set((state) => ({
          viewport: { ...state.viewport, ...partialViewport }
        })),
        
      setMapToken: (token) => set({ mapToken: token }),
      
      setMapReady: (ready) => 
        set({ 
          isMapReady: ready,
          isMapError: ready ? false : false,
          mapErrorMessage: ready ? null : null
        }),
        
      setMapError: (error, message) => 
        set({ 
          isMapError: error,
          mapErrorMessage: message || null
        }),
    }),
    { name: 'map-view-store' }
  )
);

// Selectors for commonly used values
export const useMapViewport = () => 
  useMapViewStore((state) => state.viewport);

export const useMapToken = () => 
  useMapViewStore((state) => state.mapToken);

export const useMapReady = () => 
  useMapViewStore((state) => state.isMapReady);

export default useMapViewStore; 