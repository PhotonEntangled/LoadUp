import React, { useCallback, useState } from 'react';
import Map, { NavigationControl, Marker } from 'react-map-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { useBasicMapStore, useActiveMapStyle, BasicViewState } from '../../store/map/useBasicMapStore';

interface MarkerMapProps {
  height?: string | number;
}

// Simple styled marker component
const CustomMarker = React.memo(({ 
  longitude, 
  latitude, 
  color = '#3B82F6', 
  size = 24,
  label,
  onClick
}: {
  longitude: number;
  latitude: number;
  color?: string;
  size?: number;
  label?: string;
  onClick?: () => void;
}) => {
  return (
    <Marker longitude={longitude} latitude={latitude} onClick={onClick}>
      <div 
        style={{
          width: size,
          height: size,
          borderRadius: '50%',
          backgroundColor: color,
          border: '2px solid white',
          cursor: 'pointer',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          boxShadow: '0 2px 4px rgba(0,0,0,0.3)'
        }}
      >
        {label && <span style={{ color: 'white', fontSize: '12px', fontWeight: 'bold' }}>{label}</span>}
      </div>
    </Marker>
  );
});

// Example marker data
const EXAMPLE_MARKERS = [
  { id: '1', longitude: -74.006, latitude: 40.7128, color: '#3B82F6', label: '1' },
  { id: '2', longitude: -74.016, latitude: 40.7138, color: '#10B981', label: '2' },
  { id: '3', longitude: -73.996, latitude: 40.7118, color: '#EF4444', label: '3' },
];

const MarkerMapComponent: React.FC<MarkerMapProps> = ({
  height = '100vh'
}) => {
  // Get state from store
  const viewState = useBasicMapStore(state => state.viewState);
  const setViewState = useBasicMapStore(state => state.setViewState);
  const mapStyle = useActiveMapStyle();
  
  // Local state for marker interaction
  const [selectedMarkerId, setSelectedMarkerId] = useState<string | null>(null);
  
  // Handle view state changes
  const handleViewStateChange = useCallback((evt: { viewState: BasicViewState }) => {
    setViewState(evt.viewState);
  }, [setViewState]);

  // Handle marker click
  const handleMarkerClick = useCallback((markerId: string) => {
    setSelectedMarkerId(markerId === selectedMarkerId ? null : markerId);
  }, [selectedMarkerId]);

  return (
    <div style={{ width: '100%', height }}>
      <Map
        {...viewState}
        style={{ width: '100%', height: '100%' }}
        mapStyle={mapStyle.uri}
        onMove={handleViewStateChange}
        mapboxAccessToken={process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN}
      >
        <NavigationControl position="top-right" />
        
        {/* Render markers */}
        {EXAMPLE_MARKERS.map(marker => (
          <CustomMarker
            key={marker.id}
            longitude={marker.longitude}
            latitude={marker.latitude}
            color={marker.id === selectedMarkerId ? '#9333EA' : marker.color}
            size={marker.id === selectedMarkerId ? 32 : 24}
            label={marker.label}
            onClick={() => handleMarkerClick(marker.id)}
          />
        ))}
      </Map>
      
      {/* Info panel for selected marker */}
      {selectedMarkerId && (
        <div 
          style={{
            position: 'absolute',
            bottom: 20,
            left: 20,
            backgroundColor: 'white',
            padding: 16,
            borderRadius: 8,
            boxShadow: '0 2px 10px rgba(0,0,0,0.15)'
          }}
        >
          <h3 style={{ margin: '0 0 8px 0' }}>Marker {selectedMarkerId}</h3>
          <p style={{ margin: 0 }}>
            Location: {EXAMPLE_MARKERS.find(m => m.id === selectedMarkerId)?.longitude.toFixed(4)}, 
            {EXAMPLE_MARKERS.find(m => m.id === selectedMarkerId)?.latitude.toFixed(4)}
          </p>
        </div>
      )}
    </div>
  );
};

export default MarkerMapComponent; 