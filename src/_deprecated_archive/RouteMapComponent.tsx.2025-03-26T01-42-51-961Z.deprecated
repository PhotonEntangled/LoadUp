import React, { useCallback, useState } from 'react';
import Map, { NavigationControl, Marker, Source, Layer } from 'react-map-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { useBasicMapStore, useActiveMapStyle, BasicViewState } from '../../store/map/useBasicMapStore';

interface RouteMapProps {
  height?: string | number;
}

// Simple styled marker component
const CustomMarker = React.memo(({ 
  longitude, 
  latitude, 
  color = '#3B82F6', 
  size = 24,
  label,
  onClick
}: {
  longitude: number;
  latitude: number;
  color?: string;
  size?: number;
  label?: string;
  onClick?: () => void;
}) => {
  return (
    <Marker longitude={longitude} latitude={latitude} onClick={onClick}>
      <div 
        style={{
          width: size,
          height: size,
          borderRadius: '50%',
          backgroundColor: color,
          border: '2px solid white',
          cursor: 'pointer',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          boxShadow: '0 2px 4px rgba(0,0,0,0.3)'
        }}
      >
        {label && <span style={{ color: 'white', fontSize: '12px', fontWeight: 'bold' }}>{label}</span>}
      </div>
    </Marker>
  );
});

// Example route stop data
interface RouteStop {
  id: string;
  longitude: number;
  latitude: number;
  color: string;
  label: string;
  type: 'pickup' | 'delivery' | 'vehicle';
}

// Sample route data
const ROUTE_STOPS: RouteStop[] = [
  { id: 'vehicle', longitude: -74.006, latitude: 40.7128, color: '#3B82F6', label: 'V', type: 'vehicle' },
  { id: 'pickup-1', longitude: -74.016, latitude: 40.7138, color: '#10B981', label: 'P1', type: 'pickup' },
  { id: 'pickup-2', longitude: -74.026, latitude: 40.7158, color: '#10B981', label: 'P2', type: 'pickup' },
  { id: 'delivery-1', longitude: -73.986, latitude: 40.7118, color: '#EF4444', label: 'D1', type: 'delivery' },
  { id: 'delivery-2', longitude: -73.976, latitude: 40.7108, color: '#EF4444', label: 'D2', type: 'delivery' },
];

// Route line style
const routeLineStyle = {
  id: 'route-line',
  type: 'line',
  layout: {
    'line-join': 'round',
    'line-cap': 'round'
  },
  paint: {
    'line-color': '#3B82F6',
    'line-width': 3
  }
};

// Generate a simplified route GeoJSON between stops
const generateRouteGeoJSON = (stops: RouteStop[]) => {
  if (stops.length < 2) return null;
  
  // For simplicity, just create straight lines between stops
  // In a real implementation, this would use actual route data from a routing API
  const coordinates = stops.map(stop => [stop.longitude, stop.latitude]);
  
  return {
    type: 'Feature',
    properties: {},
    geometry: {
      type: 'LineString',
      coordinates
    }
  };
};

const RouteMapComponent: React.FC<RouteMapProps> = ({
  height = '100vh'
}) => {
  // Get state from store
  const viewState = useBasicMapStore(state => state.viewState);
  const setViewState = useBasicMapStore(state => state.setViewState);
  const mapStyle = useActiveMapStyle();
  
  // Local state for marker interaction
  const [selectedStopId, setSelectedStopId] = useState<string | null>(null);
  
  // Handle view state changes
  const handleViewStateChange = useCallback((evt: { viewState: BasicViewState }) => {
    setViewState(evt.viewState);
  }, [setViewState]);

  // Handle marker click
  const handleMarkerClick = useCallback((stopId: string) => {
    setSelectedStopId(stopId === selectedStopId ? null : stopId);
  }, [selectedStopId]);

  // Generate route GeoJSON
  const routeGeoJSON = generateRouteGeoJSON(ROUTE_STOPS);

  // Get selected stop details
  const selectedStop = ROUTE_STOPS.find(stop => stop.id === selectedStopId);

  return (
    <div style={{ width: '100%', height }}>
      <Map
        {...viewState}
        style={{ width: '100%', height: '100%' }}
        mapStyle={mapStyle.uri}
        onMove={handleViewStateChange}
        mapboxAccessToken={process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN}
      >
        <NavigationControl position="top-right" />
        
        {/* Route line */}
        {routeGeoJSON && (
          <Source id="route-source" type="geojson" data={routeGeoJSON}>
            <Layer {...routeLineStyle as any} />
          </Source>
        )}
        
        {/* Route stop markers */}
        {ROUTE_STOPS.map(stop => (
          <CustomMarker
            key={stop.id}
            longitude={stop.longitude}
            latitude={stop.latitude}
            color={stop.id === selectedStopId ? '#9333EA' : stop.color}
            size={stop.id === selectedStopId ? 32 : 24}
            label={stop.label}
            onClick={() => handleMarkerClick(stop.id)}
          />
        ))}
      </Map>
      
      {/* Stop details panel */}
      {selectedStop && (
        <div 
          style={{
            position: 'absolute',
            bottom: 20,
            left: 20,
            backgroundColor: 'white',
            padding: 16,
            borderRadius: 8,
            boxShadow: '0 2px 10px rgba(0,0,0,0.15)'
          }}
        >
          <h3 style={{ margin: '0 0 8px 0' }}>
            {selectedStop.type === 'vehicle' ? 'Vehicle' : 
             selectedStop.type === 'pickup' ? 'Pickup Location' : 'Delivery Location'} 
            {selectedStop.label}
          </h3>
          <p style={{ margin: 0 }}>
            Location: {selectedStop.longitude.toFixed(4)}, {selectedStop.latitude.toFixed(4)}
          </p>
          <p style={{ margin: '8px 0 0 0' }}>
            Type: {selectedStop.type}
          </p>
        </div>
      )}
    </div>
  );
};

export default RouteMapComponent; 