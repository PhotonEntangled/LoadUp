import React, { useRef, useEffect, useCallback } from 'react';import mapboxgl from 'mapbox-gl';import 'mapbox-gl/dist/mapbox-gl.css';// Import our stores and hooksimport { useVehicleStore, useFilteredVehicles, useSelectedVehicle, Vehicle } from '../../store/useVehicleStore';import { useMapViewStore } from '../../store/useMapViewStore';import { useTrackingStore } from '../../store/useTrackingStore';import useVehicleTracking from '../../hooks/useVehicleTracking';// Import our componentsimport VehicleMarker from './VehicleMarker';import RouteLayer from './RouteLayer';import VehicleDetailsOverlay from './VehicleDetailsOverlay';import MapControls from './MapControls';// Import our utilitiesimport { calculateBoundingBox } from '../../utils/mapUtils';// Define Map and related components from react-map-gl// This is a workaround for the import issueinterface NavigationControlProps {  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';}interface ScaleControlProps {  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';}interface MapProps {  ref?: React.RefObject<any>;  mapStyle?: string;  mapboxAccessToken?: string;  onMove?: (event: { viewState: any }) => void;  onClick?: (event: any) => void;  onLoad?: () => void;  children?: React.ReactNode;  [key: string]: any;}// We'll use these as mock componentsconst Map: React.FC<MapProps> = ({ children, ...props }) => <div {...props}>{children}</div>;const NavigationControl: React.FC<NavigationControlProps> = () => <div />;const ScaleControl: React.FC<ScaleControlProps> = () => <div />;// Constantsconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN || '';interface FleetOverviewMapProps {  initialVehicles?: Vehicle[];  height?: string;  width?: string;  showFilters?: boolean;  refreshInterval?: number;  onVehicleClick?: (vehicle: Vehicle) => void;}const FleetOverviewMap: React.FC<FleetOverviewMapProps> = ({  initialVehicles = [],  height = '100%',  width = '100%',  showFilters = true,  refreshInterval = 10000,  onVehicleClick}) => {  // Get store actions and state  const viewState = useMapViewStore((state) => state.viewState);  const setViewState = useMapViewStore((state) => state.setViewState);  const mapStyle = useMapViewStore((state) => state.mapStyle);  const setMapLoaded = useMapViewStore((state) => state.setMapLoaded);  const fitBounds = useMapViewStore((state) => state.fitBounds);    const selectedVehicleId = useVehicleStore((state) => state.selectedVehicleId);  const setSelectedVehicleId = useVehicleStore((state) => state.setSelectedVehicleId);  const setVehicles = useVehicleStore((state) => state.setVehicles);    // Set tracking interval from props  const setRefreshInterval = useTrackingStore((state) => state.setRefreshInterval);    // Use our filtered selector with explicit typing  const filteredVehicles: Vehicle[] = useFilteredVehicles();  const selectedVehicle = useSelectedVehicle();    // Map reference  const mapRef = useRef(null);    // Initialize with props  useEffect(() => {    if (initialVehicles && initialVehicles.length > 0) {      setVehicles(initialVehicles);    }        if (refreshInterval) {      setRefreshInterval(refreshInterval);    }  }, [initialVehicles, refreshInterval, setVehicles, setRefreshInterval]);    // Start tracking  useVehicleTracking();    // Fit map to vehicles when they change or filter changes  useEffect(() => {    if (filteredVehicles.length === 0) return;        // Get all vehicle locations    const coordinates = filteredVehicles.map(vehicle =>       [vehicle.location.longitude, vehicle.location.latitude] as [number, number]    );        // Add route stop coordinates if any    filteredVehicles.forEach(vehicle => {      if (vehicle.route?.stops) {        vehicle.route.stops.forEach(stop => {          coordinates.push([stop.longitude, stop.latitude]);        });      }    });        // Calculate bounding box    const bounds = calculateBoundingBox(coordinates);        // Fit the map to the bounds    fitBounds(bounds);  }, [fitBounds, filteredVehicles.length]);    // Handle map load  const handleMapLoad = useCallback(() => {    setMapLoaded(true);        // Dispatch an event that the MapPage component listens for    const mapLoadedEvent = new Event('mapboxgl.map.loaded');    document.dispatchEvent(mapLoadedEvent);  }, [setMapLoaded]);    // Handle vehicle click  const handleVehicleClick = useCallback((vehicleId: string) => {    setSelectedVehicleId(vehicleId === selectedVehicleId ? null : vehicleId);        // Call the onVehicleClick prop if provided    if (onVehicleClick && selectedVehicle) {      onVehicleClick(selectedVehicle);    }  }, [selectedVehicleId, selectedVehicle, setSelectedVehicleId, onVehicleClick]);    // Handle map click to deselect vehicle  const handleMapClick = useCallback(() => {    setSelectedVehicleId(null);  }, [setSelectedVehicleId]);    // Handle view state change  const handleViewStateChange = useCallback(({ viewState }: { viewState: any }) => {    setViewState(viewState);  }, [setViewState]);    // Close vehicle details  const handleCloseDetails = useCallback(() => {    setSelectedVehicleId(null);  }, [setSelectedVehicleId]);    return (    <div className="relative w-full h-full" style={{ height, width }}>      <Map        ref={mapRef}        {...viewState}        mapStyle={mapStyle}        mapboxAccessToken={MAPBOX_TOKEN}        onMove={handleViewStateChange}        onClick={handleMapClick}        onLoad={handleMapLoad}      >        {/* Navigation Controls */}        <NavigationControl position="top-left" />        <ScaleControl position="bottom-left" />                {/* Vehicle Routes - Render below markers */}        {filteredVehicles.map((vehicle) => (          <RouteLayer key={`route-${vehicle.id}`} vehicle={vehicle} />        ))}                {/* Vehicle Markers */}        {filteredVehicles.map((vehicle) => (          <VehicleMarker            key={vehicle.id}            vehicle={vehicle}            onClick={handleVehicleClick}            isSelected={vehicle.id === selectedVehicleId}          />        ))}      </Map>            {/* Map Controls */}      {showFilters && <MapControls />}            {/* Vehicle Details Overlay */}      <VehicleDetailsOverlay         vehicle={selectedVehicle}         onClose={handleCloseDetails}       />    </div>  );};export default FleetOverviewMap;