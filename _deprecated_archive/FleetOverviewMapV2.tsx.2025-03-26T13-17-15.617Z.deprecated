/**
 * FleetOverviewMapV2 Component
 * 
 * A refactored map component using vanilla JavaScript with Mapbox GL,
 * implementing the design patterns from Uber clone for proper state
 * management and lifecycle handling.
 */
import React, { useEffect, useRef, useState, useCallback } from 'react';
import mapboxgl from 'mapbox-gl';
import { useUnifiedVehicleStore } from '../../store/useUnifiedVehicleStore';
import { mapManager } from '../../utils/maps/MapManager';
import MapMarkerLayer from './MapMarkerLayer';
import styles from './FleetOverviewMapV2.module.css';

// Define valid Mapbox token directly to fix any caching or reference issues
const VALID_MAPBOX_TOKEN = 'pk.eyJ1IjoiZXNyYXJ1c3RpbiIsImEiOiJjbThnaG9zbGUwaTJwMmtzN3Z2NG52aGFqIn0.YZU4AX-XapN8dwxI79fs0g';

// Define MapBounds interface
export interface MapBounds {
  north: number;
  south: number;
  east: number;
  west: number;
}

// Extend Window interface to include mapboxgl
declare global {
  interface Window {
    mapboxgl: any;
  }
}

export interface FleetOverviewMapV2Props {
  height?: string | number;
  width?: string | number;
  className?: string;
  enableControls?: boolean;
  enableSimulation?: boolean;
  enableSearch?: boolean;
  onMapReady?: (map: mapboxgl.Map) => void;
  forceScriptReload?: boolean;
  mapStyle?: string;
  containerStyle?: React.CSSProperties;
  initialView?: {
    center: { lat: number; lng: number };
    zoom: number;
  };
  bounds?: MapBounds;
}

// Global initialization tracking
if (typeof window !== 'undefined' && !window.hasOwnProperty('mapboxGlobalInit')) {
  (window as any).mapboxGlobalInit = {
    scriptInitialized: false,
    cssInitialized: false,
    loadAttempted: false
  };
}

/**
 * Fleet Overview Map Component V2
 */
const FleetOverviewMapV2: React.FC<FleetOverviewMapV2Props> = ({
  height = '100%',
  width = '100%',
  className = '',
  enableControls = true,
  enableSimulation = false,
  enableSearch = true,
  onMapReady,
  forceScriptReload = false,
  mapStyle = 'light-v11',
  containerStyle = {
    width: '100%',
    height: '500px', // Default height
  },
  initialView = {
    center: { lat: 3.1390, lng: 101.6869 }, // Default: Kuala Lumpur
    zoom: 12,
  },
  bounds,
}) => {
  // Get data from UnifiedVehicleStore
  const filteredVehicles = useUnifiedVehicleStore(state => state.getFilteredVehicles());
  const selectedVehicleId = useUnifiedVehicleStore(state => state.selectedVehicleId);
  const selectVehicle = useUnifiedVehicleStore(state => state.selectVehicle);
  
  // Add a unique ID for this instance
  const [mapId] = useState(`fleet-map-${Date.now()}`);
  const [mapError, setMapError] = useState<Error | null>(null);
  
  // Refs
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const linkElementRef = useRef<HTMLLinkElement | null>(null);
  const scriptElementRef = useRef<HTMLScriptElement | null>(null);
  
  // State
  const [isMapLoaded, setIsMapLoaded] = useState(false);
  const [isScriptLoaded, setIsScriptLoaded] = useState(false);
  const [isCssLoaded, setIsCssLoaded] = useState(false);
  const [scriptLoadAttempted, setScriptLoadAttempted] = useState(false);
  
  // Add DEBUG logging for vehicle data
  useEffect(() => {
    console.log(`[FleetOverviewMapV2] Vehicle data update: ${filteredVehicles.length} vehicles available`);
    filteredVehicles.forEach((vehicle, index) => {
      if (index < 3) { // Log details for first 3 vehicles only to avoid console spam
        console.log(`[FleetOverviewMapV2] Vehicle ${index}: id=${vehicle.id}, location=${JSON.stringify(vehicle.location)}`);
      }
    });
  }, [filteredVehicles]);
  
  // Replace the script loading effect with a more robust one
  useEffect(() => {
    // Skip if already attempted to load script
    if (scriptLoadAttempted) return;
    
    // Check if already loaded
    if (isScriptLoaded && isCssLoaded) {
      console.log('[FleetOverviewMapV2] Scripts already loaded, skipping load');
      return;
    }
    
    // Check if scripts are already in document
    const existingScript = document.querySelector('script[src*="mapbox-gl.js"]');
    const existingCSS = document.querySelector('link[href*="mapbox-gl.css"]');
    
    if (existingScript && !isScriptLoaded) {
      console.log('[FleetOverviewMapV2] Mapbox script found in document, setting as loaded');
      setIsScriptLoaded(true);
    }
    
    if (existingCSS && !isCssLoaded) {
      console.log('[FleetOverviewMapV2] Mapbox CSS found in document, setting as loaded');
      setIsCssLoaded(true);
    }
    
    // If both already exist and are properly loaded, skip
    if ((existingScript && isScriptLoaded) && (existingCSS && isCssLoaded)) {
      return;
    }
    
    console.log('[FleetOverviewMapV2] Attempting to load Mapbox resources...');
    setScriptLoadAttempted(true);
    
    // Load CSS if needed
    if (!existingCSS || !isCssLoaded) {
      const linkElement = document.createElement('link');
      linkElement.rel = 'stylesheet';
      linkElement.href = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css';
      linkElement.onload = () => {
        console.log('[FleetOverviewMapV2] Mapbox CSS loaded successfully');
        setIsCssLoaded(true);
      };
      linkElement.onerror = () => {
        console.error('[FleetOverviewMapV2] Failed to load Mapbox CSS');
        setMapError(new Error('Failed to load Mapbox CSS. Please check your internet connection.'));
      };
      document.head.appendChild(linkElement);
      linkElementRef.current = linkElement;
    }
    
    // Load script if needed
    if (!existingScript || !isScriptLoaded) {
      const scriptElement = document.createElement('script');
      scriptElement.src = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js';
      scriptElement.async = true;
      
      scriptElement.onload = () => {
        console.log('[FleetOverviewMapV2] Mapbox script loaded successfully');
        setIsScriptLoaded(true);
      };
      
      scriptElement.onerror = () => {
        console.error('[FleetOverviewMapV2] Failed to load Mapbox script');
        setMapError(new Error('Failed to load Mapbox script. Please check your internet connection.'));
      };
      
      document.body.appendChild(scriptElement);
      scriptElementRef.current = scriptElement;
    }
    
    return () => {
      // Don't remove resources on unmount since they may be needed by other components
      // Just clear our references
      scriptElementRef.current = null;
      linkElementRef.current = null;
    };
  }, [scriptLoadAttempted, isScriptLoaded, isCssLoaded]);
  
  // Initialize map when script and token are loaded
  const initializeMap = useCallback(() => {
    // Log initialization conditions for debugging
    console.log('[FleetOverviewMapV2] Map initialization conditions:', {
      isScriptLoaded,
      isCssLoaded,
      hasContainer: !!mapContainerRef.current,
      mapAlreadyExists: !!mapRef.current
    });
    
    if (!isScriptLoaded || !isCssLoaded || !mapContainerRef.current || mapRef.current) {
      console.log('[FleetOverviewMapV2] Map initialization conditions not met:', {
        isScriptLoaded,
        isCssLoaded,
        hasContainer: !!mapContainerRef.current,
        mapAlreadyExists: !!mapRef.current
      });
      return;
    }
    
    try {
      console.log('[FleetOverviewMapV2] Initializing map with token:', VALID_MAPBOX_TOKEN.substring(0, 10) + '...');
      
      // Check if mapboxgl is available
      if (!window.mapboxgl) {
        throw new Error('mapboxgl is not available. Script may have loaded but the global object is not accessible.');
      }
      
      // Set token
      window.mapboxgl.accessToken = VALID_MAPBOX_TOKEN;
      
      // Ensure container has dimensions
      if (mapContainerRef.current.clientHeight === 0 || mapContainerRef.current.clientWidth === 0) {
        console.warn('[FleetOverviewMapV2] Map container has zero dimensions. Setting explicit size.');
        mapContainerRef.current.style.height = typeof height === 'number' ? `${height}px` : height as string;
        mapContainerRef.current.style.width = typeof width === 'number' ? `${width}px` : width as string;
      }
      
      console.log('[FleetOverviewMapV2] Container dimensions:', {
        width: mapContainerRef.current.clientWidth,
        height: mapContainerRef.current.clientHeight
      });
      
      // Create map
      const map = new window.mapboxgl.Map({
        container: mapContainerRef.current,
        style: `mapbox://styles/mapbox/${mapStyle}`,
        center: [initialView.center.lng, initialView.center.lat],
        zoom: initialView.zoom,
        bearing: 0,
        pitch: 0
      });
      
      // Save ref
      mapRef.current = map;
      
      // Register with MapManager
      mapManager.registerMap(mapId, map);
      
      // Add navigation control if enabled
      if (enableControls) {
        map.addControl(new window.mapboxgl.NavigationControl(), 'top-right');
      }
      
      // Wait for map to load
      map.on('load', () => {
        console.log('[FleetOverviewMapV2] Map loaded successfully');
        setIsMapLoaded(true);
        
        // Call onMapReady callback if provided
        if (onMapReady) onMapReady(map);
      });
      
      // Handle errors
      map.on('error', (e: any) => {
        console.error('[FleetOverviewMapV2] Map error:', e);
        setMapError(new Error(`Map error: ${e.error?.message || 'Unknown error'}`));
      });
      
      console.log('[FleetOverviewMapV2] Map initialized successfully');
    } catch (err) {
      console.error('[FleetOverviewMapV2] Error initializing map:', err);
      setMapError(new Error(`Error initializing map: ${err}`));
    }
  }, [
    isScriptLoaded,
    isCssLoaded,
    height,
    width,
    enableControls,
    initialView,
    mapStyle,
    onMapReady,
    mapId
  ]);
  
  // Initialize map when resources are loaded
  useEffect(() => {
    if (isScriptLoaded && isCssLoaded) {
      initializeMap();
    }
  }, [isScriptLoaded, isCssLoaded, initializeMap]);
  
  // Clean up on unmount
  useEffect(() => {
    return () => {
      // Unregister from MapManager
      if (mapRef.current) {
        mapManager.unregisterMap(mapId);
        mapRef.current = null;
      }
    };
  }, [mapId]);
  
  // Handle vehicle click
  const handleVehicleClick = useCallback((vehicle: any) => {
    console.log('[FleetOverviewMapV2] Vehicle clicked:', vehicle.id);
    selectVehicle(vehicle.id);
  }, [selectVehicle]);
  
  // Zoom to bounds if provided
  useEffect(() => {
    if (mapRef.current && bounds && isMapLoaded) {
      const { north, south, east, west } = bounds;
      mapRef.current.fitBounds(
        [[west, south], [east, north]],
        { padding: 50 }
      );
    }
  }, [bounds, isMapLoaded]);
  
  // Display loading state or error
  if (!isScriptLoaded || !isCssLoaded) {
    return (
      <div 
        ref={mapContainerRef}
        className={`${styles.mapContainer} ${className}`}
        style={{
          ...containerStyle,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: '#f0f0f0'
        }}
      >
        Loading map resources...
      </div>
    );
  }
  
  if (mapError) {
    return (
      <div 
        className={`${styles.mapContainer} ${className}`}
        style={{
          ...containerStyle,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: '#fff0f0',
          color: 'red',
          padding: '20px',
          textAlign: 'center'
        }}
      >
        <div>
          <h3>Map Error</h3>
          <p>{mapError.message}</p>
        </div>
      </div>
    );
  }
  
  console.log(`[FleetOverviewMapV2] Rendering: isMapLoaded=${isMapLoaded}, vehicles=${filteredVehicles.length}, selectedVehicle=${selectedVehicleId || 'none'}`);
  
  return (
    <div 
      ref={mapContainerRef}
      id={mapId}
      className={`${styles.mapContainer} ${className}`}
      style={containerStyle}
    >
      {isMapLoaded && mapRef.current && (
        <MapMarkerLayer
          mapId={mapId}
          vehicles={filteredVehicles}
          selectedVehicleId={selectedVehicleId}
          onVehicleClick={handleVehicleClick}
        />
      )}
    </div>
  );
};

export default FleetOverviewMapV2; 